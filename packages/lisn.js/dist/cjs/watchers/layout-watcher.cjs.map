{"version":3,"file":"layout-watcher.cjs","names":["MC","_interopRequireWildcard","require","MH","_settings","_cssAlter","_layout","_log","_misc","_overlays","_text","_callback","_xMap","_sizeWatcher","_debug","_interopRequireDefault","e","__esModule","_getRequireWildcardCache","WeakMap","r","t","_typeof","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","o","Symbol","iterator","constructor","prototype","_createForOfIteratorHelper","Array","isArray","_unsupportedIterableToArray","length","_n","F","s","done","value","f","TypeError","next","_arrayLikeToArray","toString","slice","name","from","test","_regeneratorRuntime","c","asyncIterator","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","h","l","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","resolve","__await","then","callInvokeWithMethodAndArg","Error","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","resultName","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","displayName","isGeneratorFunction","mark","setPrototypeOf","awrap","async","Promise","keys","reverse","pop","prev","charAt","stop","rval","handle","complete","finish","_catch","delegateYield","asyncGeneratorStep","_asyncToGenerator","arguments","apply","_next","_throw","_classCallCheck","_defineProperties","_toPropertyKey","key","_createClass","_defineProperty","_toPrimitive","toPrimitive","String","Number","LayoutWatcher","exports","config","CONSTRUCTOR_KEY","illegalConstructorError","logger","debug","Logger","logAtCreation","nonIntersectingBitmask","currentLayoutData","device","aspectRatio","allCallbacks","newMap","fetchCurrentLayout","_ref","_callee","_callee$","_context","readyPromise","copyObject","setupOverlays","_ref2","_callee2","_yield$createOverlays","root","overlays","_callee2$","_context2","createOverlays","_root","_deviceBreakpoints","_aspectRatioBreakpoints","newPromise","isReady","intersectionHandler","entries","numEntries","lengthOf","debug9","concat","NUM_LAYOUTS","logWarn","bugError","_iterator","_step","entry","getNonIntersecting","err","processLayoutChange","observeOptions","rootMargin","observer","newIntersectionObserver","_iterator2","_step2","triggerOverlay","observe","createCallback","handler","layoutBitmask","_allCallbacks$get","remove","debug5","callback","wrapCallback","onRemove","deleteHandler","_layoutBitmask","setupOnLayout","_ref3","_callee3","options","layoutData","_callee3$","_context3","getLayoutBitmask","skipInitial","isRemoved","changeMatches","invokeCallback","_x","_x2","deleteKey","skipCallbacks","deviceBit","floor","log2","ORDERED_DEVICES","bitmask","aspectRatioBit","ORDERED_ASPECTR","INFINITY","nameOf","debug8","_iterator3","_step3","onLayout","offLayout","_allCallbacks$get2","undefined","getConfig","reuse","_instances$get","myConfig","configStrKey","objToStrKey","omitKeys","instance","instances","sGet","SYMBOL","newXMap","VAR_BORDER_HEIGHT","prefixCssJsVar","PREFIX_DEVICE","prefixName","PREFIX_ASPECTR","deviceBreakpoints","settings","copyExistingKeys","aspectRatioBreakpoints","_ref4","_callee4","overlayPromises","overlayParent","parentHeightCss","_callee4$","_context4","createOverlay","style","position","S_WIDTH","parent","data","SizeWatcher","trackSize","target","promiseAll","_x3","_x4","_x5","getOverlayLayout","overlay","layout","getData","logError","thisLayoutData","prevLayoutData","bit","targetOf","isHTMLElement","typeOrClassOf","isIntersecting"],"sources":["../../../src/ts/watchers/layout-watcher.ts"],"sourcesContent":["/**\n * @module Watchers/LayoutWatcher\n */\n\n// NOTES FOR DEVELOPERS\n//\n// For each layout (device or aspect ratio), we create an overlay that has a\n// a width that corresponds to the layout:\n//  - for device layouts, it's a fixed width in pixels, equal to the minimum\n//    width of the device\n//  - for aspect ratio layouts, the overlay has a width that's relative to\n//    the root's height, equal to the minimum width of the aspect ratio\n//\n// Then we observe each overlay with an IntersectionObserver whose root\n// is this Watcher's root and whose root margin is -100% from the left (i.e.\n// right-most edge of the root).\n//\n// If the root is null, i.e. the viewport, the overlays will have a \"fixed\"\n// position and be inserted in document.body. Otherwise, they'll be inserted\n// in the root element with an \"absolute\" position. The root element, if not\n// body must be positioned. It gets a default position of \"relative\" through\n// the class `.lisn-overlay-container`, which Overlays ensures it gets.\n//\n// If using custom root we track its size through SizeWatcher as the\n// aspectRatio overlays are relative to the height, and we can't rely on CSS\n// alone as the root may not have a fixed height through CSS.\n//\n// Whenever any overlay intersects the root, this means that the viewport\n// width is now equal to or narrower than the overlay.\n//\n// ~~~~ The current device or aspect ratio corresponds to the _widest_\n// ~~~~ overlay that does not intersect.\n//\n// For example:\n//\n// | mobile\n// ========| mobile-wide\n// ======================| tablet\n// =========================================| desktop\n//\n// _________________________________| viewport width\n//\n// Here, mobile, mobile-wide and tablet overlays are _not_ intersecting, only\n// desktop intersects. The device layout is therefore tablet.\n//\n// Therefore:\n// - have the layout bit spaces ordered from narrowest layout at lowest bit\n//   to widest layout at hightest bit\n// - keep a running bitmask of which overlays are not intersecting and update\n//   it each time there is an IntersectionObserverEntry.\n// - get the highest device or aspect ratio bit in that bitmask to find out\n//   the widest non-intersecting overlay\n//\n// For simplicity we create overlays also for layouts that have a 0-width.\n\nimport * as MC from \"@lisn/globals/minification-constants\";\nimport * as MH from \"@lisn/globals/minification-helpers\";\n\nimport { settings } from \"@lisn/globals/settings\";\n\nimport {\n  Layout,\n  DeviceSpec,\n  Device,\n  AspectRatioSpec,\n  AspectRatio,\n} from \"@lisn/globals/types\";\n\nimport { getData } from \"@lisn/utils/css-alter\";\nimport {\n  getLayoutBitmask,\n  NUM_LAYOUTS,\n  ORDERED_DEVICES,\n  ORDERED_ASPECTR,\n} from \"@lisn/utils/layout\";\nimport { logError, logWarn } from \"@lisn/utils/log\";\nimport { omitKeys, copyExistingKeys } from \"@lisn/utils/misc\";\nimport { createOverlay } from \"@lisn/utils/overlays\";\nimport { objToStrKey } from \"@lisn/utils/text\";\n\nimport {\n  CallbackHandler,\n  Callback,\n  wrapCallback,\n} from \"@lisn/modules/callback\";\nimport { newXMap } from \"@lisn/modules/x-map\";\n\nimport { SizeWatcher } from \"@lisn/watchers/size-watcher\";\n\nimport debug from \"@lisn/debug/debug\";\n\n/**\n * {@link LayoutWatcher} listens for changes in either the width or aspect\n * ratio of the viewport or the given {@link LayoutWatcherConfig.root | root}.\n *\n * It does not track resize events; rather it's built on top of\n * {@link https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver | IntersectionObserver}.\n *\n * It manages registered callbacks globally and reuses IntersectionObservers\n * for more efficient performance.\n */\nexport class LayoutWatcher {\n  /**\n   * Call the given handler whenever the layout changes.\n   *\n   * Unless {@link OnLayoutOptions.skipInitial} is true, the handler is also\n   * called (almost) immediately with the current layout.\n   *\n   * **IMPORTANT:** The same handler can _not_ be added multiple times, even if\n   * the options differ. If the handler has already been added, it is removed\n   * and re-added with the current options.\n   *\n   * @throws {@link Errors.LisnUsageError | LisnUsageError}\n   *                If the options are invalid.\n   */\n  readonly onLayout: (\n    handler: OnLayoutHandler,\n    options?: OnLayoutOptions,\n  ) => Promise<void>;\n\n  /**\n   * Removes a previously added handler.\n   */\n  readonly offLayout: (handler: OnLayoutHandler) => void;\n\n  /**\n   * Get the current screen layout.\n   */\n  readonly fetchCurrentLayout: () => Promise<LayoutData>;\n\n  /**\n   * Creates a new instance of LayoutWatcher with the given\n   * {@link LayoutWatcherConfig}. It does not save it for future reuse.\n   */\n  static create(config: LayoutWatcherConfig = {}) {\n    return new LayoutWatcher(getConfig(config), CONSTRUCTOR_KEY);\n  }\n\n  /**\n   * Returns an existing instance of LayoutWatcher with the given\n   * {@link LayoutWatcherConfig}, or creates a new one.\n   *\n   * **NOTE:** It saves it for future reuse, so don't use this for temporary\n   * short-lived watchers.\n   */\n  static reuse(config: LayoutWatcherConfig = {}) {\n    const myConfig = getConfig(config);\n    const configStrKey = objToStrKey(omitKeys(myConfig, { _root: null }));\n\n    let instance = instances.get(myConfig._root)?.get(configStrKey);\n    if (!instance) {\n      instance = new LayoutWatcher(myConfig, CONSTRUCTOR_KEY);\n      instances.sGet(myConfig._root).set(configStrKey, instance);\n    }\n\n    return instance;\n  }\n\n  private constructor(\n    config: LayoutWatcherConfigInternal,\n    key: typeof CONSTRUCTOR_KEY,\n  ) {\n    if (key !== CONSTRUCTOR_KEY) {\n      throw MH.illegalConstructorError(\"LayoutWatcher.create\");\n    }\n\n    const logger = debug\n      ? new debug.Logger({ name: \"LayoutWatcher\", logAtCreation: config })\n      : null;\n    let nonIntersectingBitmask = 0;\n    let currentLayoutData: LayoutData = {\n      device: null,\n      aspectRatio: null,\n    };\n\n    const allCallbacks = MH.newMap<\n      OnLayoutHandler,\n      {\n        _callback: OnLayoutCallback;\n        _layoutBitmask: number;\n      }\n    >();\n\n    // ----------\n\n    const fetchCurrentLayout = async (): Promise<LayoutData> => {\n      await readyPromise;\n\n      return MH.copyObject(currentLayoutData);\n    };\n\n    // ----------\n\n    const setupOverlays = async () => {\n      const { root, overlays } = await createOverlays(\n        config._root,\n        config._deviceBreakpoints,\n        config._aspectRatioBreakpoints,\n      );\n\n      return MH.newPromise<void>((resolve) => {\n        let isReady = false;\n\n        const intersectionHandler = (entries: IntersectionObserverEntry[]) => {\n          const numEntries = MH.lengthOf(entries);\n          debug: logger?.debug9(`Got ${numEntries} new entries`, entries);\n\n          if (!isReady) {\n            /* istanbul ignore next */ // shouldn't happen\n            if (numEntries < NUM_LAYOUTS) {\n              logWarn(\n                MH.bugError(\n                  `Got IntersectionObserver ${numEntries}, ` +\n                    `expected >= ${NUM_LAYOUTS}`,\n                ),\n              );\n            }\n          }\n\n          for (const entry of entries) {\n            nonIntersectingBitmask = getNonIntersecting(\n              nonIntersectingBitmask,\n              entry,\n            );\n          }\n\n          // If this is the initial call from IntersectionObserver, skip callbacks.\n          // Those that have skipInitial: false would be called elsewhere, by\n          // setupOnLayout\n          processLayoutChange(!isReady);\n          isReady = true;\n          resolve(); // ready after IntersectionObserver has called us the 1st time\n        };\n\n        // ----------\n\n        const observeOptions = {\n          root,\n          rootMargin: \"5px 0% 5px -100%\",\n        };\n\n        const observer = MH.newIntersectionObserver(\n          intersectionHandler,\n          observeOptions,\n        );\n\n        for (const triggerOverlay of overlays) {\n          observer.observe(triggerOverlay);\n        }\n      });\n    };\n\n    // ----------\n\n    const createCallback = (\n      handler: OnLayoutHandler,\n      layoutBitmask: number,\n    ): OnLayoutCallback => {\n      MH.remove(allCallbacks.get(handler)?._callback);\n\n      debug: logger?.debug5(\"Adding/updating handler\", layoutBitmask);\n      const callback = wrapCallback(handler);\n      callback.onRemove(() => {\n        deleteHandler(handler);\n      });\n\n      allCallbacks.set(handler, {\n        _callback: callback,\n        _layoutBitmask: layoutBitmask,\n      });\n      return callback;\n    };\n\n    const setupOnLayout = async (\n      handler: OnLayoutHandler,\n      options: OnLayoutOptions | undefined,\n    ) => {\n      const layoutBitmask = getLayoutBitmask(options);\n      const callback = createCallback(handler, layoutBitmask);\n\n      if (options?.skipInitial) {\n        return;\n      }\n\n      const layoutData = await fetchCurrentLayout();\n\n      if (\n        !callback.isRemoved() &&\n        changeMatches(layoutBitmask, layoutData, null)\n      ) {\n        debug: logger?.debug5(\"Calling initially with\", layoutData);\n        await invokeCallback(callback, layoutData);\n      }\n    };\n\n    const deleteHandler = (handler: OnLayoutHandler) => {\n      MH.deleteKey(allCallbacks, handler);\n      // no need to unobserve the overlays\n    };\n\n    const processLayoutChange = (skipCallbacks: boolean) => {\n      const deviceBit = MH.floor(\n        MH.log2(nonIntersectingBitmask & ORDERED_DEVICES.bitmask),\n      );\n\n      const aspectRatioBit = MH.floor(\n        MH.log2(nonIntersectingBitmask & ORDERED_ASPECTR.bitmask),\n      );\n\n      const layoutData: LayoutData = { device: null, aspectRatio: null };\n\n      // -Infinity means all of the overlays are intersecting, which would only\n      // happen if the narrowest overlay is not actually 0-width (which is not the\n      // case by default and against the recommended settings).\n      if (deviceBit !== -MC.INFINITY) {\n        layoutData.device = ORDERED_DEVICES.nameOf(1 << deviceBit);\n      }\n      if (aspectRatioBit !== -MC.INFINITY) {\n        layoutData.aspectRatio = ORDERED_ASPECTR.nameOf(1 << aspectRatioBit);\n      }\n\n      debug: logger?.debug8(\"New layout\", layoutData);\n\n      if (!skipCallbacks) {\n        for (const entry of allCallbacks.values()) {\n          const layoutBitmask = entry._layoutBitmask;\n          if (!changeMatches(layoutBitmask, layoutData, currentLayoutData)) {\n            debug: logger?.debug9(\n              `Layout change does not match bitmask ${layoutBitmask}`,\n            );\n            continue;\n          }\n\n          invokeCallback(entry._callback, layoutData);\n        }\n      }\n\n      currentLayoutData = layoutData;\n    };\n\n    const readyPromise = setupOverlays(); // no need to await\n\n    // ----------\n\n    this.fetchCurrentLayout = fetchCurrentLayout;\n\n    // ----------\n\n    this.onLayout = setupOnLayout;\n\n    // ----------\n\n    this.offLayout = (handler) => {\n      debug: logger?.debug5(\"Removing handler\");\n      MH.remove(allCallbacks.get(handler)?._callback);\n    };\n  }\n}\n\n/**\n * @interface\n */\nexport type LayoutWatcherConfig = {\n  /**\n   * The root element whose layout to watch. If not given or `null`, then the\n   * viewport layout is watched.\n   *\n   * @defaultValue null\n   */\n  root?: HTMLElement | null;\n\n  /**\n   * Use custom device breakpoints. Only known device names ({@link Device})\n   * are supported. If any are missing from the given dictionary, the value\n   * from {@link settings.deviceBreakpoints} is used.\n   *\n   * @defaultValue {@link settings.deviceBreakpoints}\n   */\n  deviceBreakpoints?: typeof settings.deviceBreakpoints;\n\n  /**\n   * Use custom aspect ratio breakpoints. Only known aspect ratio names\n   * ({@link AspectRatio}) are supported. If any are missing from the given\n   * dictionary, the value from {@link settings.aspectRatioBreakpoints} is\n   * used.\n   *\n   * @defaultValue {@link settings.aspectRatioBreakpoints}\n   */\n  aspectRatioBreakpoints?: typeof settings.aspectRatioBreakpoints;\n};\n\n/**\n * @interface\n */\nexport type OnLayoutOptions = {\n  /**\n   * Specifies a list of {@link Device}s to target for.\n   *\n   * The handler will only be called if there is a change of device to a device\n   * matching the specification.\n   *\n   * It can be:\n   * - \"min <Device>\": devices at least as wide as `<Device>`\n   * - \"max <Device>\": devices at most as wide as `<Device>`\n   * - \"<DeviceMin> to <DeviceMax>\": devices at least as wide as `<DeviceMin>`\n   *                                 and at most as wide as `<DeviceMax>`\n   * - a comma-separated list of device names\n   * - an array of device names\n   *\n   * **NOTE**\n   *\n   * If only one of {@link devices} or {@link aspectRatios} is specified, the\n   * handler will only be called for matching changes of device or aspect ratio\n   * respectively.\n   *\n   * If neither is specified, the handler will be called for any change of layout\n   * (device or aspect ratio).\n   *\n   * Also note that an empty array is treated the same as not given, or `null`.\n   *\n   * @defaultValue undefined\n   */\n  devices?: DeviceSpec | Device[];\n\n  /**\n   * Specifies a list of {@link AspectRatio}s to target for.\n   *\n   * The handler will only be called if there is a change of aspect ratio to\n   * an aspect ratios matching the specification.\n   *\n   * It can be:\n   * - \"min <AspectRatio>\": aspect ratios at least as wide as `<AspectRatio>`\n   * - \"max <AspectRatio>\": aspect ratios at most as wide as `<AspectRatio>`\n   * - \"<AspectRatioMin> to <AspectRatioMax>\": aspect ratios at least as wide\n   *                        as `<AspectRatioMin>` and at most as wide as\n   *                        `<AspectRatioMax>`\n   * - a comma-separated list of aspect ratio names\n   * - an array of aspect ratio names\n   *\n   * **NOTE**\n   *\n   * If only one of {@link devices} or {@link aspectRatios} is specified, the\n   * handler will only be called for matching changes of device or aspect ratio\n   * respectively.\n   *\n   * If neither is specified, the handler will be called for any change of layout\n   * (device or aspect ratio).\n   *\n   * @defaultValue undefined\n   */\n  aspectRatios?: AspectRatioSpec | AspectRatio[];\n\n  /**\n   * Do not call the handler until there's a future change of layout.\n   *\n   * By default, we call the handler (almost) immediately with the current\n   * layout data if it matches the given {@link devices} and {@link aspectRatios}.\n   *\n   * @defaultValue false\n   */\n  skipInitial?: boolean;\n};\n\n/**\n * The handler is invoked with one argument:\n *\n * - the current {@link LayoutData}\n */\nexport type OnLayoutHandlerArgs = [LayoutData];\nexport type OnLayoutCallback = Callback<OnLayoutHandlerArgs>;\nexport type OnLayoutHandler =\n  | CallbackHandler<OnLayoutHandlerArgs>\n  | OnLayoutCallback;\n\n/**\n * Note that {@link device} or {@link aspectRatio} would only be null if the\n * viewport is narrower than the narrowest device/aspect ratio. This would only\n * happen if the narrowest device/aspect ratio is _not_ 0-width (which is not\n * the case with the default breakpoints and is against the recommendation for\n * setting breakpoints.\n */\nexport type LayoutData = {\n  device: Device | null;\n  aspectRatio: AspectRatio | null;\n};\n\n// ----------------------------------------\n\ntype LayoutWatcherConfigInternal = {\n  _root: HTMLElement | null;\n  _deviceBreakpoints: typeof settings.deviceBreakpoints;\n  _aspectRatioBreakpoints: typeof settings.aspectRatioBreakpoints;\n};\n\nconst CONSTRUCTOR_KEY: unique symbol = MC.SYMBOL() as typeof CONSTRUCTOR_KEY;\nconst instances = newXMap<HTMLElement | null, Map<string, LayoutWatcher>>(() =>\n  MH.newMap(),\n);\n\nconst VAR_BORDER_HEIGHT = MH.prefixCssJsVar(\"border-height\");\nconst PREFIX_DEVICE = MH.prefixName(\"device\");\nconst PREFIX_ASPECTR = MH.prefixName(\"aspect-ratio\");\n\nconst getConfig = (\n  config: LayoutWatcherConfig | undefined,\n): LayoutWatcherConfigInternal => {\n  const deviceBreakpoints = MH.copyObject(settings.deviceBreakpoints);\n  if (config?.deviceBreakpoints) {\n    copyExistingKeys(config.deviceBreakpoints, deviceBreakpoints);\n  }\n\n  const aspectRatioBreakpoints = MH.copyObject(settings.aspectRatioBreakpoints);\n\n  if (config?.aspectRatioBreakpoints) {\n    copyExistingKeys(config.aspectRatioBreakpoints, aspectRatioBreakpoints);\n  }\n\n  return {\n    _root: config?.root || null,\n    _deviceBreakpoints: deviceBreakpoints,\n    _aspectRatioBreakpoints: aspectRatioBreakpoints,\n  };\n};\n\n// ----------------------------------------\n\nconst createOverlays = async (\n  root: HTMLElement | null,\n  deviceBreakpoints: typeof settings.deviceBreakpoints,\n  aspectRatioBreakpoints: typeof settings.aspectRatioBreakpoints,\n) => {\n  const overlayPromises = [];\n\n  let overlayParent: HTMLElement;\n  if (root) {\n    overlayParent = root;\n  } else {\n    // Since modals remove the scrollbar on the body when active, the width of\n    // the body changes upon open/close of a modal, which would create\n    // glitching if it happens near a device breakpoint. So if the root is the\n    // viewport, we create a fixed positioned container to hold the overlays\n    // and set its width to be 100vw and use that as the root of\n    overlayParent = await createOverlay({\n      style: {\n        position: \"fixed\",\n        [MC.S_WIDTH]: \"100vw\",\n      },\n    });\n  }\n\n  let device: Device;\n  for (device in deviceBreakpoints) {\n    overlayPromises.push(\n      createOverlay({\n        parent: overlayParent,\n        style: {\n          position: \"absolute\",\n          [MC.S_WIDTH]: deviceBreakpoints[device] + \"px\",\n        },\n        data: {\n          [PREFIX_DEVICE]: device,\n        },\n      }),\n    );\n  }\n\n  const parentHeightCss = root ? `var(${VAR_BORDER_HEIGHT}, 0) * 1px` : \"100vh\";\n  if (root) {\n    SizeWatcher.reuse().trackSize(null, { target: root });\n  }\n\n  let aspectRatio: AspectRatio;\n  for (aspectRatio in aspectRatioBreakpoints) {\n    overlayPromises.push(\n      createOverlay({\n        parent: overlayParent,\n        style: {\n          position: \"absolute\",\n          [MC.S_WIDTH]:\n            `calc(${aspectRatioBreakpoints[aspectRatio]} ` +\n            `* ${parentHeightCss})`,\n        },\n        data: {\n          [PREFIX_ASPECTR]: aspectRatio,\n        },\n      }),\n    );\n  }\n\n  const overlays = await MH.promiseAll(overlayPromises);\n  return { root: overlayParent, overlays };\n};\n\nconst getOverlayLayout = (overlay: HTMLElement): Layout | null => {\n  const layout =\n    getData(overlay, PREFIX_DEVICE) || getData(overlay, PREFIX_ASPECTR);\n  /* istanbul ignore else */\n  if (layout && (ORDERED_DEVICES.has(layout) || ORDERED_ASPECTR.has(layout))) {\n    return layout;\n  } else {\n    // shouldn't happen\n    logError(MH.bugError(\"No device or aspectRatio data attribute\"));\n    return null;\n  }\n};\n\nconst changeMatches = (\n  layoutBitmask: number,\n  thisLayoutData: LayoutData,\n  prevLayoutData: LayoutData | undefined | null,\n): boolean => {\n  // True if the callback is interested in a change of device and there's a\n  // change of device and the new device is one of the ones it's interested in\n  // (or it's null, i.e. device is undefined).\n  // And the same for aspect ratios.\n\n  if (\n    prevLayoutData?.device !== thisLayoutData.device &&\n    (!thisLayoutData.device ||\n      ORDERED_DEVICES.bit[thisLayoutData.device] & layoutBitmask)\n  ) {\n    return true;\n  }\n\n  if (\n    prevLayoutData?.aspectRatio !== thisLayoutData.aspectRatio &&\n    (!thisLayoutData.aspectRatio ||\n      ORDERED_ASPECTR.bit[thisLayoutData.aspectRatio] & layoutBitmask)\n  ) {\n    return true;\n  }\n\n  return false;\n};\n\nconst getNonIntersecting = (\n  nonIntersectingBitmask: number, // current\n  entry: IntersectionObserverEntry,\n): number => {\n  const target = MH.targetOf(entry);\n  /* istanbul ignore next */ // shouldn't happen\n  if (!MH.isHTMLElement(target)) {\n    logError(\n      MH.bugError(\n        `IntersectionObserver called us with '${MH.typeOrClassOf(target)}'`,\n      ),\n    );\n    return nonIntersectingBitmask;\n  }\n\n  const layout = getOverlayLayout(target);\n  let bit = 0;\n  if (!layout) {\n    // error already logged by getOverlayLayout\n  } else if (ORDERED_DEVICES.has(layout)) {\n    bit = ORDERED_DEVICES.bit[layout];\n  } else if (ORDERED_ASPECTR.has(layout)) {\n    bit = ORDERED_ASPECTR.bit[layout];\n  } else {\n    /* istanbul ignore next */ // shouldn't happen\n    logError(\n      MH.bugError(`Unknown device or aspectRatio data attribute: ${layout}`),\n    );\n  }\n\n  if (entry.isIntersecting) {\n    nonIntersectingBitmask &= ~bit;\n  } else {\n    nonIntersectingBitmask |= bit;\n  }\n\n  return nonIntersectingBitmask;\n};\n\nconst invokeCallback = (callback: OnLayoutCallback, layoutData: LayoutData) =>\n  callback.invoke(MH.copyObject(layoutData)).catch(logError);\n"],"mappings":"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","ignoreList":[]}