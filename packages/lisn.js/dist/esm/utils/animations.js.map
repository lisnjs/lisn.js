{"version":3,"file":"animations.js","names":["MC","MH","addClassesNow","removeClassesNow","getData","waitForMeasureTime","waitForMutateTime","criticallyDamped","waitForAnimationFrame","newPromise","resolve","onAnimationFrame","onEveryAnimationFrame","callback","elapsed","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_asyncIterator","newAnimationFrameIterator","_step","next","done","value","shouldRepeat","err","return","_x","_newAnimationFrameIterator","apply","arguments","_wrapAsyncGenerator","startTime","previousTimeStamp","total","totalSeed","sinceLast","sinceLastSeed","step","timeStamp","totalElapsed","elapsedSinceLast","newCriticallyDampedAnimationIterator","_x2","_newCriticallyDampedAnimationIterator","settings","l","lTarget","lag","precision","v","t","dt","_iteratorAbruptCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","_awaitAsyncGenerator","_next","iterateAnimations","element","webAnimationCallback","legacyCallback","realtime","prefixName","animation","getAnimations","resetCssAnimationsNow","PREFIX_ANIMATE_DISABLE","S_CLIENT_WIDTH"],"sources":["../../../src/ts/utils/animations.ts"],"sourcesContent":["/**\n * @module Utils\n */\n\nimport * as MC from \"@lisn/globals/minification-constants\";\nimport * as MH from \"@lisn/globals/minification-helpers\";\n\nimport {\n  addClassesNow,\n  removeClassesNow,\n  getData,\n} from \"@lisn/utils/css-alter\";\nimport {\n  waitForMeasureTime,\n  waitForMutateTime,\n} from \"@lisn/utils/dom-optimize\";\nimport { criticallyDamped } from \"@lisn/utils/math\";\n\n/**\n * @since v1.2.0\n *\n * @category Animations\n */\nexport type ElapsedTimes = {\n  total: number;\n  sinceLast: number;\n};\n\n/**\n * The callback is as an argument the {@link ElapsedTimes | elapsed times}:\n * - The total elapsed time in milliseconds since the start\n * - The elapsed time in milliseconds since the previous frame\n *\n * The first time this callback is called both of these will be 0 unless seed\n * values were provided.\n *\n * The callback must return `true` if it wants to animate again on the next\n * frame and `false` if done.\n *\n * @since v1.2.0\n *\n * @category Animations\n */\nexport type AnimationCallback = (elapsed: ElapsedTimes) => boolean;\n\n/**\n * Returns a promise that resolves at the next animation frame. Async/await\n * version of\n * {@link https://developer.mozilla.org/en-US/docs/Web/API/Window/requestAnimationFrame | requestAnimationFrame}.\n *\n * @returns The timestamp gotten from `requestAnimationFrame`\n *\n * @category Animations\n */\nexport const waitForAnimationFrame = async () =>\n  MH.newPromise<number>((resolve) => {\n    MH.onAnimationFrame(resolve);\n  });\n\n/**\n * Calls the given callback on every animation frame.\n *\n * The returned Promise resolves when the callback is done (returns `false`).\n *\n * @param callback  See {@link AnimationCallback}.\n * @param elapsed   Seed values to use as the total elapsed and elapsed since\n *                  last. Otherwise it will use the timestamp of the first frame\n *                  as the start, which will result in those values being 0 the\n *                  first time.\n *\n * @since v1.2.0\n *\n * @category Animations\n */\nexport const onEveryAnimationFrame = async (\n  callback: AnimationCallback,\n  elapsed?: ElapsedTimes,\n) => {\n  for await (elapsed of newAnimationFrameIterator(elapsed)) {\n    const shouldRepeat = callback(elapsed);\n    if (!shouldRepeat) {\n      break;\n    }\n  }\n};\n\n/**\n * Generator version of {@link onEveryAnimationFrame}.\n *\n * Returns a new async iterator which yields the total elapsed time and elapsed\n * time since the last call on every animation frame.\n *\n * @example\n * ```javascript\n * for await (const elapsed of newAnimationFrameIterator()) {\n *   // ... do something\n *   if (done) break;\n * }\n * ```\n *\n * @since v1.2.0\n *\n * @category Animations\n */\nexport async function* newAnimationFrameIterator(\n  elapsed?: ElapsedTimes,\n): AsyncGenerator<ElapsedTimes, never> {\n  let startTime: number, previousTimeStamp: number;\n  const { total: totalSeed = 0, sinceLast: sinceLastSeed = 0 } = elapsed ?? {};\n\n  const step = async () => {\n    const timeStamp = await waitForAnimationFrame();\n    if (!startTime || !previousTimeStamp) {\n      // First time\n      startTime = timeStamp - totalSeed;\n      previousTimeStamp = timeStamp - sinceLastSeed;\n    }\n\n    const totalElapsed = timeStamp - startTime;\n    const elapsedSinceLast = timeStamp - previousTimeStamp;\n    previousTimeStamp = timeStamp;\n\n    return { total: totalElapsed, sinceLast: elapsedSinceLast };\n  };\n\n  while (true) {\n    yield step();\n  }\n}\n\n/**\n * Returns an animation iterator based on {@link criticallyDamped} that starts\n * at the given position `l`, with velocity `v = 0` and time `t = 0` and yields\n * the new position and velocity, and total time at every animation frame.\n *\n * @param [settings.lTarget]   The initial target position. Can be updated when\n *                             calling next().\n * @param [settings.lag]       See {@link criticallyDamped}.\n * @param [settings.l = 0]     The initial starting position.\n * @param [settings.precision] See {@link criticallyDamped}.\n *\n * @returns An iterator whose `next` method accepts an optional new `lTarget`.\n * The iterator yields an object containing successive values for:\n * - position (`l`)\n * - velocity (`v`)\n * - total time elapsed (`t`)\n *\n * @example\n * If you never need to update the target you can use a for await loop:\n *\n * ```javascript\n * const iterator = newCriticallyDampedAnimationIterator({\n *   l: 10,\n *   lTarget: 100,\n *   lag: 1500\n * });\n *\n * for await (const { l, v, t } of iterator) {\n *   console.log({ l, v, t });\n * }\n * ```\n *\n * @example\n * If you do need to update the target, then call `next` explicitly:\n *\n * ```javascript\n * const iterator = newCriticallyDampedAnimationIterator({\n *   l: 10,\n *   lTarget: 100,\n *   lag: 1500\n * });\n *\n * let { value: { l, v, t } } = await iterator.next();\n * ({ value: { l, v, t } } = await iterator.next()); // updated\n * ({ value: { l, v, t } } = await iterator.next(200)); // updated towards a new target\n * ```\n *\n * @since v1.2.0\n *\n * @category Animations\n */\nexport async function* newCriticallyDampedAnimationIterator(settings: {\n  lTarget: number;\n  lag: number;\n  l?: number;\n  precision?: number;\n}): AsyncGenerator<{ l: number; v: number; t: number }, never> {\n  let { l, lTarget } = settings;\n  const { lag, precision } = settings;\n  let v = 0,\n    t = 0,\n    dt = 0;\n\n  const next = async () => {\n    ({ l, v } = criticallyDamped({\n      lTarget,\n      dt,\n      lag,\n      l,\n      v,\n      precision,\n    }));\n    return { l, v, t };\n  };\n\n  for await ({ total: t, sinceLast: dt } of newAnimationFrameIterator()) {\n    if (dt === 0) {\n      continue;\n    }\n\n    lTarget = yield next() ?? lTarget;\n  }\n\n  throw null; // tell TypeScript it will never end\n}\n\n/**\n * @param webAnimationCallback This function is called for each\n *                             {@link https://developer.mozilla.org/en-US/docs/Web/API/Animation | Animation}\n *                             on the element. It {@link waitForMeasureTime}\n *                             before reading the animations.\n * @param legacyCallback       This function is called if the browser does not\n *                             support the Web Animations API. It is called\n *                             after {@link waitForMutateTime} so it can safely\n *                             modify styles.\n * @param realtime             If true, then it does not\n *                             {@link waitForMeasureTime} or\n *                             {@link waitForMutateTime} and runs\n *                             synchronously.\n *\n * @category Animations\n */\nexport const iterateAnimations = async (\n  element: Element,\n  webAnimationCallback: (animation: Animation) => void,\n  legacyCallback: (element: Element) => void,\n  realtime = false,\n) => {\n  /* istanbul ignore next */ // jsdom doesn't support Web Animations\n  if (\n    \"getAnimations\" in element &&\n    getData(element, MH.prefixName(\"test-legacy\")) === null\n  ) {\n    if (!realtime) {\n      await waitForMeasureTime();\n    }\n\n    for (const animation of element.getAnimations()) {\n      webAnimationCallback(animation);\n    }\n\n    // Old browsers, no Animation API\n  } else {\n    if (!realtime) {\n      await waitForMutateTime();\n    }\n\n    legacyCallback(element);\n  }\n};\n\n/**\n * @ignore\n * @internal\n */\nexport const resetCssAnimationsNow = (element: Element) => {\n  addClassesNow(element, MC.PREFIX_ANIMATE_DISABLE); // cause it to reset\n  // If we remove the disable class immediately, then it will not have the\n  // effect to reset the animation, since the browser won't see any change in\n  // the classList at the start of the frame. So we ideally need to remove the\n  // disable class after the next paint. However, depending on the animation,\n  // and its state, disabling animation and waiting for the next animation\n  // frame may cause a visible glitch, so we need to force layout now.\n  /* eslint-disable-next-line @typescript-eslint/no-unused-expressions */\n  element[MC.S_CLIENT_WIDTH]; // forces layout\n\n  removeClassesNow(element, MC.PREFIX_ANIMATE_DISABLE);\n};\n"],"mappings":";;;;;;;AAAA;AACA;AACA;;AAEA,OAAO,KAAKA,EAAE;AACd,OAAO,KAAKC,EAAE;AAEd,SACEC,aAAa,EACbC,gBAAgB,EAChBC,OAAO;AAET,SACEC,kBAAkB,EAClBC,iBAAiB;AAEnB,SAASC,gBAAgB;;AAEzB;AACA;AACA;AACA;AACA;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,qBAAqB,GAAG,MAAAA,CAAA,KACnCP,EAAE,CAACQ,UAAU,CAAUC,OAAO,IAAK;EACjCT,EAAE,CAACU,gBAAgB,CAACD,OAAO,CAAC;AAC9B,CAAC,CAAC;;AAEJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAME,qBAAqB,GAAG,MAAAA,CACnCC,QAA2B,EAC3BC,OAAsB,KACnB;EAAA,IAAAC,yBAAA;EAAA,IAAAC,iBAAA;EAAA,IAAAC,cAAA;EAAA;IACH,SAAAC,SAAA,GAAAC,cAAA,CAAsBC,yBAAyB,CAACN,OAAO,CAAC,GAAAO,KAAA,EAAAN,yBAAA,KAAAM,KAAA,SAAAH,SAAA,CAAAI,IAAA,IAAAC,IAAA,EAAAR,yBAAA,UAAE;MAA/CD,OAAO,GAAAO,KAAA,CAAAG,KAAA;MAAA;QAChB,MAAMC,YAAY,GAAGZ,QAAQ,CAACC,OAAO,CAAC;QACtC,IAAI,CAACW,YAAY,EAAE;UACjB;QACF;MAAC;IACH;EAAC,SAAAC,GAAA;IAAAV,iBAAA;IAAAC,cAAA,GAAAS,GAAA;EAAA;IAAA;MAAA,IAAAX,yBAAA,IAAAG,SAAA,CAAAS,MAAA;QAAA,MAAAT,SAAA,CAAAS,MAAA;MAAA;IAAA;MAAA,IAAAX,iBAAA;QAAA,MAAAC,cAAA;MAAA;IAAA;EAAA;AACH,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAuBG,yBAAyBA,CAAAQ,EAAA;EAAA,OAAAC,0BAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;;AA0BhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlDA,SAAAF,2BAAA;EAAAA,0BAAA,GAAAG,mBAAA,CA1BO,WACLlB,OAAsB,EACe;IACrC,IAAImB,SAAiB,EAAEC,iBAAyB;IAChD,MAAM;MAAEC,KAAK,EAAEC,SAAS,GAAG,CAAC;MAAEC,SAAS,EAAEC,aAAa,GAAG;IAAE,CAAC,GAAGxB,OAAO,aAAPA,OAAO,cAAPA,OAAO,GAAI,CAAC,CAAC;IAE5E,MAAMyB,IAAI,GAAG,MAAAA,CAAA,KAAY;MACvB,MAAMC,SAAS,GAAG,MAAMhC,qBAAqB,CAAC,CAAC;MAC/C,IAAI,CAACyB,SAAS,IAAI,CAACC,iBAAiB,EAAE;QACpC;QACAD,SAAS,GAAGO,SAAS,GAAGJ,SAAS;QACjCF,iBAAiB,GAAGM,SAAS,GAAGF,aAAa;MAC/C;MAEA,MAAMG,YAAY,GAAGD,SAAS,GAAGP,SAAS;MAC1C,MAAMS,gBAAgB,GAAGF,SAAS,GAAGN,iBAAiB;MACtDA,iBAAiB,GAAGM,SAAS;MAE7B,OAAO;QAAEL,KAAK,EAAEM,YAAY;QAAEJ,SAAS,EAAEK;MAAiB,CAAC;IAC7D,CAAC;IAED,OAAO,IAAI,EAAE;MACX,MAAMH,IAAI,CAAC,CAAC;IACd;EACF,CAAC;EAAA,OAAAV,0BAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAqDD,gBAAuBY,oCAAoCA,CAAAC,GAAA;EAAA,OAAAC,qCAAA,CAAAf,KAAA,OAAAC,SAAA;AAAA;;AAmC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA,SAAAc,sCAAA;EAAAA,qCAAA,GAAAb,mBAAA,CAnCO,WAAqDc,QAK3D,EAA8D;IAC7D,IAAI;MAAEC,CAAC;MAAEC;IAAQ,CAAC,GAAGF,QAAQ;IAC7B,MAAM;MAAEG,GAAG;MAAEC;IAAU,CAAC,GAAGJ,QAAQ;IACnC,IAAIK,CAAC,GAAG,CAAC;MACPC,CAAC,GAAG,CAAC;MACLC,EAAE,GAAG,CAAC;IAER,MAAM/B,IAAI,GAAG,MAAAA,CAAA,KAAY;MACvB,CAAC;QAAEyB,CAAC;QAAEI;MAAE,CAAC,GAAG5C,gBAAgB,CAAC;QAC3ByC,OAAO;QACPK,EAAE;QACFJ,GAAG;QACHF,CAAC;QACDI,CAAC;QACDD;MACF,CAAC,CAAC;MACF,OAAO;QAAEH,CAAC;QAAEI,CAAC;QAAEC;MAAE,CAAC;IACpB,CAAC;IAAC,IAAAE,0BAAA;IAAA,IAAAC,kBAAA;IAAA,IAAAC,eAAA;IAAA;MAEF,SAAAC,UAAA,GAAAtC,cAAA,CAA0CC,yBAAyB,CAAC,CAAC,GAAAsC,MAAA,EAAAJ,0BAAA,KAAAI,MAAA,SAAAC,oBAAA,CAAAF,UAAA,CAAAnC,IAAA,KAAAC,IAAA,EAAA+B,0BAAA,UAAE;QAAA,CAA5D;UAAEnB,KAAK,EAAEiB,CAAC;UAAEf,SAAS,EAAEgB;QAAG,CAAC,GAAAK,MAAA,CAAAlC,KAAA;QAAA;UAAA,IAAAoC,KAAA;UACpC,IAAIP,EAAE,KAAK,CAAC,EAAE;YACZ;UACF;UAEAL,OAAO,GAAG,OAAAY,KAAA,GAAMtC,IAAI,CAAC,CAAC,cAAAsC,KAAA,cAAAA,KAAA,GAAIZ,OAAO;QAAC;MACpC;IAAC,SAAAtB,GAAA;MAAA6B,kBAAA;MAAAC,eAAA,GAAA9B,GAAA;IAAA;MAAA;QAAA,IAAA4B,0BAAA,IAAAG,UAAA,CAAA9B,MAAA;UAAA,MAAAgC,oBAAA,CAAAF,UAAA,CAAA9B,MAAA;QAAA;MAAA;QAAA,IAAA4B,kBAAA;UAAA,MAAAC,eAAA;QAAA;MAAA;IAAA;IAED,MAAM,IAAI,CAAC,CAAC;EACd,CAAC;EAAA,OAAAX,qCAAA,CAAAf,KAAA,OAAAC,SAAA;AAAA;AAkBD,OAAO,MAAM8B,iBAAiB,GAAG,MAAAA,CAC/BC,OAAgB,EAChBC,oBAAoD,EACpDC,cAA0C,EAC1CC,QAAQ,GAAG,KAAK,KACb;EACH,2BAA2B;EAC3B,IACE,eAAe,IAAIH,OAAO,IAC1B1D,OAAO,CAAC0D,OAAO,EAAE7D,EAAE,CAACiE,UAAU,CAAC,aAAa,CAAC,CAAC,KAAK,IAAI,EACvD;IACA,IAAI,CAACD,QAAQ,EAAE;MACb,MAAM5D,kBAAkB,CAAC,CAAC;IAC5B;IAEA,KAAK,MAAM8D,SAAS,IAAIL,OAAO,CAACM,aAAa,CAAC,CAAC,EAAE;MAC/CL,oBAAoB,CAACI,SAAS,CAAC;IACjC;;IAEA;EACF,CAAC,MAAM;IACL,IAAI,CAACF,QAAQ,EAAE;MACb,MAAM3D,iBAAiB,CAAC,CAAC;IAC3B;IAEA0D,cAAc,CAACF,OAAO,CAAC;EACzB;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMO,qBAAqB,GAAIP,OAAgB,IAAK;EACzD5D,aAAa,CAAC4D,OAAO,EAAE9D,EAAE,CAACsE,sBAAsB,CAAC,CAAC,CAAC;EACnD;EACA;EACA;EACA;EACA;EACA;EACA;EACAR,OAAO,CAAC9D,EAAE,CAACuE,cAAc,CAAC,CAAC,CAAC;;EAE5BpE,gBAAgB,CAAC2D,OAAO,EAAE9D,EAAE,CAACsE,sBAAsB,CAAC;AACtD,CAAC","ignoreList":[]}