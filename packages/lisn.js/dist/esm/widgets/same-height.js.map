{"version":3,"file":"same-height.js","names":["_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","_catch","delegateYield","asyncGeneratorStep","_asyncToGenerator","arguments","apply","_next","_throw","_toConsumableArray","_arrayWithoutHoles","_iterableToArray","_unsupportedIterableToArray","_nonIterableSpread","Array","from","isArray","_arrayLikeToArray","_createForOfIteratorHelper","_n","F","toString","test","_classCallCheck","_defineProperties","_toPropertyKey","key","_createClass","_callSuper","_getPrototypeOf","_possibleConstructorReturn","_isNativeReflectConstruct","Reflect","construct","_assertThisInitialized","ReferenceError","Boolean","valueOf","_inherits","_setPrototypeOf","bind","_superPropGet","_get","get","_superPropBase","getOwnPropertyDescriptor","_defineProperty","_toPrimitive","toPrimitive","String","Number","MC","MH","settings","addClasses","removeClasses","getData","setData","delData","setNumericStyleProps","getComputedStyleProp","getVisibleContentChildren","logError","isValidNum","toNumWithBounds","quadraticRoots","formatAsString","validateNumber","SizeWatcher","Widget","registerWidget","getDefaultWidgetSelector","debug","SameHeight","_Widget","containerElement","config","_SameHeight$get","_this","destroyPromise","destroy","id","DUMMY_ID","items","getItemsFrom","sizeOf","usageError","_iterator","_step","item","parentOf","err","fetchConfig","fullConfig","promiseResolve","isDestroyed","init","toColumn","PREFIX_ORIENTATION","S_VERTICAL","toRow","getItems","getItemConfigs","newMap","entries","instance","isInstanceOf","register","WIDGET_NAME","element","isHTMLElement","configValidator","PREFIXED_NAME","prefixName","PREFIX_ROOT","concat","PREFIX_ITEM","PREFIX_ITEM__FOR_SELECT","S_TEXT","S_IMAGE","MIN_CHARS_FOR_TEXT","diffTolerance","resizeThreshold","S_DEBOUNCE_WINDOW","isText","lengthOf","innerText","areImagesLoaded","_iterator2","querySelectorAll","_step2","img","naturalWidth","width","naturalHeight","height","_ref","_callee","userConfig","_userConfig$minGap","_userConfig$maxFreeR","_userConfig$maxWidthR","_userConfig$diffToler","_userConfig$resizeThr","_userConfig$debounceW","colGapStr","minGap","_callee$","_context","getNumValue","strReplace","sameHeightMinGap","_minGap","min","_maxFreeR","maxFreeR","sameHeightMaxFreeR","max","_maxWidthR","maxWidthR","sameHeightMaxWidthR","_diffTolerance","sameHeightDiffTolerance","_resizeThreshold","sameHeightResizeThreshold","_debounceWindow","debounceWindow","sameHeightDebounceWindow","_x","_x2","strValue","defaultValue","num","parseFloat","NaN","findItems","inputItems","itemMap","addItem","itemType","set","_iterator3","_step3","Map","_iterator4","_step4","_step4$value","_slicedToArray","widget","logger","Logger","sizeWatcher","reuse","allItems","callCounter","isFirstTime","lastOptimalHeight","hasScheduledReset","counterTimeout","resizeHandler","sizeData","debug7","setTimer","clearTimer","measurements","calculateMeasurements","getOptimalHeight","abs","setWidths","properties","bugError","_width","border","S_WIDTH","content","_height","S_HEIGHT","observeAll","_iterator5","_step5","onResize","target","unobserveAll","_iterator6","_step6","offResize","_iterator7","_step7","_step7$value","getWidthAtH","debug9","sameHeightW","_units","onDisable","onEnable","onDestroy","_callee2","_iterator8","_step8","_callee2$","_context2","t0","clear","getProperties","_type","_aspectR","_area","_extraH","_components","_iterator9","_step9","_step9$value","getTextComponents","_iterator10","_step10","child","components","_iterator11","_step11","debug8","tArea","tExtraH","imgAR","flexW","nItems","_iterator12","_step12","_step12$value","thisTxtArea","thisTxtExtraH","_iterator13","_step13","component","cmpProps","thisAspectR","_tArea","_tExtraH","_imgAR","_flexW","_nItems","targetHeight","h0","sqrt","_quadraticRoots","_quadraticRoots2","h2","h1","hR0","hR1","hR2","hF2","hF1","_quadraticRoots3","_quadraticRoots4","hConstr1","filter","hConstr2","tw0","iw0","freeSpace0","debug1"],"sources":["../../../src/ts/widgets/same-height.ts"],"sourcesContent":["/**\n * @module Widgets\n */\n\n// This widget finds optimal widths of flexbox children so that their heights\n// are equal or as close as possible to each other. It takes into account\n// whether they contain text (and possibly other elements, but not images) or\n// images.\n//\n// NOTE:\n//  - We assume that a given flexbox child is either a \"text container\" and\n//    contains only text and other non-image elements (such as buttons), or is\n//    an \"image container\" and contains only images.\n//  - We also assume that all the text inside a text container is the same\n//    font size as the font size of the text container.\n//\n// ~~~~~~ BACKGROUND: analysis for one text container and one image container ~~~~~~\n//\n// A text box has a fixed area, its height decreasing as width increases.\n// Whereas an image has a fixed aspect ratio, its height increasing as width\n// increases.\n//\n// We want to find an optimal configuration at which the text container (which\n// can include other elements apart from text) and image heights are equal, or\n// if not possible, at which they are as close as possible to each other while\n// satisfying as best as possible these \"guidelines\" (constraints that are not\n// enforced), based on visual appeal:\n//   - minGap, minimum gap between each item\n//   - maxWidthR, maximum ratio between the width of the widest child and the\n//     narrowest child\n//   - maxFreeR, maximum free space in the container as a percentage of its\n//     total width\n//\n// Then we set flex-basis as the optimal width (making sure this is disabled\n// when the flex direction is column). This allows for fluid width if the user\n// to configure shrink or wrap on the flexbox using CSS.\n//\n// ~~~~~~ FORMULAE: text and image width as a function of their height ~~~~~~\n//\n// For a given height, h, the widths of the text and image are:\n//\n//                 txtArea\n//   txtW(h) =  —————————————\n//              h - txtExtraH\n//\n//   imgW(h) = imgAspectR * h\n//\n// where txtExtraH comes from buttons and other non-text elements inside the\n// text container, whose height is treated as fixed (not changing with width).\n//\n// ~~~~~~ PLOT: total width as a function of height ~~~~~~\n//\n// The sum of the widths of image and text varies with their height, h, as:\n//\n//   w(h) = txtW(h) + imgW(h)\n//\n//              txtArea\n//        =  —————————————  +  imgAspectR * h\n//           h - txtExtraH\n//\n//\n//       w(h)\n//        ^\n//        | |              .\n//        | .             .\n//        |  .           .\n// flexW  +   .         .\n//        |    .       .\n//        |     .    .\n//        |       -\n//        |\n//        |———|———|—————|———————————> h\n//            h1  h0    h2\n//\n//\n// ~~~~~~ FORMULAE: height at which total width is minimum ~~~~~~\n//\n// The minimum of the function w(h) is at h = h0\n//\n//            ⌈   txtArea  ⌉\n//   h0 = sqrt| —————————— | + txtExtraH\n//            ⌊ imgAspectR ⌋\n//\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n//\n// The widths of image and text container at height = h0 are:\n//\n//   txtW(h0) = sqrt( txtArea * imgAspectR )\n//\n//   imgW(h0) = sqrt( txtArea * imgAspectR ) + imgAspectR * txtExtraH\n//            = txtW(h0) + imgAspectR * txtExtraH\n//\n// - NOTE: at if txtExtraH is 0 (i.e. the container has only text), then\n//   their widths are equal at h0; otherwise the image is wider\n//\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n//\n// There are zero, one or two values of h at which w(h) equals the flexbox\n// width, flexW. Labelled h1 and h2 above.\n//\n// ~~~~~~ FORMULAE: height at which total width is equal to flexbox width ~~~~~~\n//\n// The heights at which the sum of the widths, w(h) equals exactly flexW are:\n//\n//          -b ± sqrt( b^2 - 4ac )\n//   h2/1 = ——————————————————————\n//                  2a\n//\n// where:\n// a = imgAspectR\n// b = - ( (imgAspectR * txtExtraH) + flexW )\n// c = txtArea + (txtExtraH * flexW)\n//\n// If h1 and h2 are real, then h1 <= h0 <= h2, as shown in plot above.\n//\n// ~~~~~~ SCENARIOS: free space or overflow in the flexbox ~~~~~~\n//\n// Whether there is a solution to the above equation, i.e. whether h1 and h2\n// are real, depends on which scenario we have:\n//\n// 1. If flexW = w(h0), then h1 = h2 = h0\n// 2. If flexW < w(h0), then there is no exact solution, i.e. it's impossible\n//    to fit the text and image inside the flexbox and have them equal heights;\n//    there is overflow even at h0\n// 3. If flexW > w(h0) (as in the graph above), then at h0 there is free space\n//    in the flexbox and we can choose any height between h1 and h2\n//\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n//\n// The widths h0, h1 and h2 represent the following visual configuration:\n//   - h0: intermediate height, maximum free space in the container;\n//   - h1: minimum height (i.e. wide text and small image), no free space in\n//     the container;\n//   - h2: maximum height (i.e. narrow text and large image), no free space in\n//     the container;\n//\n// ~~~~~~ THEREFORE: approach ~~~~~~\n//\n// 1. If flexW = w(h0), i.e. h1 = h2 = h0:\n//    => we choose h0 as the height\n// 2. If flexW < w(h0), i.e. it's impossible to fit the text and image inside\n//    the flexbox and have them equal heights:\n//    => we still choose h0 as the height as that gives the least amount of\n//       overflow; user-defined CSS can control whether the items will be\n//       shrunk, the flexbox will wrap or overflow\n// 3. If flexW > w(h0), i.e. at h0 there is free space in the flexbox:\n//    => choose a height between h1 and h2 that best fits with the guidelines\n//       maxWidthR and maxFreeR\n//\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n//\n// In scenario 3 we can look at the guidelines, maxWidthR and maxFreeR.\n//\n// ~~~~~~ GUIDELINE: maxWidthR ~~~~~~\n//\n// ~~~~~~ FORMULAE: height at which text and image width are equal ~~~~~~\n//\n// The width of the text and image container are equal at height hR0:\n//\n//         txtExtraH + sqrt( txtExtraH^2  +  4 * (h0 - txtExtraH)^2 )\n// hR0  =  ——————————————————————————————————————————————————————————\n//                                    2\n//\n// ~~~~~~ FORMULAE: height at which text to image width is maxWidthR ~~~~~~\n//\n// For heights < hR0, i.e. text becomes wider than the image, at some point the\n// ratio of text width to image width becomes maxWidthR. This happens at hR1.\n//\n//                         ⌈                 4 * (h0 - txtExtraH)^2 ⌉\n//         txtExtraH + sqrt| txtExtraH^2  +  —————————————————————— |\n//                         ⌊                        maxWidthR       ⌋\n// hR1  =  ——————————————————————————————————————————————————————————\n//                                    2\n//\n// ~~~~~~ FORMULAE: height at which image to text width is maxWidthR ~~~~~~\n//\n// For heights > hR0, i.e. text becomes narrower than the image, at some point\n// the ratio of image width to text width becomes maxWidthR. This happens at hR2.\n//\n//         txtExtraH + sqrt( txtExtraH^2  +  4 * maxWidthR * (h0 - txtExtraH)^2 )\n// hR2  =  ——————————————————————————————————————————————————————————————————————\n//                                        2\n//\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n//\n// NOTE:\n// - hR1 <= hR0 <= hR2 && hR0 <= h0\n// - hR0, hR1 and hR2 are the first (larger) roots of the quadratic equation\n//   with coefficients:\n//     a = imgAspectR * R\n//     b = - imgAspectR * txtExtraH * R\n//     c = - textArea\n//   where R = 1 gives hR0, R = maxWidthR gives hR1 and R = 1 / maxWidthR gives hR2\n// - The smaller roots of the equation should be negative, so we ignore them\n//\n// ~~~~~~ GUIDELINE: maxFreeR ~~~~~~\n//\n// ~~~~~~ FORMULAE: free space in flexbox relative to its width ~~~~~~\n//\n// The percentage of free space in the container is:\n//\n//           flexW - w(h)\n// freeR  =  ————————————\n//              flexW\n//\n//\n//                             txtArea\n//                flexW  -  —————————————  - imgAspectR * h\n//                          h - txtExtraH\n//             =  —————————————————————————————————————————\n//                                flexW\n//\n// ~~~~~~ FORMULAE: height at which relative free space is maxFreeR ~~~~~~\n//\n// This would be equal to maxFreeR at hF1 and hF2:\n//\n//          -b ± sqrt( b^2 - 4ac )\n//   hF2/1 = ——————————————————————\n//                  2a\n//\n// where:\n// a = imgAspectR\n// b = - ( (imgAspectR * txtExtraH) + ( flexW * (1 - maxFreeR) ) )\n// c = txtArea + ( txtExtraH * flexW * (1 - maxFreeR) )\n//\n// If hF1 and hF2 are real, then h1 < hF1 <= h0 <= hF2 < h2.\n//\n// ~~~~~~ THEREFORE: choosing a height in scenario 3 ~~~~~~\n//\n// So in scenario 3 we can choose any height h between\n//\n//   max(h1, hR1, hF1)  and  min(h2, hR2, hF2)\n//\n// Note, it's possible that max(h1, hR1, hF1) is greater than min(h2, hR2, hF2),\n// e.g. if hF1 > hR2 or hR1 > hF2.\n//\n// This will make the text and image equal height, fitting in the flexbox, and\n// if possible, satisfying both maxFreeR and maxWidthR.\n//\n// Here we choose the smallest height possible, which would result in the\n// larger ratio between text width and image width, but it will satisfy the\n// constraints maxFreeR and maxWidthR, so that is ok.\n//\n// ~~~~~~ GENERALISING: for more than one text and/or image container ~~~~~~\n//\n// We can generalise the above in order to find an approximate solution for the\n// case of multiple text or image containers (an exact solution would require\n// solving a polynomial of degree equal to the number of elements).\n//\n// If we imaging putting all text in one container and all images in another\n// container we are back at the above exact solutions for a single text and\n// image container.\n//\n// We can solve for the following parameters:\n// - txtArea:    total text area\n//               = sum_i(txtArea_i)\n//\n// - txtExtraH:  weighted average extra height\n//               = sum_i(txtExtraH_i * txtArea_i) / txtArea\n//\n// - imgAspectR: total image aspect ratio (for horizontally laid out image\n//               containers)\n//               = sum_i(imgAspectR_i)\n//\n// ~~~~~~ CASE 1: only images containers ~~~~~~\n// If we have only image containers, we solve for the optimal height as follows:\n//\n//   flexW = imgAspectR * h\n//\n//                   flexW\n//   => hIdeal  =  ——————————\n//                 imgAspectR\n//\n// ~~~~~~ CASE 2: only text containers ~~~~~~\n// If we have only text containers, we solve for the optimal height as follows:\n//\n//                  txtArea\n//   flexW  =  ——————————————————\n//             hIdeal - txtExtraH\n//\n//                 txtArea\n//   => hIdeal  =  ———————  +  txtExtraH\n//                  flexW\n//\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n// Once we've found the optimal height h, we calculate the individual widths of\n// the flexbox children as:\n//\n//                  txtArea_i\n//   txtW_i(h) =  —————————————\n//                h - txtExtraH_i\n//\n//   imgW_i(h) = imgAspectR_i * h\n//\n// ~~~~~~ IMPLEMENTATION ~~~~~~\n//\n// We go through the flexbox children and determine whether a child is a \"text\n// container\" or an \"image container\".\n//\n// For image containers, we measure the width and height and calculate the\n// aspect ratio using these.\n//\n// For text containers, we measure their width and height. We calculate the\n// text area by measuring the size of all children of the text container that\n// are deemed to contain only text (or if the entire text container is deemed\n// to contain only text, then we take its size). Then we sum the areas of\n// all such text-only boxes.\n//\n// To determine the extra height in the text container, we take the total\n// height of all text-only boxes inside it, and we subtract that from its\n// measured height.\n//\n// NOTE:\n// - This does not work if the flexbox children are set to align stretch,\n//   because in such cases there would be free vertical space in the container\n//   that shouldn't be counted.\n// - If the flexbox children or any of their descendants have paddings and\n//   margins, then this calculation would only work if the paddings/margins\n//   inside text containers are absolute and only on top and bottom, and\n//   paddings/margins inside image containers are in percentages and only on\n//   descendants of the image container. Otherwise the image aspect ratio and the\n//   extra text height would not be constant, and there may be extra width in\n//   the text container. It is very tricky to take all of this into account. So\n//   we ignore such cases and assume constant image aspect ratio and constant\n//   text area and text container extra height.\n//\n// We use resize observers to get the size of relevant elements and\n// re-calculate as needed.\n\nimport * as MC from \"@lisn/globals/minification-constants\";\nimport * as MH from \"@lisn/globals/minification-helpers\";\n\nimport { settings } from \"@lisn/globals/settings\";\n\nimport {\n  addClasses,\n  removeClasses,\n  getData,\n  setData,\n  delData,\n  setNumericStyleProps,\n  getComputedStyleProp,\n} from \"@lisn/utils/css-alter\";\nimport { getVisibleContentChildren } from \"@lisn/utils/dom-query\";\nimport { logError } from \"@lisn/utils/log\";\nimport { isValidNum, toNumWithBounds, quadraticRoots } from \"@lisn/utils/math\";\nimport { formatAsString } from \"@lisn/utils/text\";\nimport { validateNumber } from \"@lisn/utils/validation\";\n\nimport { SizeWatcher, SizeData } from \"@lisn/watchers/size-watcher\";\n\nimport {\n  Widget,\n  WidgetConfigValidatorObject,\n  registerWidget,\n  getDefaultWidgetSelector,\n} from \"@lisn/widgets/widget\";\n\nimport { LoggerInterface } from \"@lisn/debug/types\";\n\nimport debug from \"@lisn/debug/debug\";\n\n/**\n * Configures the given element as a {@link SameHeight} widget.\n *\n * The SameHeight widget sets up the given element as a flexbox and sets the\n * flex basis of its components so that their heights are as close as possible\n * to each other. It tracks their size (see {@link SizeWatcher}) and\n * continually updates the basis as needed.\n *\n * When calculating the best flex basis that would result in equal heights,\n * SameHeight determines whether a flex child is mostly text or mostly images\n * since the height of these scales in opposite manner with their width.\n * Therefore, the components of the widget should contain either mostly text or\n * mostly images.\n *\n * The widget should have more than one item and the items must be immediate\n * children of the container element.\n *\n * SameHeight tries to automatically determine if an item is mostly text or\n * mostly images based on the total display text content, but you can override\n * this in two ways:\n * 1. By passing a map of elements as {@link SameHeightConfig.items | items}\n *    instead of an array, and setting the value for each to either `\"text\"` or\n *    `\"image\"`\n * 2. By setting the `data-lisn-same-height-item` attribute to `\"text\"` or\n *   `\"image\"` on the children. **NOTE** however that when auto-discovering the\n *   items (i.e. when you have not explicitly passed a list/map of items), if\n *   you set the `data-lisn-same-height-item` attribute on _any_ child you must\n *   also add this attribute to all other children that are to be used by the\n *   widget. Other children (that don't have this attribute) will be ignored\n *   and assumed to be either zero-size or position absolute/fixed.\n *\n * **IMPORTANT:** You should not instantiate more than one {@link SameHeight}\n * widget on a given element. Use {@link SameHeight.get} to get an existing\n * instance if any. If there is already a widget instance, it will be destroyed!\n *\n * **IMPORTANT:** The element you pass will be set to `display: flex` and its\n * children will get `box-sizing: border-box` and continually updated\n * `flex-basis` style. You can add additional CSS to the element or its\n * children if you wish. For example you may wish to set `flex-wrap: wrap` on\n * the element and a `min-width` on the children.\n *\n * -----\n *\n * To use with auto-widgets (HTML API) (see {@link settings.autoWidgets}), the\n * following CSS classes or data attributes are recognized:\n * - `lisn-same-height` class or `data-lisn-same-height` attribute set on the\n *   container element that constitutes the widget\n *\n * When using auto-widgets, the elements that will be used as items are\n * discovered in the following way:\n * 1. The immediate children of the top-level element that constitutes the\n *    widget that have the `lisn-same-height-item` class or\n *    `data-lisn-same-height-item` attribute are taken.\n * 2. If none of the root's children have this class or attribute, then all of\n *    the immediate children of the widget element except any `script` or\n *    `style` elements are taken as the items.\n *\n * See below examples for what values you can use set for the data attribute\n * in order to modify the configuration of the automatically created widget.\n *\n * @example\n * This defines a simple SameHeight widget with one text and one image child.\n *\n * ```html\n * <div class=\"lisn-same-height\">\n *   <div>\n *     <p>\n *       Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\n *       eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad\n *       minim veniam, quis nostrud exercitation ullamco laboris nisi ut\n *       aliquip ex ea commodo consequat. Duis aute irure dolor in\n *       reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\n *       pariatur. Excepteur sint occaecat cupidatat non proident, sunt in\n *       culpa qui officia deserunt mollit anim id est laborum.\n *     </p>\n *   </div>\n *\n *   <div>\n *     <img\n *       src=\"https://www.wikipedia.org/portal/wikipedia.org/assets/img/Wikipedia-logo-v2@1.5x.png\"\n *     />\n *   </div>\n * </div>\n * ```\n *\n * @example\n * This defines a SameHeight widget with the flexbox children specified\n * explicitly (and one ignored), as well as having all custom settings.\n *\n * ```html\n * <div data-lisn-same-height=\"diff-tolerance=20\n *                             | resize-threshold=10\n *                             | debounce-window=50\n *                             | min-gap=50\n *                             | max-free-r=0.2\n *                             | max-width-r=3.2\">\n *   <div>Example ignored child</div>\n *\n *   <div data-lisn-same-height-item><!-- Will be detected as text anyway -->\n *     <p>\n *       Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\n *       eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad\n *       minim veniam, quis nostrud exercitation ullamco laboris nisi ut\n *       aliquip ex ea commodo consequat. Duis aute irure dolor in\n *       reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\n *       pariatur. Excepteur sint occaecat cupidatat non proident, sunt in\n *       culpa qui officia deserunt mollit anim id est laborum.\n *     </p>\n *   </div>\n *\n *   <!-- Explicitly set to image type, though it will be detected as such -->\n *   <div data-lisn-same-height-item=\"image\">\n *     <img\n *       src=\"https://www.wikipedia.org/portal/wikipedia.org/assets/img/Wikipedia-logo-v2@1.5x.png\"\n *     />\n *   </div>\n *\n *   <!-- Explicitly set to text type, because it will NOT be detected as such (text too short). -->\n *   <div data-lisn-same-height-item=\"text\">\n *     <p>\n *       Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n *     </p>\n *   </div>\n * </div>\n * ```\n */\nexport class SameHeight extends Widget {\n  /**\n   * Switches the flexbox to vertical (column) mode.\n   *\n   * You can alternatively do this by setting the\n   * `data-lisn-orientation=\"vertical\"` attribute on the element at any time.\n   *\n   * You can do this for example as part of a trigger:\n   *\n   * @example\n   * ```html\n   * <div class=\"lisn-same-height\"\n   *      data-lisn-on-layout=\"max-mobile-wide:set-attribute=data-lisn-orientation#vertical\">\n   *      <!-- ... children -->\n   * </div>\n   * ```\n   */\n  readonly toColumn: () => Promise<void>;\n\n  /**\n   * Switches the flexbox back to horizontal (row) mode, which is the default.\n   *\n   * You can alternatively do this by deleting the\n   * `data-lisn-orientation` attribute on the element, or setting it to\n   * `\"horizontal\"` at any time.\n   */\n  readonly toRow: () => Promise<void>;\n\n  /**\n   * Returns the elements used as the flex children.\n   */\n  readonly getItems: () => Element[];\n\n  /**\n   * Returns a map of the elements used as the flex children with their type.\n   */\n  readonly getItemConfigs: () => Map<Element, \"text\" | \"image\">;\n\n  /**\n   * If the element is already configured as a SameHeight widget, the widget\n   * instance is returned. Otherwise null.\n   */\n  static get(containerElement: Element): SameHeight | null {\n    const instance = super.get(containerElement, DUMMY_ID);\n    if (MH.isInstanceOf(instance, SameHeight)) {\n      return instance;\n    }\n    return null;\n  }\n\n  static register() {\n    registerWidget(\n      WIDGET_NAME,\n      (element, config) => {\n        if (MH.isHTMLElement(element)) {\n          if (!SameHeight.get(element)) {\n            return new SameHeight(element, config);\n          }\n        } else {\n          logError(\n            MH.usageError(\n              \"Only HTMLElement is supported for SameHeight widget\",\n            ),\n          );\n        }\n        return null;\n      },\n      configValidator,\n    );\n  }\n\n  constructor(containerElement: HTMLElement, config?: SameHeightConfig) {\n    const destroyPromise = SameHeight.get(containerElement)?.destroy();\n    super(containerElement, { id: DUMMY_ID });\n\n    const items = getItemsFrom(containerElement, config?.items);\n\n    if (MH.sizeOf(items) < 2) {\n      throw MH.usageError(\"SameHeight must have more than 1 item\");\n    }\n\n    for (const item of items.keys()) {\n      if (MH.parentOf(item) !== containerElement) {\n        throw MH.usageError(\n          \"SameHeight's items must be its immediate children\",\n        );\n      }\n    }\n\n    fetchConfig(containerElement, config).then((fullConfig) => {\n      (destroyPromise || MH.promiseResolve()).then(() => {\n        if (this.isDestroyed()) {\n          return;\n        }\n\n        init(this, containerElement, items, fullConfig);\n      });\n    });\n\n    this.toColumn = () =>\n      setData(containerElement, MC.PREFIX_ORIENTATION, MC.S_VERTICAL);\n\n    this.toRow = () => delData(containerElement, MC.PREFIX_ORIENTATION);\n\n    this.getItems = () => [...items.keys()];\n    this.getItemConfigs = () => MH.newMap([...items.entries()]);\n  }\n}\n\n/**\n * @interface\n */\nexport type SameHeightConfig = {\n  /**\n   * The elements that will make up the items. They **MUST** be immediate\n   * children of the container element.\n   *\n   * The widget should have more than one item.\n   *\n   * If this is not specified, then\n   * 1. The immediate children of the top-level element that constitutes the\n   *    widget that have the `lisn-same-height-item` class or\n   *    `data-lisn-same-height-item` attribute are taken.\n   * 2. If none of the root's children have this class or attribute, then all of\n   *    the immediate children of the widget element except any `script` or\n   *    `style` elements are taken as the items.\n   */\n  items?: Element[] | Map<Element, \"image\" | \"text\">;\n\n  /**\n   * After setting the flex basis of the children and their size updates, in\n   * case the resultant height differs from the predicted calculated one by\n   * `diffTolerance` in pixels, then the calculations are re-run using the new\n   * sizes. Calculations are re-run at most once only.\n   *\n   * Differences between the predicted and resultant height would happen if the\n   * children contain a mixture of text and images or if there are margins or\n   * paddings that don't scale in the same way as the content.\n   *\n   * @defaultValue {@link settings.sameHeightDiffTolerance}\n   */\n  diffTolerance?: number;\n\n  /**\n   * The `resizeThreshold` to pass to the {@link SizeWatcher}.\n   *\n   * @defaultValue {@link settings.sameHeightResizeThreshold}\n   */\n  resizeThreshold?: number;\n\n  /**\n   * The `debounceWindow` to pass to the {@link SizeWatcher}.\n   *\n   * @defaultValue {@link settings.sameHeightDebounceWindow}\n   */\n  debounceWindow?: number;\n\n  /**\n   * Minimum gap between the flex items. Note that setting this to 0 while at\n   * the same time setting `flex-wrap` to `wrap` (or `wrap-reverse`) on the\n   * element may lead to premature/unnecessary wrapping.\n   *\n   * Note that this is not strictly enforced, and is only used in finding\n   * optimal height based on other constraints. If you want to enforce this gap,\n   * set it as a `column-gap` CSS rule.\n   *\n   * @defaultValue The effective `column-gap` on the container element style or\n   *               if none, {@link settings.sameHeightMinGap}\n   */\n  minGap?: number;\n\n  /**\n   * Maximum ratio between the free space in the flex container and its total\n   * width. You can set this to a negative number to disable this restriction.\n   *\n   * It has to be < 1. Otherwise it is invalid and disables this restriction.\n   *\n   * Note that this is not strictly enforced, and is only used in finding\n   * optimal height based on other constraints.\n   *\n   * @defaultValue {@link settings.sameHeightMaxFreeR}\n   */\n  maxFreeR?: number;\n\n  /**\n   * Maximum ratio between the width of the widest item and the narrowest item.\n   * You can set this to 0 or a negative number to disable this restriction.\n   *\n   * It has to be >= 1. Otherwise it is invalid and disables this restriction.\n   *\n   * Note that this is not strictly enforced, and is only used in finding\n   * optimal height based on other constraints.\n   *\n   * @defaultValue {@link settings.sameHeightMaxWidthR}\n   */\n  maxWidthR?: number;\n};\n\n// ------------------------------\n\ntype SameHeightConfigInternal = {\n  _minGap: number;\n  _diffTolerance: number;\n  _resizeThreshold: number;\n  _debounceWindow: number;\n  _maxFreeR: number;\n  _maxWidthR: number;\n};\n\ntype ItemProperties = {\n  _type: \"\" | \"image\" | \"text\";\n  _width: number;\n  _height: number;\n  _aspectR: number;\n  _area: number;\n  _extraH: number;\n  _components: Element[];\n};\n\ntype AverageMeasurements = {\n  _tArea: number;\n  _tExtraH: number;\n  _imgAR: number;\n  _flexW: number;\n  _nItems: number;\n};\n\nconst WIDGET_NAME = \"same-height\";\nconst PREFIXED_NAME = MH.prefixName(WIDGET_NAME);\nconst PREFIX_ROOT = `${PREFIXED_NAME}__root`;\n\n// Use different classes for styling items to the one used for auto-discovering\n// them, so that re-creating existing widgets can correctly find the items to\n// be used by the new widget synchronously before the current one is destroyed.\nconst PREFIX_ITEM = `${PREFIXED_NAME}__item`;\nconst PREFIX_ITEM__FOR_SELECT = `${PREFIXED_NAME}-item`;\n\nconst S_TEXT = \"text\";\nconst S_IMAGE = \"image\";\n\n// Only one SameHeight widget per element is allowed, but Widget requires a\n// non-blank ID.\nconst DUMMY_ID = PREFIXED_NAME;\n\n// We consider elements that have text content of at least <MIN_CHARS_FOR_TEXT>\n// characters to be text.\nconst MIN_CHARS_FOR_TEXT = 100;\n\nconst configValidator: WidgetConfigValidatorObject<SameHeightConfig> = {\n  diffTolerance: validateNumber,\n  resizeThreshold: validateNumber,\n  [MC.S_DEBOUNCE_WINDOW]: validateNumber,\n  minGap: validateNumber,\n  maxFreeR: validateNumber,\n  maxWidthR: validateNumber,\n};\n\nconst isText = (element: Element) =>\n  getData(element, PREFIX_ITEM__FOR_SELECT) === S_TEXT ||\n  (getData(element, PREFIX_ITEM__FOR_SELECT) !== S_IMAGE &&\n    MH.isHTMLElement(element) &&\n    MH.lengthOf(element.innerText) >= MIN_CHARS_FOR_TEXT);\n\nconst areImagesLoaded = (element: Element) => {\n  for (const img of element.querySelectorAll(\"img\")) {\n    // Don't rely on img.complete since sometimes this returns false even\n    // though the image is loaded and has a size. Just check the size.\n    if (\n      img.naturalWidth === 0 ||\n      img.width === 0 ||\n      img.naturalHeight === 0 ||\n      img.height === 0\n    ) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nconst fetchConfig = async (\n  containerElement: HTMLElement,\n  userConfig: SameHeightConfig | undefined,\n): Promise<SameHeightConfigInternal> => {\n  const colGapStr = await getComputedStyleProp(containerElement, \"column-gap\");\n  const minGap = getNumValue(\n    MH.strReplace(colGapStr, /px$/, \"\"),\n    settings.sameHeightMinGap,\n  );\n\n  return {\n    _minGap: toNumWithBounds(userConfig?.minGap ?? minGap, { min: 0 }, 10),\n    _maxFreeR: toNumWithBounds(\n      userConfig?.maxFreeR ?? settings.sameHeightMaxFreeR,\n      { min: 0, max: 0.9 },\n      -1,\n    ),\n    _maxWidthR: toNumWithBounds(\n      userConfig?.maxWidthR ?? settings.sameHeightMaxWidthR,\n      { min: 1 },\n      -1,\n    ),\n    _diffTolerance:\n      userConfig?.diffTolerance ?? settings.sameHeightDiffTolerance,\n    _resizeThreshold:\n      userConfig?.resizeThreshold ?? settings.sameHeightResizeThreshold,\n    _debounceWindow:\n      userConfig?.debounceWindow ?? settings.sameHeightDebounceWindow,\n  };\n};\n\nconst getNumValue = (strValue: string | null, defaultValue: number): number => {\n  const num = strValue ? MH.parseFloat(strValue) : NaN;\n  return MH.isNaN(num) ? defaultValue : num;\n};\n\nconst findItems = (containerElement: HTMLElement) => {\n  const items = [\n    ...MH.querySelectorAll(\n      containerElement,\n      getDefaultWidgetSelector(PREFIX_ITEM__FOR_SELECT),\n    ),\n  ];\n\n  if (!MH.lengthOf(items)) {\n    items.push(...getVisibleContentChildren(containerElement));\n  }\n\n  return items;\n};\n\nconst getItemsFrom = (\n  containerElement: HTMLElement,\n  inputItems: Element[] | Map<Element, \"image\" | \"text\"> | undefined,\n) => {\n  const itemMap = MH.newMap<Element, \"image\" | \"text\">();\n\n  inputItems = inputItems || findItems(containerElement);\n\n  const addItem = (item: Element, itemType?: \"text\" | \"image\") => {\n    itemType = itemType || (isText(item) ? S_TEXT : S_IMAGE);\n    itemMap.set(item, itemType);\n  };\n\n  if (MH.isArray(inputItems)) {\n    for (const item of inputItems) {\n      addItem(item);\n    }\n  } else if (MH.isInstanceOf(inputItems, Map)) {\n    for (const [item, itemType] of inputItems.entries()) {\n      addItem(item, itemType);\n    }\n  }\n\n  return itemMap;\n};\n\nconst init = (\n  widget: SameHeight,\n  containerElement: HTMLElement,\n  items: Map<Element, \"image\" | \"text\">,\n  config: SameHeightConfigInternal,\n) => {\n  const logger = debug\n    ? new debug.Logger({\n        name: `SameHeight-${formatAsString(containerElement)}`,\n      })\n    : null;\n\n  const diffTolerance = config._diffTolerance;\n  const debounceWindow = config._debounceWindow;\n\n  const sizeWatcher = SizeWatcher.reuse({\n    [MC.S_DEBOUNCE_WINDOW]: debounceWindow,\n    resizeThreshold: config._resizeThreshold,\n  });\n\n  const allItems = MH.newMap<Element, ItemProperties>();\n\n  let callCounter = 0;\n  let isFirstTime = true;\n  let lastOptimalHeight = 0;\n  let hasScheduledReset = false;\n  let counterTimeout: ReturnType<typeof setTimeout> | null = null;\n\n  // ----------\n\n  const resizeHandler = (element: Element, sizeData: SizeData) => {\n    // Since the SizeWatcher calls us once for every element, we batch the\n    // re-calculations so they are done once in every cycle.\n    // Allow the queue of ResizeObserverEntry in the SizeWatcher to be\n    // emptied, and therefore to ensure we have the latest size for all\n    // elements.\n    if (!hasScheduledReset) {\n      debug: logger?.debug7(\"Scheduling calculations\", callCounter);\n      hasScheduledReset = true;\n\n      MH.setTimer(() => {\n        hasScheduledReset = false;\n\n        if (callCounter > 1) {\n          debug: logger?.debug7(\"Already re-calculated once, skipping\");\n          callCounter = 0;\n          return;\n        }\n\n        callCounter++;\n        if (counterTimeout) {\n          MH.clearTimer(counterTimeout);\n        }\n\n        const measurements = calculateMeasurements(\n          containerElement,\n          allItems,\n          isFirstTime,\n          logger,\n        );\n\n        const height = measurements\n          ? getOptimalHeight(measurements, config, logger)\n          : null;\n\n        if (height && MH.abs(lastOptimalHeight - height) > diffTolerance) {\n          // Re-set widths again. We may be called again in the next cycle if\n          // the change in size exceeds the resizeThreshold.\n          lastOptimalHeight = height;\n          isFirstTime = false;\n          setWidths(height); // no need to await\n\n          // If we are _not_ called again in the next cycle (just after\n          // debounceWindow), then reset the counter. It means the resultant\n          // change in size did not exceed the SizeWatcher threshold.\n          counterTimeout = MH.setTimer(() => {\n            callCounter = 0;\n          }, debounceWindow + 50);\n        } else {\n          // Done, until the next time elements are resized\n          callCounter = 0;\n        }\n      }, 0);\n    }\n\n    // Save the size of the item\n    const properties = allItems.get(element);\n    if (!properties) {\n      logError(MH.bugError(\"Got SizeWatcher call for unknown element\"));\n      return;\n    }\n\n    properties._width =\n      sizeData.border[MC.S_WIDTH] || sizeData.content[MC.S_WIDTH];\n    properties._height =\n      sizeData.border[MC.S_HEIGHT] || sizeData.content[MC.S_HEIGHT];\n\n    debug: logger?.debug7(\"Got size\", element, properties);\n  };\n\n  // ----------\n\n  const observeAll = () => {\n    isFirstTime = true;\n\n    for (const element of allItems.keys()) {\n      sizeWatcher.onResize(resizeHandler, { target: element });\n    }\n  };\n\n  // ----------\n\n  const unobserveAll = () => {\n    for (const element of allItems.keys()) {\n      sizeWatcher.offResize(resizeHandler, element);\n    }\n  };\n\n  // ----------\n\n  const setWidths = (height: number) => {\n    for (const [element, properties] of allItems.entries()) {\n      if (MH.parentOf(element) === containerElement) {\n        const width = getWidthAtH(element, properties, height);\n        debug: logger?.debug9(\n          \"Setting width property\",\n          element,\n          properties,\n          width,\n        );\n        setNumericStyleProps(element, { sameHeightW: width }, { _units: \"px\" });\n      }\n    }\n  };\n\n  // SETUP ------------------------------\n\n  widget.onDisable(unobserveAll);\n  widget.onEnable(observeAll);\n\n  widget.onDestroy(async () => {\n    for (const element of allItems.keys()) {\n      if (MH.parentOf(element) === containerElement) {\n        // delete the property and attribute\n        await setNumericStyleProps(element, { sameHeightW: NaN });\n        await removeClasses(element, PREFIX_ITEM);\n      }\n    }\n\n    allItems.clear();\n\n    await removeClasses(containerElement, PREFIX_ROOT);\n  });\n\n  // Find all relevant items: the container, its direct children and the\n  // top-level text only elements.\n  const getProperties = (itemType: \"\" | \"image\" | \"text\"): ItemProperties => {\n    return {\n      _type: itemType,\n      _width: NaN,\n      _height: NaN,\n      _aspectR: NaN,\n      _area: NaN,\n      _extraH: NaN,\n      _components: [],\n    };\n  };\n\n  allItems.set(containerElement, getProperties(\"\"));\n\n  for (const [item, itemType] of items.entries()) {\n    addClasses(item, PREFIX_ITEM);\n\n    const properties: ItemProperties = getProperties(itemType);\n    allItems.set(item, properties);\n\n    if (itemType === S_TEXT) {\n      properties._components = getTextComponents(item);\n      for (const child of properties._components) {\n        allItems.set(child, getProperties(\"\"));\n      }\n    }\n  }\n\n  addClasses(containerElement, PREFIX_ROOT);\n  observeAll();\n};\n\n/**\n * Find the top-level text-only elements that are descendants of the given one.\n */\nconst getTextComponents = (element: Element): Element[] => {\n  const components: Element[] = [];\n  for (const child of getVisibleContentChildren(element)) {\n    if (isText(child)) {\n      components.push(child);\n    } else {\n      components.push(...getTextComponents(child));\n    }\n  }\n\n  return components;\n};\n\nconst calculateMeasurements = (\n  containerElement: HTMLElement,\n  allItems: Map<Element, ItemProperties>,\n  isFirstTime: boolean,\n  logger: LoggerInterface | null,\n): AverageMeasurements | null => {\n  if (getData(containerElement, MC.PREFIX_ORIENTATION) === MC.S_VERTICAL) {\n    debug: logger?.debug8(\"In vertical mode\");\n    return null;\n  }\n\n  debug: logger?.debug7(\"Calculating measurements\");\n  // initial values\n  let tArea = NaN,\n    tExtraH = 0,\n    imgAR = NaN,\n    flexW = NaN,\n    nItems = 0;\n\n  for (const [element, properties] of allItems.entries()) {\n    const width = properties._width;\n    const height = properties._height;\n\n    if (element === containerElement) {\n      flexW = width;\n      nItems = MH.lengthOf(getVisibleContentChildren(element));\n\n      //\n    } else if (properties._type === S_TEXT) {\n      let thisTxtArea = 0,\n        thisTxtExtraH = 0;\n      const components = properties._components;\n\n      if (MH.lengthOf(components)) {\n        for (const component of properties._components) {\n          const cmpProps = allItems.get(component);\n          if (cmpProps) {\n            thisTxtArea += cmpProps._width * cmpProps._height;\n          } else {\n            logError(MH.bugError(\"Text component not observed\"));\n          }\n        }\n        thisTxtExtraH = height - thisTxtArea / width;\n      } else {\n        thisTxtArea = width * height;\n      }\n\n      properties._area = thisTxtArea;\n      properties._extraH = thisTxtExtraH;\n\n      tArea = (tArea || 0) + thisTxtArea;\n      tExtraH += thisTxtExtraH;\n\n      //\n    } else if (properties._type === S_IMAGE) {\n      if (isFirstTime && !areImagesLoaded(element)) {\n        debug: logger?.debug8(\"Images not loaded\");\n        return null;\n      }\n\n      const thisAspectR = width / height;\n      imgAR = (imgAR || 0) + thisAspectR;\n      properties._aspectR = thisAspectR;\n\n      //\n    } else {\n      // skip grandchildren (text components), here\n      continue;\n    }\n\n    debug: logger?.debug8(\"Examined\", properties, {\n      tArea,\n      tExtraH,\n      imgAR,\n      flexW,\n    });\n  }\n\n  return {\n    _tArea: tArea,\n    _tExtraH: tExtraH,\n    _imgAR: imgAR,\n    _flexW: flexW,\n    _nItems: nItems,\n  };\n};\n\nconst getWidthAtH = (\n  element: Element,\n  properties: ItemProperties,\n  targetHeight: number,\n): number =>\n  properties._type === S_TEXT\n    ? properties._area / (targetHeight - (properties._extraH || 0))\n    : properties._aspectR * targetHeight;\n\nconst getOptimalHeight = (\n  measurements: AverageMeasurements,\n  config: SameHeightConfigInternal,\n  logger: LoggerInterface | null,\n) => {\n  const tArea = measurements._tArea;\n  const tExtraH = measurements._tExtraH;\n  const imgAR = measurements._imgAR;\n  const flexW =\n    measurements._flexW - (measurements._nItems - 1) * config._minGap;\n  const maxFreeR = config._maxFreeR;\n  const maxWidthR = config._maxWidthR;\n\n  debug: logger?.debug8(\"Getting optimal height\", measurements, config);\n\n  // CASE 1: No text items\n  if (MH.isNaN(tArea)) {\n    debug: logger?.debug8(\"No text items\");\n    if (!imgAR) {\n      debug: logger?.debug8(\"Images not loaded\");\n      return NaN;\n    }\n\n    return flexW / imgAR;\n  }\n\n  // CASE 2: No images\n  if (MH.isNaN(imgAR)) {\n    debug: logger?.debug8(\"No images\");\n    return tArea / flexW + tExtraH;\n  }\n\n  if (!imgAR || !tArea) {\n    debug: logger?.debug8(\n      \"Expected both images and text, but no imgAR or tArea\",\n    );\n    return NaN;\n  }\n\n  const h0 = MH.sqrt(tArea / imgAR) + tExtraH;\n\n  // heights satisfying w(h) === flexW\n  const [h2, h1] = quadraticRoots(\n    imgAR,\n    -(imgAR * tExtraH + flexW),\n    tArea + tExtraH * flexW,\n  );\n\n  // heights satisfying maxWidthR\n  let hR0 = NaN,\n    hR1 = NaN,\n    hR2 = NaN;\n  if (maxWidthR > 0) {\n    hR0 = quadraticRoots(imgAR, -imgAR * tExtraH, -tArea)[0];\n\n    hR1 = quadraticRoots(\n      imgAR * maxWidthR,\n\n      -imgAR * tExtraH * maxWidthR,\n      -tArea,\n    )[0];\n\n    hR2 = quadraticRoots(\n      imgAR / maxWidthR,\n      (-imgAR * tExtraH) / maxWidthR,\n      -tArea,\n    )[0];\n  }\n\n  // heights satisfying maxFreeR\n  let hF2 = NaN,\n    hF1 = NaN;\n  if (maxFreeR >= 0) {\n    [hF2, hF1] = quadraticRoots(\n      imgAR,\n      -(imgAR * tExtraH + flexW * (1 - maxFreeR)),\n      tArea + tExtraH * flexW * (1 - maxFreeR),\n    );\n  }\n\n  // limits on constraints\n  const hConstr1 = MH.max(...MH.filter([h1, hR1, hF1], (v) => isValidNum(v)));\n  const hConstr2 = MH.min(...MH.filter([h2, hR2, hF2], (v) => isValidNum(v)));\n\n  // text and image widths at h0\n  const tw0 = tArea / (h0 - tExtraH);\n  const iw0 = h0 * imgAR;\n\n  // free space at h0\n  const freeSpace0 = flexW - tw0 - iw0;\n\n  debug: logger?.debug8(\"Optimal height calculations\", config, measurements, {\n    h0,\n    h1,\n    h2,\n    hR0,\n    hR1,\n    hR2,\n    hF1,\n    hF2,\n    hConstr1,\n    hConstr2,\n    tw0,\n    iw0,\n    freeSpace0,\n  });\n\n  // ~~~~ Some sanity checks\n  // If any of then is NaN, the comparison would be false, so we don't need to\n  // check.\n  // Also, we round the difference to 0.1 pixels to account for rounding\n  // errors during calculations.\n  if (!h0 || h0 <= 0) {\n    debug: logger?.debug1(\"Invalid calculation: Invalid h0\");\n  } else if (isValidNum(h1) !== isValidNum(h2)) {\n    debug: logger?.debug1(\n      \"Invalid calculation: One and only one of h1 or h2 is real\",\n    );\n  } else if (isValidNum(hR1) !== isValidNum(hR2)) {\n    debug: logger?.debug1(\n      \"Invalid calculation: One and only one of hR1 or hR2 is real\",\n    );\n  } else if (isValidNum(hF1) !== isValidNum(hF2)) {\n    debug: logger?.debug1(\n      \"Invalid calculation: One and only one of hF1 or hF2 is real\",\n    );\n  } else if (h1 - h0 > 0.1) {\n    debug: logger?.debug1(\"Invalid calculation: h1 > h0\");\n  } else if (h0 - h2 > 0.1) {\n    debug: logger?.debug1(\"Invalid calculation: h0 > h2\");\n  } else if (hR0 - h0 > 0.1) {\n    debug: logger?.debug1(\"Invalid calculation: hR0 > h0\");\n  } else if (hR1 - hR0 > 0.1) {\n    debug: logger?.debug1(\"Invalid calculation: hR1 > hR0\");\n  } else if (hR0 - hR2 > 0.1) {\n    debug: logger?.debug1(\"Invalid calculation: hR0 > hR2\");\n  } else if (hF1 - hF2 > 0.1) {\n    debug: logger?.debug1(\"Invalid calculation: hF1 > hF2\");\n  } else if (h1 - hF1 > 0.1) {\n    debug: logger?.debug1(\"Invalid calculation: h1 > hF1\");\n  } else if (hF2 - h2 > 0.1) {\n    debug: logger?.debug1(\"Invalid calculation: hF2 > h2\");\n  } else {\n    // Choose a height\n    if (freeSpace0 <= 0) {\n      // scenario 1 or 2\n      return h0;\n    } else {\n      // scenario 3\n      return MH.min(hConstr1, hConstr2);\n    }\n  }\n\n  logError(\n    MH.bugError(\"Invalid SameHeight calculations\"),\n    measurements,\n    config,\n  );\n  return NaN; // sanity checks failed\n};\n"],"mappings":"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;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAaC,UAAU,0BAAAC,OAAA;EAuErB,SAAAD,WAAYE,gBAA6B,EAAEC,MAAyB,EAAE;IAAA,IAAAC,eAAA;IAAA,IAAAC,KAAA;IAAAvD,eAAA,OAAAkD,UAAA;IACpE,IAAMM,cAAc,IAAAF,eAAA,GAAGJ,UAAU,CAAC9B,GAAG,CAACgC,gBAAgB,CAAC,cAAAE,eAAA,uBAAhCA,eAAA,CAAkCG,OAAO,CAAC,CAAC;IAClEF,KAAA,GAAAlD,UAAA,OAAA6C,UAAA,GAAME,gBAAgB,EAAE;MAAEM,EAAE,EAAEC;IAAS,CAAC;IAxE1C;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAfEpC,eAAA,CAAAgC,KAAA;IAkBA;AACF;AACA;AACA;AACA;AACA;AACA;IANEhC,eAAA,CAAAgC,KAAA;IASA;AACF;AACA;IAFEhC,eAAA,CAAAgC,KAAA;IAKA;AACF;AACA;IAFEhC,eAAA,CAAAgC,KAAA;IA0CE,IAAMK,KAAK,GAAGC,YAAY,CAACT,gBAAgB,EAAEC,MAAM,aAANA,MAA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","ignoreList":[]}