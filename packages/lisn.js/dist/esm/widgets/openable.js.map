{"version":3,"file":"openable.js","names":["MC","MH","settings","disableInitialTransition","hasClass","addClasses","addClassesNow","removeClasses","removeClassesNow","getData","getBooleanData","setData","setDataNow","setBooleanData","setBooleanDataNow","unsetBooleanData","unsetBooleanDataNow","delData","delDataNow","setHasModal","delHasModal","getStyleProp","setStyleProp","delStyleProp","getComputedStyleProp","getMaxTransitionDuration","wrapElement","wrapElementNow","moveElement","moveElementNow","replaceElementNow","getOrAssignID","waitForInteractive","waitForMeasureTime","waitForMutateTime","isInlineTag","addEventListenerTo","removeEventListenerFrom","logError","keyWithMaxVal","toBoolean","toArrayIfSingle","waitForDelay","isValidPosition","isValidTwoFoldPosition","fetchViewportSize","validateStrList","validateBoolean","validateBooleanOrString","validateString","wrapCallback","SizeWatcher","ViewWatcher","Widget","registerWidget","getWidgetConfig","getDefaultWidgetSelector","registerOpenable","name","newOpenable","configValidator","element","config","isHTMLElement","Openable","get","usageError","_instances$get","instances","constructor","properties","_defineProperty","isModal","isOffcanvas","openCallbacks","newSet","closeCallbacks","isOpen","open","isDisabled","callback","invoke","root","PREFIX_IS_OPEN","close","scrollWrapperToTop","elScrollTo","outerWrapper","top","left","S_TOGGLE","onOpen","handler","add","onClose","getRoot","getContainer","container","getTriggers","triggers","keys","getTriggerConfigs","newMap","entries","onDestroy","clear","setupElements","Collapsible","register","WIDGET_NAME_COLLAPSIBLE","el","collapsibleConfigValidator","_config$autoClose","_config$reverse","isHorizontal","horizontal","orientation","S_HORIZONTAL","S_VERTICAL","onSetup","trigger","triggerConfig","insertCollapsibleIcon","PREFIX_ORIENTATION","id","className","autoClose","closeButton","wrapTriggers","wrapper","childrenOf","PREFIX_REVERSE","reverse","disableTransitionTimer","tempEnableTransition","PREFIX_TRANSITION_DISABLE","clearTimer","transitionDuration","setTimer","peek","peekSize","isString","VAR_PEEK_SIZE","PREFIX_PEEK","updateWidth","width","S_WIDTH","VAR_JS_COLLAPSIBLE_WIDTH","then","Popup","WIDGET_NAME_POPUP","popupConfigValidator","_config$autoClose2","_config$closeButton","position","S_AUTO","PREFIX_PLACE","contentSize","containerView","promiseAll","reuse","fetchCurrentSize","fetchCurrentView","placement","fetchPopupPlacement","Modal","WIDGET_NAME_MODAL","modalConfigValidator","_config$autoClose3","_config$closeButton2","Offcanvas","WIDGET_NAME_OFFCANVAS","offcanvasConfigValidator","_config$autoClose4","_config$closeButton3","S_RIGHT","newWeakMap","PREFIX_CLOSE_BTN","prefixName","S_REVERSE","PREFIX_OPENS_ON_HOVER","PREFIX_LINE","PREFIX_ICON_POSITION","PREFIX_TRIGGER_ICON","PREFIX_ICON_WRAPPER","S_ARIA_EXPANDED","ARIA_PREFIX","S_ARIA_MODAL","prefixCssVar","prefixCssJsVar","MIN_CLICK_TIME_AFTER_HOVER_OPEN","S_ARROW_UP","S_ARROW","S_UP","S_ARROW_DOWN","S_DOWN","S_ARROW_LEFT","S_LEFT","S_ARROW_RIGHT","ARROW_TYPES","ICON_CLOSED_TYPES","ICON_OPEN_TYPES","isValidIconClosed","value","includes","isValidIconOpen","triggerConfigValidator","key","icon","iconClosed","iconOpen","hover","v","getPrefixedNames","pref","_root","_overlay","_innerWrapper","_outerWrapper","_content","_container","_trigger","_containerForSelect","_triggerForSelect","_contentId","findContainer","content","cls","_currWidget$getRoot","currWidget","childRef","parentOf","closest","findTriggers","prefixedNames","getTriggerSelector","suffix","contentId","docQuerySelectorAll","arrayFrom","querySelectorAll","filter","t","contains","getTriggersFrom","inputTriggers","triggerMap","addTrigger","createElement","tagName","ignoreMove","set","isArray","isInstanceOf","Map","widget","_properties$wrapTrigg","innerWrapper","placeholder","overlay","to","domID","setAttr","S_ROLE","closeBtn","createButton","S_CLICK","lightThemeClassName","darkThemeClassName","elements","unsetAttr","delAttr","S_ARIA_CONTROLS","deleteKey","destroy","isDestroyed","getBody","S_HOVER","setupListeners","doc","getDoc","hoverTimeOpened","isPointerOver","activeTrigger","isTrigger","shouldPreventDefault","_triggers$get$prevent","_triggers$get","preventDefault","usesHover","_triggers$get2","usesAutoClose","_ref","_triggers$get3","toggleTrigger","event","openIt","currentTargetOf","isElement","timeSince","S_POINTERENTER","setIsPointerOver","S_POINTERLEAVE","pointerLeft","unsetIsPointerOver","isTouchPointerEvent","pointerEntered","timeNow","closeIfEscape","closeIfClickOutside","target","targetOf","maybeSetupAutoCloseListeners","remove","addOrRemove","setupOrCleanup","widgetConfig","_triggerConfig$icon","_triggerConfig$iconCl","_triggerConfig$iconOp","iconPosition","l","line","containerPosition","relative","containerTop","S_TOP","containerBottom","S_BOTTOM","containerLeft","containerRight","containerHMiddle","hMiddle","containerVMiddle","vMiddle","vpSize","popupWidth","border","popupHeight","S_HEIGHT","placementVars","bottom","right","undefined","finalPlacement","alignmentVars","middle","min","alignment"],"sources":["../../../src/ts/widgets/openable.ts"],"sourcesContent":["/**\n * @module Widgets\n */\n\nimport * as MC from \"@lisn/globals/minification-constants\";\nimport * as MH from \"@lisn/globals/minification-helpers\";\n\nimport { settings } from \"@lisn/globals/settings\";\n\nimport { XYDirection, Position } from \"@lisn/globals/types\";\n\nimport {\n  disableInitialTransition,\n  hasClass,\n  addClasses,\n  addClassesNow,\n  removeClasses,\n  removeClassesNow,\n  getData,\n  getBooleanData,\n  setData,\n  setDataNow,\n  setBooleanData,\n  setBooleanDataNow,\n  unsetBooleanData,\n  unsetBooleanDataNow,\n  delData,\n  delDataNow,\n  setHasModal,\n  delHasModal,\n  getStyleProp,\n  setStyleProp,\n  delStyleProp,\n  getComputedStyleProp,\n  getMaxTransitionDuration,\n} from \"@lisn/utils/css-alter\";\nimport {\n  wrapElement,\n  wrapElementNow,\n  moveElement,\n  moveElementNow,\n  replaceElementNow,\n  getOrAssignID,\n} from \"@lisn/utils/dom-alter\";\nimport { waitForInteractive } from \"@lisn/utils/dom-events\";\nimport {\n  waitForMeasureTime,\n  waitForMutateTime,\n} from \"@lisn/utils/dom-optimize\";\nimport { isInlineTag } from \"@lisn/utils/dom-query\";\nimport { addEventListenerTo, removeEventListenerFrom } from \"@lisn/utils/event\";\nimport { logError } from \"@lisn/utils/log\";\nimport { keyWithMaxVal } from \"@lisn/utils/math\";\nimport { toBoolean, toArrayIfSingle } from \"@lisn/utils/misc\";\nimport { waitForDelay } from \"@lisn/utils/tasks\";\nimport { isValidPosition, isValidTwoFoldPosition } from \"@lisn/utils/position\";\nimport { fetchViewportSize } from \"@lisn/utils/size\";\nimport {\n  validateStrList,\n  validateBoolean,\n  validateBooleanOrString,\n  validateString,\n} from \"@lisn/utils/validation\";\n\nimport { wrapCallback } from \"@lisn/modules/callback\";\n\nimport { SizeWatcher, SizeData } from \"@lisn/watchers/size-watcher\";\nimport { ViewWatcher, ViewData } from \"@lisn/watchers/view-watcher\";\n\nimport {\n  Widget,\n  WidgetHandler,\n  WidgetCallback,\n  WidgetConfigValidator,\n  WidgetConfigValidatorObject,\n  registerWidget,\n  getWidgetConfig,\n  getDefaultWidgetSelector,\n} from \"@lisn/widgets/widget\";\n\n/* ********************\n * Base Openable\n * ********************/\n\nexport type OpenableCreateFn<Config extends Record<string, unknown>> = (\n  element: HTMLElement,\n  config?: Config,\n) => Openable;\n\n/**\n * Enables automatic setting up of an {@link Openable} widget from an\n * elements matching its content element selector (`[data-lisn-<name>]` or\n * `.lisn-<name>`).\n *\n * The name you specify here should generally be the same name you pass in\n * {@link OpenableProperties.name | options.name} to the\n * {@link Openable.constructor} but it does not need to be the same.\n *\n * @param name            The name of the openable. Should be in kebab-case.\n * @param newOpenable     Called for every element matching the selector.\n * @param configValidator A validator object, or a function that returns such\n *                        an object, for all options supported by the widget.\n *\n * @see {@link registerWidget}\n */\nexport const registerOpenable = <Config extends Record<string, unknown>>(\n  name: string,\n  newOpenable: OpenableCreateFn<Config>,\n  configValidator?: null | WidgetConfigValidator<Config>,\n) => {\n  registerWidget(\n    name,\n    (element, config) => {\n      if (MH.isHTMLElement(element)) {\n        if (!Openable.get(element)) {\n          return newOpenable(element, config);\n        }\n      } else {\n        logError(MH.usageError(\"Openable widget supports only HTMLElement\"));\n      }\n\n      return null;\n    },\n    configValidator,\n  );\n};\n\n/**\n * {@link Openable} is an abstract base class. You should not directly\n * instantiate it but can inherit it to create your own custom openable widget.\n *\n * **IMPORTANT:** You should not instantiate more than one {@link Openable}\n * widget, regardless of type, on a given element. Use {@link Openable.get} to\n * get an existing instance if any. If there is already an {@link Openable}\n * widget of any type on this element, it will be destroyed!\n *\n * @see {@link registerOpenable}\n */\nexport abstract class Openable extends Widget {\n  /**\n   * Opens the widget unless it is disabled.\n   */\n  readonly open: () => Promise<void>;\n\n  /**\n   * Closes the widget.\n   */\n  readonly close: () => Promise<void>;\n\n  /**\n   * Closes the widget if it is open, or opens it if it is closed (unless\n   * it is disabled).\n   */\n  readonly toggle: () => Promise<void>;\n\n  /**\n   * The given handler will be called when the widget is open.\n   *\n   * If it returns a promise, it will be awaited upon.\n   */\n  readonly onOpen: (handler: WidgetHandler) => void;\n\n  /**\n   * The given handler will be called when the widget is closed.\n   *\n   * If it returns a promise, it will be awaited upon.\n   */\n  readonly onClose: (handler: WidgetHandler) => void;\n\n  /**\n   * Returns true if the widget is currently open.\n   */\n  readonly isOpen: () => boolean;\n\n  /**\n   * Returns the root element created by us that wraps the original content\n   * element passed to the constructor. It is located in the content element's\n   * original place.\n   */\n  readonly getRoot: () => HTMLElement;\n\n  /**\n   * Returns the element that was found to be the container. It is the closest\n   * ancestor that has a `lisn-collapsible-container` class, or if no such\n   * ancestor then the immediate parent of the content element.\n   */\n  readonly getContainer: () => HTMLElement | null;\n\n  /**\n   * Returns the trigger elements, if any. Note that these may be wrappers\n   * around the original triggers passed.\n   */\n  readonly getTriggers: () => Element[];\n\n  /**\n   * Returns the trigger elements along with their configuration.\n   */\n  readonly getTriggerConfigs: () => Map<Element, OpenableTriggerConfig>;\n\n  /**\n   * Retrieve an existing widget by its content element or any of its triggers.\n   *\n   * If the element is already part of a configured {@link Openable} widget,\n   * the widget instance is returned. Otherwise `null`.\n   *\n   * Note that trigger elements are not guaranteed to be unique among openable\n   * widgets as the same element can be a trigger for multiple such widgets. If\n   * the element you pass is a trigger, then the last openable widget that was\n   * created for it will be returned.\n   */\n  static get(element: Element): Openable | null {\n    // We manage the instances here since we also map associated elements and\n    // not just the main content element that created the widget.\n    return instances.get(element) ?? null;\n  }\n\n  constructor(element: HTMLElement, properties: OpenableProperties) {\n    super(element);\n\n    const { isModal, isOffcanvas } = properties;\n\n    const openCallbacks = MH.newSet<WidgetCallback>();\n    const closeCallbacks = MH.newSet<WidgetCallback>();\n\n    let isOpen = false;\n\n    // ----------\n\n    const open = async () => {\n      if (this.isDisabled() || isOpen) {\n        return;\n      }\n\n      isOpen = true;\n\n      for (const callback of openCallbacks) {\n        await callback.invoke(this);\n      }\n\n      if (isModal) {\n        setHasModal();\n      }\n\n      await setBooleanData(root, PREFIX_IS_OPEN);\n    };\n\n    // ----------\n\n    const close = async () => {\n      if (this.isDisabled() || !isOpen) {\n        return;\n      }\n\n      isOpen = false;\n\n      for (const callback of closeCallbacks) {\n        await callback.invoke(this);\n      }\n\n      if (isModal) {\n        delHasModal();\n      }\n\n      if (isOffcanvas) {\n        scrollWrapperToTop(); // no need to await\n      }\n\n      await unsetBooleanData(root, PREFIX_IS_OPEN);\n    };\n\n    // ----------\n\n    const scrollWrapperToTop = async () => {\n      // Wait a bit before scrolling since the hiding of the element is animated.\n      // Assume no more than 1s animation time.\n      await waitForDelay(1000);\n      await waitForMeasureTime();\n      MH.elScrollTo(outerWrapper, {\n        top: 0,\n        left: 0,\n      });\n    };\n\n    // --------------------\n\n    this.open = open;\n    this.close = close;\n    this[MC.S_TOGGLE] = () => (isOpen ? close() : open());\n    this.onOpen = (handler) => openCallbacks.add(wrapCallback(handler));\n    this.onClose = (handler) => closeCallbacks.add(wrapCallback(handler));\n    this.isOpen = () => isOpen;\n    this.getRoot = () => root;\n    this.getContainer = () => container;\n    this.getTriggers = () => [...triggers.keys()];\n    this.getTriggerConfigs = () => MH.newMap([...triggers.entries()]);\n\n    this.onDestroy(() => {\n      openCallbacks.clear();\n      closeCallbacks.clear();\n    });\n\n    const { root, container, triggers, outerWrapper } = setupElements(\n      this,\n      element,\n      properties,\n    );\n  }\n}\n\n/**\n * Per-trigger based configuration. Can either be given as an object as the\n * value of the {@link OpenableProperties.triggers} map, or it can be set as a\n * string configuration in the `data-lisn-<name>-trigger` data attribute. See\n * {@link getWidgetConfig} for the syntax.\n *\n * @example\n * ```html\n * <div data-lisn-collapsible-trigger=\"auto-close\n *                                     | icon=right\n *                                     | icon-closed=arrow-down\n *                                     | icon-open=x\"\n * ></div>\n * ```\n *\n * @interface\n */\nexport type OpenableTriggerConfig = {\n  /**\n   * The DOM ID to set on the trigger. Will result in the trigger element, which\n   * could be a wrapper around the original element (as in the case of {@link\n   * Collapsible} you passed, getting this ID.\n   *\n   * **IMPORTANT:** If the trigger element already has an ID and is not being\n   * wrapped, then this will override the ID and it _won't_ be restored on destroy.\n   *\n   * @defaultValue undefined\n   */\n  id?: string;\n\n  /**\n   * Class name(s) for the trigger. Will result in the trigger element, which\n   * could be a wrapper around the original element you passed, getting these\n   * classes.\n   *\n   * @defaultValue undefined\n   */\n  className?: string[] | string;\n\n  /**\n   * Override the widget's {@link OpenableProperties.autoClose} for this trigger.\n   *\n   * @defaultValue undefined // Widget default\n   */\n  autoClose?: boolean;\n\n  /**\n   * Open the openable when this trigger is hovered.\n   *\n   * If the device is touch and {@link OpenableProperties.autoClose} is enabled,\n   * the widget will be closed shortly after the pointer leaves both the\n   * trigger and the root element.\n   *\n   * @defaultValue false\n   */\n  hover?: boolean;\n\n  /**\n   * Whether to prevent default click action.\n   *\n   * @defaultValue true\n   */\n  preventDefault?: boolean;\n\n  /**\n   * Override the widget's {@link CollapsibleConfig.icon} for this trigger.\n   *\n   * Currently only relevant for {@link Collapsible}s.\n   *\n   * @defaultValue undefined // Widget default\n   */\n  icon?: false | Position;\n\n  /**\n   * Override the widget's {@link CollapsibleConfig.iconClosed} for this\n   * trigger.\n   *\n   * Currently only relevant for {@link Collapsible}s.\n   *\n   * @defaultValue undefined // Widget default\n   */\n  iconClosed?: \"plus\" | `arrow-${XYDirection}`;\n\n  /**\n   * Override the widget's {@link CollapsibleConfig.iconOpen} for this\n   * trigger.\n   *\n   * Currently only relevant for {@link Collapsible}s.\n   *\n   * @defaultValue undefined // Widget default\n   */\n  iconOpen?: \"minus\" | \"x\" | `arrow-${XYDirection}`;\n};\n\n/**\n * @interface\n */\nexport type OpenableProperties = {\n  /**\n   * The name of the _type_ of the openable. Will set the class prefix to\n   * `lisn-<name>`.\n   */\n  name: string;\n\n  /**\n   * The DOM ID to set on the openable. Will result in the top-level root\n   * element that's created by us getting this ID.\n   *\n   * @defaultValue undefined\n   */\n  id?: string;\n\n  /**\n   * Class name(s) or a list of class names to set on the openable. Will result\n   * in the top-level root element that's created by us getting these classes.\n   *\n   * @defaultValue undefined\n   */\n  className?: string[] | string;\n\n  /**\n   * Whether to auto-close the widget on clicking outside the content element\n   * or on pressing Escape key. Furthermore, if any trigger opens the widget on\n   * {@link OpenableTriggerConfig.hover}, the widget will be closed when the\n   * pointer leaves both the trigger and the root.\n   *\n   * This is true by default for {@link Popup}, {@link Modal} and {@link Offcanvas}.\n   */\n  autoClose: boolean;\n\n  /**\n   * If true, then while the widget is open, the `document.body` will be set to\n   * `overflow: hidden`.\n   *\n   * This is true for {@link Modal}.\n   */\n  isModal: boolean;\n\n  /**\n   * If true, then the content element is assumed to be possibly scrollable and\n   * will be scrolled back to its top after the widget is closed.\n   *\n   * This is true for {@link Modal} and {@link Offcanvas}.\n   */\n  isOffcanvas: boolean;\n\n  /**\n   * Add a close button at the top right.\n   *\n   * This is true by default for {@link Modal} and {@link Offcanvas}.\n   */\n  closeButton: boolean;\n\n  /**\n   * The elements that open the widget when clicked on. You can also pass a map\n   * whose keys are the elements and values are {@link OpenableTriggerConfig}\n   * objects.\n   *\n   * If not given, then the elements that will be used as triggers are\n   * discovered in the following way (`<name>` is what is given as\n   * {@link name}):\n   * 1. If the content element has a `data-lisn-<name>-content-id` attribute,\n   *    then it must be a unique (for the current page) ID. In this case, the\n   *    trigger elements will be any element in the document that has a\n   *    `lisn-<name>-trigger` class or `data-lisn-<name>-trigger` attribute\n   *    and the same `data-lisn-<name>-content-id` attribute.\n   * 2. Otherwise, the closest ancestor that has a `lisn-<name>-container`\n   *    class, or if no such ancestor then the immediate parent of the content\n   *    element, is searched for any elements that have a `lisn-<name>-trigger`\n   *    class or `data-lisn-<name>-trigger` attribute and that do _not_ have a\n   *    `data-lisn-<name>-content-id` attribute, and that are _not_ children of\n   *    the content element.\n   *\n   * @defaultValue undefined\n   */\n  triggers?: Element[] | Map<Element, OpenableTriggerConfig | null>;\n\n  /**\n   * Whether to wrap each trigger in a new element.\n   *\n   * @defaultValue false\n   */\n  wrapTriggers?: boolean;\n\n  /**\n   * Hook to run once the widget is fully setup (which happens asynchronously).\n   *\n   * It is called during \"mutate time\". See {@link waitForMutateTime}.\n   *\n   * @defaultValue undefined\n   */\n  onSetup?: () => void;\n};\n\n/* ********************\n * Collapsible\n * ********************/\n\n/**\n * Configures the given element as a {@link Collapsible} widget.\n *\n * The Collapsible widget sets up the given element to be collapsed and\n * expanded upon activation. Activation can be done manually by calling\n * {@link open} or when clicking on any of the given\n * {@link CollapsibleConfig.triggers | triggers}.\n *\n * **NOTE:** The Collapsible widget always wraps each trigger element in\n * another element in order to allow positioning the icon, if any.\n *\n * **IMPORTANT:** You should not instantiate more than one {@link Openable}\n * widget, regardless of type, on a given element. Use {@link Openable.get} to\n * get an existing instance if any. If there is already an {@link Openable}\n * widget of any type on this element, it will be destroyed!\n *\n * -----\n *\n * You can use the following dynamic attributes or CSS properties in your\n * stylesheet:\n *\n * The following dynamic attributes are set on the root element that is created\n * by LISN and has a class `lisn-collapsible__root`:\n * - `data-lisn-is-open`: `\"true\"` or `\"false\"`\n * - `data-lisn-reverse`: `\"true\"` or `\"false\"`\n * - `data-lisn-orientation`: `\"horizontal\"` or `\"vertical\"`\n *\n * The following dynamic attributes are set on each trigger:\n * - `data-lisn-opens-on-hover: `\"true\"` or `\"false\"`\n *\n * -----\n *\n * To use with auto-widgets (HTML API) (see\n * {@link Settings.settings.autoWidgets | settings.autoWidgets}), the following\n * CSS classes or data attributes are recognized:\n * - `lisn-collapsible` class or `data-lisn-collapsible` attribute set on the\n *   element that holds the content of the collapsible\n * - `lisn-collapsible-trigger` class or `data-lisn-collapsible-trigger`\n *   attribute set on elements that should act as the triggers.\n *   If using a data attribute, you can configure the trigger via the value\n *   with a similar syntax to the configuration of the openable widget. For\n *   example:\n *   - Set the attribute to `\"hover\"` in order to have this trigger open the\n *     collapsible on hover _in addition to click_.\n *   - Set the attribute to `\"hover|auto-close\"` in order to have this trigger\n *     open the collapsible on hover but and override\n *     {@link CollapsibleConfig.autoClose} with true.\n *\n * When using auto-widgets, the elements that will be used as triggers are\n * discovered in the following way:\n * 1. If the content element has a `data-lisn-collapsible-content-id` attribute,\n *    then it must be a unique (for the current page) ID. In this case, the\n *    trigger elements will be any element in the document that has a\n *    `lisn-collapsible-trigger` class or `data-lisn-collapsible-trigger`\n *    attribute and the same `data-lisn-collapsible-content-id` attribute.\n * 2. Otherwise, the closest ancestor that has a `lisn-collapsible-container`\n *    class, or if no such ancestor then the immediate parent of the content\n *    element, is searched for any elements that have a\n *    `lisn-collapsible-trigger` class or `data-lisn-collapsible-trigger`\n *    attribute and that do _not_ have a `data-lisn-collapsible-content-id`\n *    attribute, and that are _not_ children of the content element.\n *\n * See below examples for what values you can use set for the data attributes\n * in order to modify the configuration of the automatically created widget.\n *\n * @example\n * This defines a simple collapsible with one trigger.\n *\n * ```html\n * <div>\n *   <div class=\"lisn-collapsible-trigger\">Expand</div>\n *   <div class=\"lisn-collapsible\">\n *     Some long content here...\n *   </div>\n * </div>\n * ```\n *\n * @example\n * This defines a collapsible that is partially visible when collapsed, and\n * where the trigger is in a different parent to the content.\n *\n * ```html\n * <div>\n *   <div data-lisn-collapsible-content-id=\"readmore\"\n *        data-lisn-collapsible=\"peek\">\n *     <p>\n *       Lorem ipsum odor amet, consectetuer adipiscing elit. Etiam duis\n *       viverra faucibus facilisis luctus. Nunc tellus turpis facilisi dapibus\n *       aliquet turpis. Diam potenti egestas dolor auctor nostra vestibulum.\n *       Tempus auctor quis turpis; pulvinar ante ultrices. Netus morbi\n *       imperdiet volutpat litora tellus turpis a. Sociosqu interdum sodales\n *       sapien nulla aptent pellentesque praesent. Senectus magnis\n *       pellentesque; dis porta justo habitant.\n *     </p>\n *\n *     <p>\n *       Imperdiet placerat habitant tristique turpis habitasse ligula pretium\n *       vehicula. Mauris molestie lectus leo aliquam condimentum elit fermentum\n *       tempus nisi. Eget mi vestibulum quisque enim himenaeos. Odio nascetur\n *       vel congue vivamus eleifend ut nascetur. Ultrices quisque non dictumst\n *       risus libero varius tincidunt vel. Suscipit netus maecenas imperdiet\n *       elementum donec maximus suspendisse luctus. Eu velit semper urna sem\n *       ullamcorper nisl turpis hendrerit. Gravida commodo nisl malesuada nibh\n *       ultricies scelerisque hendrerit tempus vehicula. Risus eleifend eros\n *       aliquam turpis elit ridiculus est class.\n *     </p>\n *   </div>\n * </div>\n *\n * <div>\n *   <div data-lisn-collapsible-content-id=\"readmore\"\n *        class=\"lisn-collapsible-trigger\">\n *     Read more\n *   </div>\n * </div>\n * ```\n *\n * @example\n * As above, but with all other possible configuration settings set explicitly.\n *\n * ```html\n * <div>\n *   <div data-lisn-collapsible-content-id=\"readmore\"\n *        data-lisn-collapsible=\"peek=50px\n *                               | horizontal=false\n *                               | reverse=false\n *                               | auto-close\n *                               | icon=right\n *                               | icon-closed=arrow-up\"\n *                               | icon-open=arrow-down\">\n *     <p>\n *       Lorem ipsum odor amet, consectetuer adipiscing elit. Etiam duis\n *       viverra faucibus facilisis luctus. Nunc tellus turpis facilisi dapibus\n *       aliquet turpis. Diam potenti egestas dolor auctor nostra vestibulum.\n *       Tempus auctor quis turpis; pulvinar ante ultrices. Netus morbi\n *       imperdiet volutpat litora tellus turpis a. Sociosqu interdum sodales\n *       sapien nulla aptent pellentesque praesent. Senectus magnis\n *       pellentesque; dis porta justo habitant.\n *     </p>\n *\n *     <p>\n *       Imperdiet placerat habitant tristique turpis habitasse ligula pretium\n *       vehicula. Mauris molestie lectus leo aliquam condimentum elit fermentum\n *       tempus nisi. Eget mi vestibulum quisque enim himenaeos. Odio nascetur\n *       vel congue vivamus eleifend ut nascetur. Ultrices quisque non dictumst\n *       risus libero varius tincidunt vel. Suscipit netus maecenas imperdiet\n *       elementum donec maximus suspendisse luctus. Eu velit semper urna sem\n *       ullamcorper nisl turpis hendrerit. Gravida commodo nisl malesuada nibh\n *       ultricies scelerisque hendrerit tempus vehicula. Risus eleifend eros\n *       aliquam turpis elit ridiculus est class.\n *     </p>\n *   </div>\n * </div>\n *\n * <div>\n *   <div data-lisn-collapsible-content-id=\"readmore\"\n *        class=\"lisn-collapsible-trigger\">\n *     Read more\n *   </div>\n * </div>\n * ```\n */\nexport class Collapsible extends Openable {\n  static register() {\n    registerOpenable(\n      WIDGET_NAME_COLLAPSIBLE,\n      (el, config) => new Collapsible(el, config),\n      collapsibleConfigValidator,\n    );\n  }\n\n  constructor(element: HTMLElement, config?: CollapsibleConfig) {\n    const isHorizontal = config?.horizontal;\n    const orientation = isHorizontal ? MC.S_HORIZONTAL : MC.S_VERTICAL;\n\n    const onSetup = () => {\n      // The triggers here are wrappers around the original which will be\n      // replaced by the original on destroy, so no need to clean up this.\n      for (const [\n        trigger,\n        triggerConfig,\n      ] of this.getTriggerConfigs().entries()) {\n        insertCollapsibleIcon(trigger, triggerConfig, this, config);\n        setDataNow(trigger, MC.PREFIX_ORIENTATION, orientation);\n      }\n    };\n\n    super(element, {\n      name: WIDGET_NAME_COLLAPSIBLE,\n      id: config?.id,\n      className: config?.className,\n      autoClose: config?.autoClose ?? false,\n      isModal: false,\n      isOffcanvas: false,\n      closeButton: false,\n      triggers: config?.triggers,\n      wrapTriggers: true,\n      onSetup,\n    });\n\n    const root = this.getRoot();\n    const wrapper = MH.childrenOf(root)[0];\n\n    setData(root, MC.PREFIX_ORIENTATION, orientation);\n    setBooleanData(root, PREFIX_REVERSE, config?.reverse ?? false);\n\n    // -------------------- Transitions\n    disableInitialTransition(element, 100);\n    disableInitialTransition(root, 100);\n    disableInitialTransition(wrapper, 100);\n\n    let disableTransitionTimer: ReturnType<typeof setTimeout> | null = null;\n    const tempEnableTransition = async () => {\n      await removeClasses(root, MC.PREFIX_TRANSITION_DISABLE);\n      await removeClasses(wrapper, MC.PREFIX_TRANSITION_DISABLE);\n\n      if (disableTransitionTimer) {\n        MH.clearTimer(disableTransitionTimer);\n      }\n\n      const transitionDuration = await getMaxTransitionDuration(root);\n      disableTransitionTimer = MH.setTimer(() => {\n        if (this.isOpen()) {\n          addClasses(root, MC.PREFIX_TRANSITION_DISABLE);\n          addClasses(wrapper, MC.PREFIX_TRANSITION_DISABLE);\n          disableTransitionTimer = null;\n        }\n      }, transitionDuration);\n    };\n\n    // Disable transitions except during open/close, so that resizing the\n    // window for example doesn't result in lagging width/height transition.\n    this.onOpen(tempEnableTransition);\n    this.onClose(tempEnableTransition);\n\n    // -------------------- Peek\n    const peek = config?.peek;\n    if (peek) {\n      (async () => {\n        let peekSize: string | null = null;\n        if (MH.isString(peek)) {\n          peekSize = peek;\n        } else {\n          peekSize = await getStyleProp(element, VAR_PEEK_SIZE);\n        }\n\n        addClasses(root, PREFIX_PEEK);\n        if (peekSize) {\n          setStyleProp(root, VAR_PEEK_SIZE, peekSize);\n        }\n      })();\n    }\n\n    // -------------------- Width in horizontal mode\n    if (isHorizontal) {\n      const updateWidth = async () => {\n        const width = await getComputedStyleProp(root, MC.S_WIDTH);\n        await setStyleProp(element, VAR_JS_COLLAPSIBLE_WIDTH, width);\n      };\n\n      MH.setTimer(updateWidth);\n\n      // Save its current width so that if it contains text, it does not\n      // \"collapse\" and end up super tall.\n      this.onClose(updateWidth);\n\n      this.onOpen(async () => {\n        // Update the content width before opening.\n        await updateWidth();\n\n        // Delete the fixed width property soon after opening to allow it to\n        // resize again while it's open.\n        waitForDelay(2000).then(() => {\n          if (this.isOpen()) {\n            delStyleProp(element, VAR_JS_COLLAPSIBLE_WIDTH);\n          }\n        });\n      });\n    }\n  }\n}\n\n/**\n * @interface\n */\nexport type CollapsibleConfig = {\n  /**\n   * The DOM ID to set on the collapsible. Will result in the top-level root\n   * element that's created by us getting this ID.\n   *\n   * Note, this does not replace or affect the\n   * `data-lisn-collapsible-content-id` attribute used to link triggers to the\n   * collapsible.\n   *\n   * @defaultValue undefined\n   */\n  id?: string;\n\n  /**\n   * Class name(s) or a list of class names to set on the collapsible. Will\n   * result in the top-level root element that's created by us getting these\n   * classes.\n   *\n   * @defaultValue undefined\n   */\n  className?: string[] | string;\n\n  /**\n   * The elements that open the widget when clicked on. You can also pass a map\n   * whose keys are the elements and values are {@link OpenableTriggerConfig}\n   * objects.\n   *\n   * If not given, then the elements that will be used as triggers are\n   * discovered in the following way:\n   * 1. If the content element has a `data-lisn-collapsible-content-id`\n   *    attribute, then it must be a unique (for the current page) ID. In this\n   *    case, the trigger elements will be any element in the document that\n   *    has a `lisn-collapsible-trigger` class or\n   *    `data-lisn-collapsible-trigger` attribute and the same\n   *    `data-lisn-collapsible-content-id` attribute.\n   * 2. Otherwise, the closest ancestor that has a `lisn-collapsible-container`\n   *    class, or if no such ancestor then the immediate parent of the content\n   *    element, is searched for any elements that have a\n   *    `lisn-collapsible-trigger` class or `data-lisn-collapsible-trigger`\n   *    attribute and that do _not_ have a `data-lisn-collapsible-content-id`\n   *    attribute, and that are _not_ children of the content element.\n   *\n   * @defaultValue undefined\n   */\n  triggers?: Element[] | Map<Element, OpenableTriggerConfig | null>;\n\n  /**\n   * Open sideways (to the right) instead of downwards (default).\n   *\n   * **IMPORTANT:** In horizontal mode the width of the content element should\n   * not be set (or be `auto`), but you can use `min-width` or `max-width` in\n   * your CSS if needed.\n   *\n   * @defaultValue false\n   */\n  horizontal?: boolean;\n\n  /**\n   * Open to the left if horizontal or upwards if vertical.\n   *\n   * @defaultValue false\n   */\n  reverse?: boolean;\n\n  /**\n   * If not false, part of the content will be visible when the collapsible is\n   * closed. The value can be any valid CSS width specification.\n   *\n   * If you set this to `true`, then the size of the peek window will be\n   * dictated by CSS. By default the size is 100px, but you can change this by\n   * setting `--lisn-peek-size` CSS property on the content element or any of\n   * its ancestors.\n   *\n   * Otherwise, if the value is a string, it must be a CSS length including units.\n   *\n   * @defaultValue false\n   */\n  peek?: boolean | string;\n\n  /**\n   * Automatically close the collapsible when clicking outside it or pressing\n   * Escape. Furthermore, if any trigger opens the widget on\n   * {@link OpenableTriggerConfig.hover}, the widget will be closed when the\n   * pointer leaves both the trigger and the root.\n   *\n   * @defaultValue false\n   */\n  autoClose?: boolean;\n\n  /**\n   * Add an icon to each trigger.\n   *\n   * If set to something other than `false`, then by default the icon in the\n   * closed state is a plus (+) and in the open state it's a minus (-), but\n   * this can be configured with {@link iconClosed} and {@link iconOpen}.\n   *\n   * @defaultValue false\n   */\n  icon?: false | Position;\n\n  /**\n   * Set the type of icon used on the trigger(s) in the closed state.\n   *\n   * Note that {@link icon} must be set to something other than `false`.\n   *\n   * @defaultValue \"plus\"\n   */\n  iconClosed?: \"plus\" | `arrow-${XYDirection}`;\n\n  /**\n   * Set the type of icon used on the trigger(s) in the open state.\n   *\n   * Note that {@link icon} must be set to something other than `false`.\n   *\n   * @defaultValue \"minus\";\n   */\n  iconOpen?: \"minus\" | \"x\" | `arrow-${XYDirection}`;\n};\n\n/* ********************\n * Popup\n * ********************/\n\n/**\n * Configures the given element as a {@link Popup} widget.\n *\n * The Popup widget sets up the given element to be hidden and open in a\n * floating popup upon activation. Activation can be done manually by calling\n * {@link open} or when clicking on any of the given\n * {@link PopupConfig.triggers | triggers}.\n *\n * **IMPORTANT:** The popup is positioned absolutely in its container and the\n * position is relative to the container. The container gets `width:\n * fit-content` by default but you can override this in your CSS. The popup\n * also gets a configurable `min-width` set.\n *\n * **IMPORTANT:** You should not instantiate more than one {@link Openable}\n * widget, regardless of type, on a given element. Use {@link Openable.get} to\n * get an existing instance if any. If there is already an {@link Openable}\n * widget of any type on this element, it will be destroyed!\n *\n * -----\n *\n * You can use the following dynamic attributes or CSS properties in your\n * stylesheet:\n *\n * The following dynamic attributes are set on the root element that is created\n * by LISN and has a class `lisn-popup__root`:\n * - `data-lisn-is-open`: `\"true\"` or `\"false\"`\n * - `data-lisn-place`: the actual position (top, bottom, left, top-left, etc)\n *\n * The following dynamic attributes are set on each trigger:\n * - `data-lisn-opens-on-hover: `\"true\"` or `\"false\"`\n *\n * -----\n *\n * To use with auto-widgets (HTML API) (see\n * {@link Settings.settings.autoWidgets | settings.autoWidgets}), the following\n * CSS classes or data attributes are recognized:\n * - `lisn-popup` class or `data-lisn-popup` attribute set on the element that\n *   holds the content of the popup\n * - `lisn-popup-trigger` class or `data-lisn-popup-trigger`\n *   attribute set on elements that should act as the triggers.\n *   If using a data attribute, you can configure the trigger via the value\n *   with a similar syntax to the configuration of the openable widget. For\n *   example:\n *   - Set the attribute to `\"hover\"` in order to have this trigger open the\n *     popup on hover _in addition to click_.\n *   - Set the attribute to `\"hover|auto-close=false\"` in order to have this\n *     trigger open the popup on hover but and override\n *     {@link PopupConfig.autoClose} with true.\n *\n * When using auto-widgets, the elements that will be used as triggers are\n * discovered in the following way:\n * 1. If the content element has a `data-lisn-popup-content-id` attribute, then\n *    it must be a unique (for the current page) ID. In this case, the trigger\n *    elements will be any element in the document that has a\n *    `lisn-popup-trigger` class or `data-lisn-popup-trigger` attribute and the\n *    same `data-lisn-popup-content-id` attribute.\n * 2. Otherwise, the closest ancestor that has a `lisn-popup-container` class,\n *    or if no such ancestor then the immediate parent of the content element,\n *    is searched for any elements that have a `lisn-popup-trigger` class or\n *    `data-lisn-popup-trigger` attribute and that do _not_ have a\n *    `data-lisn-popup-content-id` attribute, and that are _not_ children of\n *    the content element.\n *\n * See below examples for what values you can use set for the data attributes\n * in order to modify the configuration of the automatically created widget.\n *\n * @example\n * This defines a simple popup with one trigger.\n *\n * ```html\n * <div>\n *   <div class=\"lisn-popup-trigger\">Open</div>\n *   <div class=\"lisn-popup\">\n *     Some content here...\n *   </div>\n * </div>\n * ```\n *\n * @example\n * This defines a popup that has a close button, and where the trigger is in a\n * different parent to the content.\n *\n * ```html\n * <div>\n *   <div data-lisn-popup-content-id=\"popup\"\n *        data-lisn-popup=\"close-button\">\n *     Lorem ipsum odor amet, consectetuer adipiscing elit. Etiam duis viverra\n *     faucibus facilisis luctus. Nunc tellus turpis facilisi dapibus aliquet\n *     turpis. Diam potenti egestas dolor auctor nostra vestibulum. Tempus\n *     auctor quis turpis; pulvinar ante ultrices. Netus morbi imperdiet\n *     volutpat litora tellus turpis a. Sociosqu interdum sodales sapien nulla\n *     aptent pellentesque praesent. Senectus magnis pellentesque; dis porta\n *     justo habitant.\n *   </div>\n * </div>\n *\n * <div>\n *   <div data-lisn-popup-content-id=\"popup\" class=\"lisn-popup-trigger\">\n *     Open\n *   </div>\n * </div>\n * ```\n *\n * @example\n * As above, but with all possible configuration settings set explicitly.\n *\n * ```html\n * <div>\n *   <div data-lisn-popup-content-id=\"popup\" class=\"lisn-popup-trigger\">\n *     Open\n *   </div>\n * </div>\n *\n * <div>\n *   <div data-lisn-popup-content-id=\"popup\"\n *        data-lisn-popup=\"close-button | position=bottom | auto-close=false\">\n *     Lorem ipsum odor amet, consectetuer adipiscing elit. Etiam duis viverra\n *     faucibus facilisis luctus. Nunc tellus turpis facilisi dapibus aliquet\n *     turpis. Diam potenti egestas dolor auctor nostra vestibulum. Tempus\n *     auctor quis turpis; pulvinar ante ultrices. Netus morbi imperdiet\n *     volutpat litora tellus turpis a. Sociosqu interdum sodales sapien nulla\n *     aptent pellentesque praesent. Senectus magnis pellentesque; dis porta\n *     justo habitant.\n *   </div>\n * </div>\n * ```\n */\nexport class Popup extends Openable {\n  static register() {\n    registerOpenable(\n      WIDGET_NAME_POPUP,\n      (el, config) => new Popup(el, config),\n      popupConfigValidator,\n    );\n  }\n\n  constructor(element: HTMLElement, config?: PopupConfig) {\n    super(element, {\n      name: WIDGET_NAME_POPUP,\n      id: config?.id,\n      className: config?.className,\n      autoClose: config?.autoClose ?? true,\n      isModal: false,\n      isOffcanvas: false,\n      closeButton: config?.closeButton ?? false,\n      triggers: config?.triggers,\n    });\n\n    const root = this.getRoot();\n    const container = this.getContainer();\n\n    const position = config?.position || S_AUTO;\n    if (position !== S_AUTO) {\n      setData(root, MC.PREFIX_PLACE, position);\n    }\n\n    if (container && position === S_AUTO) {\n      // Automatic position\n      this.onOpen(async () => {\n        const [contentSize, containerView] = await MH.promiseAll([\n          SizeWatcher.reuse().fetchCurrentSize(element),\n          ViewWatcher.reuse().fetchCurrentView(container),\n        ]);\n\n        const placement = await fetchPopupPlacement(contentSize, containerView);\n        if (placement) {\n          await setData(root, MC.PREFIX_PLACE, placement);\n        }\n      });\n    }\n  }\n}\n\n/**\n * @interface\n */\nexport type PopupConfig = {\n  /**\n   * The DOM ID to set on the popup. Will result in the top-level root element\n   * that's created by us getting this ID.\n   *\n   * Note, this does not replace or affect the `data-lisn-popup-content-id`\n   * attribute used to link triggers to the popup.\n   *\n   * @defaultValue undefined\n   */\n  id?: string;\n\n  /**\n   * Class name(s) or a list of class names to set on the popup. Will result in\n   * the top-level root element that's created by us getting these classes.\n   *\n   * @defaultValue undefined\n   */\n  className?: string[] | string;\n\n  /**\n   * The elements that open the widget when clicked on. You can also pass a map\n   * whose keys are the elements and values are {@link OpenableTriggerConfig}\n   * objects.\n   *\n   * If not given, then the elements that will be used as triggers are\n   * discovered in the following way:\n   * 1. If the content element has a `data-lisn-popup-content-id` attribute,\n   *    then it must be a unique (for the current page) ID. In this case, the\n   *    trigger elements will be any element in the document that has a\n   *    `lisn-popup-trigger` class or `data-lisn-popup-trigger` attribute and\n   *    the same `data-lisn-popup-content-id` attribute.\n   * 2. Otherwise, the closest ancestor that has a `lisn-popup-container` class,\n   *    or if no such ancestor then the immediate parent of the content\n   *    element, is searched for any elements that have a `lisn-popup-trigger`\n   *    class or `data-lisn-popup-trigger` attribute and that do _not_ have a\n   *    `data-lisn-popup-content-id` attribute, and that are _not_ children of\n   *    the content element.\n   *\n   * @defaultValue undefined\n   */\n  triggers?: Element[] | Map<Element, OpenableTriggerConfig | null>;\n\n  /**\n   * Add a close button at the top right.\n   *\n   * @defaultValue false\n   */\n  closeButton?: boolean;\n\n  /**\n   * Specify the popup position _relative to its container_. Supported\n   * positions include `\"top\"`, `\"bottom\"`, `\"left\"`, `\"right\" `(which result\n   * on the popup being placed on top, bottom, etc, but center-aligned), or\n   * `\"top-left\"`, `\"left-top\"`, etc, as well as `\"auto\"`. If set to `\"auto\"`,\n   * then popup position will be based on the container position within the\n   * viewport at the time it's open.\n   *\n   * @defaultValue \"auto\"\n   */\n  position?: Position | `${Position}-${Position}` | \"auto\";\n\n  /**\n   * Automatically close the popup when clicking outside it or pressing Escape.\n   * Furthermore, if any trigger opens the widget on\n   * {@link OpenableTriggerConfig.hover}, the widget will be closed when the\n   * pointer leaves both the trigger and the root.\n   *\n   * @defaultValue true\n   */\n  autoClose?: boolean;\n};\n\n/* ********************\n * Modal\n * ********************/\n\n/**\n * Configures the given element as a {@link Modal} widget.\n *\n * The Modal widget sets up the given element to be hidden and open in a fixed\n * full-screen modal popup upon activation. Activation can be done manually by\n * calling {@link open} or when clicking on any of the given\n * {@link ModalConfig.triggers | triggers}.\n *\n * **IMPORTANT:** You should not instantiate more than one {@link Openable}\n * widget, regardless of type, on a given element. Use {@link Openable.get} to\n * get an existing instance if any. If there is already an {@link Openable}\n * widget of any type on this element, it will be destroyed!\n *\n * -----\n *\n * You can use the following dynamic attributes or CSS properties in your\n * stylesheet:\n *\n * The following dynamic attributes are set on the root element that is created\n * by LISN and has a class `lisn-modal__root`:\n * - `data-lisn-is-open`: `\"true\"` or `\"false\"`\n *\n * The following dynamic attributes are set on each trigger:\n * - `data-lisn-opens-on-hover: `\"true\"` or `\"false\"`\n *\n * -----\n *\n * To use with auto-widgets (HTML API) (see\n * {@link Settings.settings.autoWidgets | settings.autoWidgets}), the following\n * CSS classes or data attributes are recognized:\n * - `lisn-modal` class or `data-lisn-modal` attribute set on the element that\n *   holds the content of the modal\n * - `lisn-modal-trigger` class or `data-lisn-modal-trigger`\n *   attribute set on elements that should act as the triggers.\n *   If using a data attribute, you can configure the trigger via the value\n *   with a similar syntax to the configuration of the openable widget. For\n *   example:\n *   - Set the attribute to `\"hover\"` in order to have this trigger open the\n *     modal on hover _in addition to click_.\n *   - Set the attribute to `\"hover|auto-close=false\"` in order to have this\n *     trigger open the modal on hover but and override\n *     {@link ModalConfig.autoClose} with true.\n *\n * When using auto-widgets, the elements that will be used as triggers are\n * discovered in the following way:\n * 1. If the content element has a `data-lisn-modal-content-id` attribute, then\n *    it must be a unique (for the current page) ID. In this case, the trigger\n *    elements will be any element in the document that has a\n *    `lisn-modal-trigger` class or `data-lisn-modal-trigger` attribute and the\n *    same `data-lisn-modal-content-id` attribute.\n * 2. Otherwise, the closest ancestor that has a `lisn-modal-container` class,\n *    or if no such ancestor then the immediate parent of the content element,\n *    is searched for any elements that have a `lisn-modal-trigger` class or\n *    `data-lisn-modal-trigger` attribute and that do _not_ have a\n *    `data-lisn-modal-content-id` attribute, and that are _not_ children of\n *    the content element.\n *\n * See below examples for what values you can use set for the data attributes\n * in order to modify the configuration of the automatically created widget.\n *\n * @example\n * This defines a simple modal with one trigger.\n *\n * ```html\n * <div>\n *   <div class=\"lisn-modal-trigger\">Open</div>\n *   <div class=\"lisn-modal\">\n *     Some content here...\n *   </div>\n * </div>\n * ```\n *\n * @example\n * This defines a modal that doesn't automatically close on click outside or\n * Escape and, and that has several triggers in a different parent to the\n * content.\n *\n * ```html\n * <div>\n *   <div data-lisn-modal-content-id=\"modal\"\n *        data-lisn-modal=\"auto-close=false\">\n *     Lorem ipsum odor amet, consectetuer adipiscing elit. Etiam duis viverra\n *     faucibus facilisis luctus. Nunc tellus turpis facilisi dapibus aliquet\n *     turpis. Diam potenti egestas dolor auctor nostra vestibulum. Tempus\n *     auctor quis turpis; pulvinar ante ultrices. Netus morbi imperdiet\n *     volutpat litora tellus turpis a. Sociosqu interdum sodales sapien nulla\n *     aptent pellentesque praesent. Senectus magnis pellentesque; dis porta\n *     justo habitant.\n *   </div>\n * </div>\n *\n * <div>\n *   <div data-lisn-modal-content-id=\"modal\" class=\"lisn-modal-trigger\">\n *     Open\n *   </div>\n * </div>\n *\n * <div>\n *   <div data-lisn-modal-content-id=\"modal\" class=\"lisn-modal-trigger\">\n *     Another trigger\n *   </div>\n * </div>\n * ```\n *\n * @example\n * As above, but with all possible configuration settings set explicitly.\n *\n * ```html\n * <div>\n *   <div data-lisn-modal-content-id=\"modal\"\n *        data-lisn-modal=\"auto-close=false | close-button=true\">\n *     Lorem ipsum odor amet, consectetuer adipiscing elit. Etiam duis viverra\n *     faucibus facilisis luctus. Nunc tellus turpis facilisi dapibus aliquet\n *     turpis. Diam potenti egestas dolor auctor nostra vestibulum. Tempus\n *     auctor quis turpis; pulvinar ante ultrices. Netus morbi imperdiet\n *     volutpat litora tellus turpis a. Sociosqu interdum sodales sapien nulla\n *     aptent pellentesque praesent. Senectus magnis pellentesque; dis porta\n *     justo habitant.\n *   </div>\n * </div>\n *\n * <div>\n *   <div data-lisn-modal-content-id=\"modal\" class=\"lisn-modal-trigger\">\n *     Open\n *   </div>\n * </div>\n *\n * <div>\n *   <div data-lisn-modal-content-id=\"modal\" class=\"lisn-modal-trigger\">\n *     Another trigger\n *   </div>\n * </div>\n * ```\n */\nexport class Modal extends Openable {\n  static register() {\n    registerOpenable(\n      WIDGET_NAME_MODAL,\n      (el, config) => new Modal(el, config),\n      modalConfigValidator,\n    );\n  }\n\n  constructor(element: HTMLElement, config?: ModalConfig) {\n    super(element, {\n      name: WIDGET_NAME_MODAL,\n      id: config?.id,\n      className: config?.className,\n      autoClose: config?.autoClose ?? true,\n      isModal: true,\n      isOffcanvas: true,\n      closeButton: config?.closeButton ?? true,\n      triggers: config?.triggers,\n    });\n  }\n}\n\n/**\n * @interface\n */\nexport type ModalConfig = {\n  /**\n   * The DOM ID to set on the modal. Will result in the top-level root element\n   * that's created by us getting this ID.\n   *\n   * Note, this does not replace or affect the `data-lisn-modal-content-id`\n   * attribute used to link triggers to the modal.\n   *\n   * @defaultValue undefined\n   */\n  id?: string;\n\n  /**\n   * Class name(s) or a list of class names to set on the modal. Will result in\n   * the top-level root element that's created by us getting these classes.\n   *\n   * @defaultValue undefined\n   */\n  className?: string[] | string;\n\n  /**\n   * The elements that open the widget when clicked on. You can also pass a map\n   * whose keys are the elements and values are {@link OpenableTriggerConfig}\n   * objects.\n   *\n   * If not given, then the elements that will be used as triggers are\n   * discovered in the following way:\n   * 1. If the content element has a `data-lisn-modal-content-id` attribute,\n   *    then it must be a unique (for the current page) ID. In this case, the\n   *    trigger elements will be any element in the document that has a\n   *    `lisn-modal-trigger` class or `data-lisn-modal-trigger` attribute and\n   *    the same `data-lisn-modal-content-id` attribute.\n   * 2. Otherwise, the closest ancestor that has a `lisn-modal-container` class,\n   *    or if no such ancestor then the immediate parent of the content\n   *    element, is searched for any elements that have a `lisn-modal-trigger`\n   *    class or `data-lisn-modal-trigger` attribute and that do _not_ have a\n   *    `data-lisn-modal-content-id` attribute, and that are _not_ children of\n   *    the content element.\n   *\n   * @defaultValue undefined\n   */\n  triggers?: Element[] | Map<Element, OpenableTriggerConfig | null>;\n\n  /**\n   * Add a close button at the top right.\n   *\n   * @defaultValue true\n   */\n  closeButton?: boolean;\n\n  /**\n   * Automatically close the modal when clicking outside it or pressing Escape.\n   * Furthermore, if any trigger opens the widget on\n   * {@link OpenableTriggerConfig.hover}, the widget will be closed when the\n   * pointer leaves both the trigger and the root.\n   *\n   * If you set this to false, then you should ensure {@link closeButton} is\n   * enabled.\n   *\n   * @defaultValue true\n   */\n  autoClose?: boolean;\n};\n\n/* ********************\n * Offcanvas\n * ********************/\n\n/**\n * Configures the given element as a {@link Offcanvas} widget.\n *\n * The Offcanvas widget sets up the given element to be hidden and open in a\n * fixed overlay (non full-screen) upon activation. Activation can be done\n * manually by calling {@link open} or when clicking on any of the given\n * {@link OffcanvasConfig.triggers | triggers}.\n *\n * **IMPORTANT:** You should not instantiate more than one {@link Openable}\n * widget, regardless of type, on a given element. Use {@link Openable.get} to\n * get an existing instance if any. If there is already an {@link Openable}\n * widget of any type on this element, it will be destroyed!\n *\n * -----\n *\n * You can use the following dynamic attributes or CSS properties in your\n * stylesheet:\n *\n * The following dynamic attributes are set on the root element that is created\n * by LISN and has a class `lisn-offcanvas__root`:\n * - `data-lisn-is-open`: `\"true\"` or `\"false\"`\n * - `data-lisn-place`: the actual position `\"top\"`, `\"bottom\"`, `\"left\"` or\n *   `\"right\"`\n *\n * The following dynamic attributes are set on each trigger:\n * - `data-lisn-opens-on-hover: `\"true\"` or `\"false\"`\n *\n * -----\n *\n * To use with auto-widgets (HTML API) (see\n * {@link Settings.settings.autoWidgets | settings.autoWidgets}), the following\n * CSS classes or data attributes are recognized:\n * - `lisn-offcanvas` class or `data-lisn-offcanvas` attribute set on the\n *   element that holds the content of the offcanvas\n * - `lisn-offcanvas-trigger` class or `data-lisn-offcanvas-trigger`\n *   attribute set on elements that should act as the triggers.\n *   If using a data attribute, you can configure the trigger via the value\n *   with a similar syntax to the configuration of the openable widget. For\n *   example:\n *   - Set the attribute to `\"hover\"` in order to have this trigger open the\n *     offcanvas on hover _in addition to click_.\n *   - Set the attribute to `\"hover|auto-close=false\"` in order to have this\n *     trigger open the offcanvas on hover but and override\n *     {@link OffcanvasConfig.autoClose} with true.\n *\n * When using auto-widgets, the elements that will be used as triggers are\n * discovered in the following way:\n * 1. If the content element has a `data-lisn-offcanvas-content-id` attribute,\n *    then it must be a unique (for the current page) ID. In this case, the\n *    trigger elements will be any element in the document that has a\n *    `lisn-offcanvas-trigger` class or `data-lisn-offcanvas-trigger` attribute\n *    and the same `data-lisn-offcanvas-content-id` attribute.\n * 2. Otherwise, the closest ancestor that has a `lisn-offcanvas-container`\n *    class, or if no such ancestor then the immediate parent of the content\n *    element, is searched for any elements that have a\n *    `lisn-offcanvas-trigger` class or `data-lisn-offcanvas-trigger` attribute\n *    and that do _not_ have a `data-lisn-offcanvas-content-id`\n *    attribute, and that are _not_ children of the content element.\n *\n * See below examples for what values you can use set for the data attributes\n * in order to modify the configuration of the automatically created widget.\n *\n * @example\n * This defines a simple offcanvas with one trigger.\n *\n * ```html\n * <div>\n *   <div class=\"lisn-offcanvas-trigger\">Open</div>\n *   <div class=\"lisn-offcanvas\">\n *     Some content here...\n *   </div>\n * </div>\n * ```\n *\n * @example\n * This defines a offcanvas that doesn't automatically close on click outside\n * or Escape and, and that has several triggers in a different parent to the\n * content.\n *\n * ```html\n * <div>\n *   <div data-lisn-offcanvas-content-id=\"offcanvas\"\n *        data-lisn-offcanvas=\"auto-close=false\">\n *     Lorem ipsum odor amet, consectetuer adipiscing elit. Etiam duis viverra\n *     faucibus facilisis luctus. Nunc tellus turpis facilisi dapibus aliquet\n *     turpis. Diam potenti egestas dolor auctor nostra vestibulum. Tempus\n *     auctor quis turpis; pulvinar ante ultrices. Netus morbi imperdiet\n *     volutpat litora tellus turpis a. Sociosqu interdum sodales sapien nulla\n *     aptent pellentesque praesent. Senectus magnis pellentesque; dis porta\n *     justo habitant.\n *   </div>\n * </div>\n *\n * <div>\n *   <div data-lisn-offcanvas-content-id=\"offcanvas\" class=\"lisn-offcanvas-trigger\">\n *     Open\n *   </div>\n * </div>\n *\n * <div>\n *   <div data-lisn-offcanvas-content-id=\"offcanvas\" class=\"lisn-offcanvas-trigger\">\n *     Another trigger\n *   </div>\n * </div>\n * ```\n *\n * @example\n * As above, but with all possible configuration settings set explicitly.\n *\n * ```html\n * <div>\n *   <div data-lisn-offcanvas-content-id=\"offcanvas\"\n *        data-lisn-offcanvas=\"position=top | auto-close=false | close-button=true\">\n *     Lorem ipsum odor amet, consectetuer adipiscing elit. Etiam duis viverra\n *     faucibus facilisis luctus. Nunc tellus turpis facilisi dapibus aliquet\n *     turpis. Diam potenti egestas dolor auctor nostra vestibulum. Tempus\n *     auctor quis turpis; pulvinar ante ultrices. Netus morbi imperdiet\n *     volutpat litora tellus turpis a. Sociosqu interdum sodales sapien nulla\n *     aptent pellentesque praesent. Senectus magnis pellentesque; dis porta\n *     justo habitant.\n *   </div>\n * </div>\n *\n * <div>\n *   <div data-lisn-offcanvas-content-id=\"offcanvas\" class=\"lisn-offcanvas-trigger\">\n *     Open\n *   </div>\n * </div>\n *\n * <div>\n *   <div data-lisn-offcanvas-content-id=\"offcanvas\" class=\"lisn-offcanvas-trigger\">\n *     Another trigger\n *   </div>\n * </div>\n * ```\n */\nexport class Offcanvas extends Openable {\n  static register() {\n    registerOpenable(\n      WIDGET_NAME_OFFCANVAS,\n      (el, config) => new Offcanvas(el, config),\n      offcanvasConfigValidator,\n    );\n  }\n\n  constructor(element: HTMLElement, config?: OffcanvasConfig) {\n    super(element, {\n      name: WIDGET_NAME_OFFCANVAS,\n      id: config?.id,\n      className: config?.className,\n      autoClose: config?.autoClose ?? true,\n      isModal: false,\n      isOffcanvas: true,\n      closeButton: config?.closeButton ?? true,\n      triggers: config?.triggers,\n    });\n\n    const position = config?.position || MC.S_RIGHT;\n    setData(this.getRoot(), MC.PREFIX_PLACE, position);\n  }\n}\n\n/**\n * @interface\n */\nexport type OffcanvasConfig = {\n  /**\n   * The DOM ID to set on the offcanvas. Will result in the top-level root\n   * element that's created by us getting this ID.\n   *\n   * Note, this does not replace or affect the `data-lisn-offcanvas-content-id`\n   * attribute used to link triggers to the offcanvas.\n   *\n   * @defaultValue undefined\n   */\n  id?: string;\n\n  /**\n   * Class name(s) or a list of class names to set on the offcanvas. Will result\n   * in the top-level root element that's created by us getting these classes.\n   *\n   * @defaultValue undefined\n   */\n  className?: string[] | string;\n\n  /**\n   * The elements that open the widget when clicked on. You can also pass a map\n   * whose keys are the elements and values are {@link OpenableTriggerConfig}\n   * objects.\n   *\n   * If not given, then the elements that will be used as triggers are\n   * discovered in the following way:\n   * 1. If the content element has a `data-lisn-offcanvas-content-id` attribute,\n   *    then it must be a unique (for the current page) ID. In this case, the\n   *    trigger elements will be any element in the document that has a\n   *    `lisn-offcanvas-trigger` class or `data-lisn-offcanvas-trigger`\n   *    attribute and the same `data-lisn-offcanvas-content-id` attribute.\n   * 2. Otherwise, the closest ancestor that has a `lisn-offcanvas-container`\n   *    class, or if no such ancestor then the immediate parent of the content\n   *    element, is searched for any elements that have a\n   *    `lisn-offcanvas-trigger` class or `data-lisn-offcanvas-trigger`\n   *    attribute and that do _not_ have a `data-lisn-offcanvas-content-id`\n   *    attribute, and that are _not_ children of the content element.\n   *\n   * @defaultValue undefined\n   */\n  triggers?: Element[] | Map<Element, OpenableTriggerConfig | null>;\n\n  /**\n   * Specify the offcanvas position. Supported positions are top, bottom, left,\n   * right.\n   *\n   * @defaultValue \"right\"\n   */\n  position?: Position;\n\n  /**\n   * Add a close button at the top right.\n   *\n   * @defaultValue true\n   */\n  closeButton?: boolean;\n\n  /**\n   * Automatically close the offcanvas when clicking outside it or pressing\n   * Escape. Furthermore, if any trigger opens the widget on\n   * {@link OpenableTriggerConfig.hover}, the widget will be closed when the\n   * pointer leaves both the trigger and the root.\n   *\n   * @defaultValue true\n   */\n  autoClose?: boolean;\n};\n\n// ------------------------------\n\ntype ElementsCollection = {\n  content: HTMLElement;\n  root: HTMLElement;\n  container: HTMLElement | null;\n  outerWrapper: HTMLElement;\n  triggers: Map<Element, OpenableTriggerConfig>;\n};\n\nconst instances = MH.newWeakMap<Element, Openable>();\n\nconst WIDGET_NAME_COLLAPSIBLE = \"collapsible\";\nconst WIDGET_NAME_POPUP = \"popup\";\nconst WIDGET_NAME_MODAL = \"modal\";\nconst WIDGET_NAME_OFFCANVAS = \"offcanvas\";\n\nconst PREFIX_CLOSE_BTN = MH.prefixName(\"close-button\");\nconst PREFIX_IS_OPEN = MH.prefixName(\"is-open\");\nconst PREFIX_REVERSE = MH.prefixName(MC.S_REVERSE);\nconst PREFIX_PEEK = MH.prefixName(\"peek\");\nconst PREFIX_OPENS_ON_HOVER = MH.prefixName(\"opens-on-hover\");\nconst PREFIX_LINE = MH.prefixName(\"line\");\nconst PREFIX_ICON_POSITION = MH.prefixName(\"icon-position\");\nconst PREFIX_TRIGGER_ICON = MH.prefixName(\"trigger-icon\");\nconst PREFIX_ICON_WRAPPER = MH.prefixName(\"icon-wrapper\");\nconst S_AUTO = \"auto\";\nconst S_ARIA_EXPANDED = MC.ARIA_PREFIX + \"expanded\";\nconst S_ARIA_MODAL = MC.ARIA_PREFIX + \"modal\";\nconst VAR_PEEK_SIZE = MH.prefixCssVar(\"peek-size\");\nconst VAR_JS_COLLAPSIBLE_WIDTH = MH.prefixCssJsVar(\"collapsible-width\");\nconst MIN_CLICK_TIME_AFTER_HOVER_OPEN = 1000;\nconst S_ARROW_UP =\n  `${MC.S_ARROW}-${MC.S_UP}` as `${typeof MC.S_ARROW}-${typeof MC.S_UP}`;\nconst S_ARROW_DOWN =\n  `${MC.S_ARROW}-${MC.S_DOWN}` as `${typeof MC.S_ARROW}-${typeof MC.S_DOWN}`;\nconst S_ARROW_LEFT =\n  `${MC.S_ARROW}-${MC.S_LEFT}` as `${typeof MC.S_ARROW}-${typeof MC.S_LEFT}`;\nconst S_ARROW_RIGHT =\n  `${MC.S_ARROW}-${MC.S_RIGHT}` as `${typeof MC.S_ARROW}-${typeof MC.S_RIGHT}`;\n\nconst ARROW_TYPES = [\n  S_ARROW_UP,\n  S_ARROW_DOWN,\n  S_ARROW_LEFT,\n  S_ARROW_RIGHT,\n] as const;\n\nconst ICON_CLOSED_TYPES = [\"plus\", ...ARROW_TYPES] as const;\nconst ICON_OPEN_TYPES = [\"minus\", \"x\", ...ARROW_TYPES] as const;\ntype IconCloseType = (typeof ICON_CLOSED_TYPES)[number];\ntype IconOpenType = (typeof ICON_OPEN_TYPES)[number];\n\nconst isValidIconClosed = (value: string): value is IconCloseType =>\n  MH.includes(ICON_CLOSED_TYPES, value);\n\nconst isValidIconOpen = (value: string): value is IconOpenType =>\n  MH.includes(ICON_OPEN_TYPES, value);\n\nconst triggerConfigValidator: WidgetConfigValidatorObject<OpenableTriggerConfig> =\n  {\n    id: validateString,\n    className: (key, value) => validateStrList(key, toArrayIfSingle(value)),\n    autoClose: validateBoolean,\n    icon: (key, value) =>\n      value && toBoolean(value) === false\n        ? false\n        : validateString(key, value, isValidPosition),\n    iconClosed: (key, value) => validateString(key, value, isValidIconClosed),\n    iconOpen: (key, value) => validateString(key, value, isValidIconOpen),\n    hover: validateBoolean,\n  };\n\nconst collapsibleConfigValidator: WidgetConfigValidatorObject<CollapsibleConfig> =\n  {\n    id: validateString,\n    className: (key, value) => validateStrList(key, toArrayIfSingle(value)),\n    horizontal: validateBoolean,\n    reverse: validateBoolean,\n    peek: validateBooleanOrString,\n    autoClose: validateBoolean,\n    icon: (key, value) =>\n      toBoolean(value) === false\n        ? false\n        : validateString(key, value, isValidPosition),\n    iconClosed: (key, value) => validateString(key, value, isValidIconClosed),\n    iconOpen: (key, value) => validateString(key, value, isValidIconOpen),\n  };\n\nconst popupConfigValidator: WidgetConfigValidatorObject<PopupConfig> = {\n  id: validateString,\n  className: (key, value) => validateStrList(key, toArrayIfSingle(value)),\n  closeButton: validateBoolean,\n  position: (key, value) =>\n    validateString(\n      key,\n      value,\n      (v) => v === S_AUTO || isValidPosition(v) || isValidTwoFoldPosition(v),\n    ),\n  autoClose: validateBoolean,\n};\n\nconst modalConfigValidator: WidgetConfigValidatorObject<ModalConfig> = {\n  id: validateString,\n  className: (key, value) => validateStrList(key, toArrayIfSingle(value)),\n  closeButton: validateBoolean,\n  autoClose: validateBoolean,\n};\n\nconst offcanvasConfigValidator: WidgetConfigValidatorObject<OffcanvasConfig> = {\n  id: validateString,\n  className: (key, value) => validateStrList(key, toArrayIfSingle(value)),\n  closeButton: validateBoolean,\n  position: (key, value) => validateString(key, value, isValidPosition),\n  autoClose: validateBoolean,\n};\n\nconst getPrefixedNames = (name: string) => {\n  const pref = MH.prefixName(name);\n  return {\n    _root: `${pref}__root`,\n    _overlay: `${pref}__overlay`, // only used for modal/offcanvas\n    _innerWrapper: `${pref}__inner-wrapper`,\n    _outerWrapper: `${pref}__outer-wrapper`,\n    _content: `${pref}__content`,\n    _container: `${pref}__container`,\n    _trigger: `${pref}__trigger`,\n    // Use different classes for styling to the ones used for auto-discovering\n    // elements, so that re-creating existing widgets can correctly find the\n    // elements to be used by the new widget synchronously before the current\n    // one is destroyed.\n    _containerForSelect: `${pref}-container`,\n    _triggerForSelect: `${pref}-trigger`,\n    _contentId: `${pref}-content-id`,\n  };\n};\n\nconst findContainer = (content: Element, cls: string) => {\n  const currWidget = instances.get(content);\n  // If there's an existing widget that we're about to destroy, the content\n  // element will be wrapped in several elements and won't be restored until\n  // the next mutate time. In that case, to correctly determine the container\n  // element, use the current widget's root element, which is located in the\n  // content element's original place.\n  let childRef = currWidget?.getRoot() ?? content;\n  if (!MH.parentOf(childRef)) {\n    // The current widget is not yet initialized (i.e. we are re-creating it\n    // immediately after it was constructed)\n    childRef = content;\n  }\n\n  // Find the content container\n  let container: HTMLElement | null = childRef.closest(`.${cls}`);\n  if (!container) {\n    container = MH.parentOf(childRef);\n  }\n\n  return container;\n};\n\nconst findTriggers = (\n  content: Element,\n  prefixedNames: ReturnType<typeof getPrefixedNames>,\n) => {\n  const container = findContainer(content, prefixedNames._containerForSelect);\n  // jsdom does not like the below selector when suffixed by [data-*] or :not()...\n  // const triggerSelector = `:is(.${prefixedNames._triggerForSelect},[data-${prefixedNames._triggerForSelect}])`;\n  // So use this:\n  const getTriggerSelector = (suffix: string) =>\n    `.${prefixedNames._triggerForSelect}${suffix},` +\n    `[data-${prefixedNames._triggerForSelect}]${suffix}`;\n\n  const contentId = getData(content, prefixedNames._contentId);\n  let triggers: Element[] = [];\n\n  if (contentId) {\n    triggers = [\n      ...MH.docQuerySelectorAll(\n        getTriggerSelector(`[data-${prefixedNames._contentId}=\"${contentId}\"]`),\n      ),\n    ];\n  } else if (container) {\n    triggers = [\n      ...MH.arrayFrom(\n        MH.querySelectorAll(\n          container,\n          getTriggerSelector(`:not([data-${prefixedNames._contentId}])`),\n        ),\n      ).filter((t) => !content.contains(t)),\n    ];\n  }\n\n  return triggers;\n};\n\nconst getTriggersFrom = (\n  content: Element,\n  inputTriggers:\n    | Element[]\n    | Map<Element, OpenableTriggerConfig | null>\n    | undefined,\n  wrapTriggers: boolean,\n  prefixedNames: ReturnType<typeof getPrefixedNames>,\n) => {\n  const triggerMap = MH.newMap<Element, OpenableTriggerConfig>();\n\n  inputTriggers = inputTriggers || findTriggers(content, prefixedNames);\n\n  const addTrigger = (\n    trigger: Element,\n    triggerConfig: OpenableTriggerConfig,\n  ) => {\n    if (wrapTriggers) {\n      const wrapper = MH.createElement(\n        isInlineTag(MH.tagName(trigger)) ? \"span\" : \"div\",\n      );\n      wrapElement(trigger, { wrapper, ignoreMove: true }); // no need to await\n      trigger = wrapper;\n    }\n\n    triggerMap.set(trigger, triggerConfig);\n  };\n\n  if (MH.isArray(inputTriggers)) {\n    for (const trigger of inputTriggers) {\n      addTrigger(\n        trigger,\n        getWidgetConfig(\n          getData(trigger, prefixedNames._triggerForSelect),\n          triggerConfigValidator,\n        ),\n      );\n    }\n  } else if (MH.isInstanceOf(inputTriggers, Map)) {\n    for (const [trigger, triggerConfig] of inputTriggers.entries()) {\n      addTrigger(\n        trigger,\n        getWidgetConfig(triggerConfig, triggerConfigValidator),\n      );\n    }\n  }\n\n  return triggerMap;\n};\n\nconst setupElements = (\n  widget: Openable,\n  content: HTMLElement,\n  properties: OpenableProperties,\n): ElementsCollection => {\n  const prefixedNames = getPrefixedNames(properties.name);\n  const container = findContainer(content, prefixedNames._containerForSelect);\n\n  const wrapTriggers = properties.wrapTriggers ?? false;\n  const triggers = getTriggersFrom(\n    content,\n    properties.triggers,\n    wrapTriggers,\n    prefixedNames,\n  );\n\n  // Create two wrappers\n  const innerWrapper = MH.createElement(\"div\");\n  addClasses(innerWrapper, prefixedNames._innerWrapper);\n\n  const outerWrapper = wrapElementNow(innerWrapper);\n\n  // Setup the root element.\n  // For off-canvas types we need another wrapper to serve as the root and we\n  // need a placeholder element to save the content's original position so it\n  // can be restored on destroy.\n  // Otherwise use outerWrapper for root and insert the root where the content\n  // was.\n  let root: HTMLElement;\n  let placeholder: HTMLElement;\n  if (properties.isOffcanvas) {\n    addClasses(outerWrapper, prefixedNames._outerWrapper);\n    root = wrapElementNow(outerWrapper);\n    placeholder = MH.createElement(\"div\");\n\n    const overlay = MH.createElement(\"div\");\n    addClasses(overlay, prefixedNames._overlay);\n    moveElement(overlay, { to: root });\n  } else {\n    // Otherwise use the outer wrapper as the root\n    root = placeholder = outerWrapper;\n  }\n\n  if (properties.id) {\n    root.id = properties.id;\n  }\n\n  if (properties.className) {\n    addClassesNow(root, ...toArrayIfSingle(properties.className));\n  }\n\n  unsetBooleanData(root, PREFIX_IS_OPEN);\n  const domID = getOrAssignID(root, properties.name);\n\n  if (properties.isModal) {\n    MH.setAttr(root, MC.S_ROLE, \"dialog\");\n    MH.setAttr(root, S_ARIA_MODAL);\n  }\n\n  addClasses(root, prefixedNames._root);\n  disableInitialTransition(root);\n\n  // Add a close button?\n  if (properties.closeButton) {\n    const closeBtn = MH.createButton(\"Close\");\n    addClasses(closeBtn, PREFIX_CLOSE_BTN);\n\n    // If autoClose is true, it will be closed on click anyway, because the\n    // close button is outside the content.\n    addEventListenerTo(closeBtn, MC.S_CLICK, () => {\n      widget.close();\n    });\n\n    moveElement(closeBtn, { to: properties.isOffcanvas ? root : innerWrapper });\n  }\n\n  // Transfer the relevant classes/data attrs from content to root element, so\n  // that our CSS can work without :has.\n  // This won't cause forced layout since the root is not yet attached to the\n  // DOM.\n  for (const cls of [\n    settings.lightThemeClassName,\n    settings.darkThemeClassName,\n  ]) {\n    if (hasClass(content, cls)) {\n      addClasses(root, cls);\n    }\n  }\n\n  const elements = {\n    content,\n    root,\n    container,\n    outerWrapper,\n    triggers,\n  };\n\n  // -------------------- Close / destroy hooks\n  widget.onClose(async () => {\n    for (const trigger of triggers.keys()) {\n      delData(trigger, PREFIX_OPENS_ON_HOVER);\n      MH.unsetAttr(trigger, S_ARIA_EXPANDED);\n      await unsetBooleanData(trigger, PREFIX_IS_OPEN);\n    }\n  });\n\n  widget.onDestroy(async () => {\n    await waitForMutateTime();\n\n    replaceElementNow(placeholder, content, { ignoreMove: true });\n    moveElementNow(root); // remove\n    removeClassesNow(content, prefixedNames._content);\n\n    if (container) {\n      removeClassesNow(container, prefixedNames._container);\n    }\n\n    for (const [trigger, triggerConfig] of triggers.entries()) {\n      MH.delAttr(trigger, MC.S_ARIA_CONTROLS);\n      MH.delAttr(trigger, S_ARIA_EXPANDED);\n\n      delDataNow(trigger, PREFIX_OPENS_ON_HOVER);\n      delDataNow(trigger, PREFIX_IS_OPEN);\n\n      removeClassesNow(\n        trigger,\n        prefixedNames._trigger,\n        ...(triggerConfig?.className || []),\n      );\n\n      if (trigger.id === triggerConfig?.id) {\n        trigger.id = \"\";\n      }\n\n      if (wrapTriggers) {\n        replaceElementNow(trigger, MH.childrenOf(trigger)[0], {\n          ignoreMove: true,\n        });\n      }\n    }\n\n    triggers.clear();\n\n    for (const el of [content, ...triggers.keys()]) {\n      if (instances.get(el) === widget) {\n        MH.deleteKey(instances, el);\n      }\n    }\n  });\n\n  // -------------------- SETUP\n  // Save the elements so we can lookup the instance\n  const currWidget = instances.get(content);\n  for (const el of [content, ...triggers.keys()]) {\n    instances.set(el, widget);\n  }\n\n  // Wait for the DOMWatcher to be active, which may not be before interactive.\n  waitForInteractive()\n    .then(currWidget?.destroy)\n    .then(waitForMutateTime)\n    .then(() => {\n      if (widget.isDestroyed()) {\n        return;\n      }\n\n      addClassesNow(content, prefixedNames._content);\n\n      if (container) {\n        addClassesNow(container, prefixedNames._container);\n      }\n\n      if (properties.isOffcanvas) {\n        moveElementNow(root, {\n          to: MH.getBody(),\n          ignoreMove: true,\n        });\n      }\n\n      // Move the placeholder element to before the content and then move\n      // content into inner wrapper.\n      moveElementNow(placeholder, {\n        // for not-offcanvas it's also the root\n        to: content,\n        position: \"before\",\n        ignoreMove: true,\n      });\n\n      moveElementNow(content, { to: innerWrapper, ignoreMove: true });\n\n      // Setup the triggers\n      for (const [trigger, triggerConfig] of triggers.entries()) {\n        MH.setAttr(trigger, MC.S_ARIA_CONTROLS, domID);\n        MH.unsetAttr(trigger, S_ARIA_EXPANDED);\n\n        setBooleanDataNow(\n          trigger,\n          PREFIX_OPENS_ON_HOVER,\n          triggerConfig[MC.S_HOVER],\n        );\n        unsetBooleanDataNow(trigger, PREFIX_IS_OPEN);\n\n        addClassesNow(\n          trigger,\n          prefixedNames._trigger,\n          ...(triggerConfig?.className || []),\n        );\n\n        if (triggerConfig?.id) {\n          trigger.id = triggerConfig.id;\n        }\n      }\n\n      setupListeners(widget, elements, properties, prefixedNames);\n\n      if (properties.onSetup) {\n        properties.onSetup();\n      }\n    });\n\n  return elements;\n};\n\nconst setupListeners = (\n  widget: Openable,\n  elements: ElementsCollection,\n  properties: OpenableProperties,\n  prefixedNames: ReturnType<typeof getPrefixedNames>,\n) => {\n  const { content, root, triggers } = elements;\n  const doc = MH.getDoc();\n\n  let hoverTimeOpened = 0;\n  let isPointerOver = false;\n  let activeTrigger: Element | null = null;\n\n  // ----------\n\n  const isTrigger = (element: Element) =>\n    MH.includes(\n      MH.arrayFrom(triggers.keys()),\n      element.closest(getDefaultWidgetSelector(prefixedNames._trigger)),\n    );\n\n  const shouldPreventDefault = (trigger: Element) =>\n    triggers.get(trigger)?.preventDefault ?? true;\n\n  const usesHover = (trigger: Element) => triggers.get(trigger)?.hover;\n\n  const usesAutoClose = (trigger: Element | null) =>\n    (trigger ? triggers.get(trigger)?.autoClose : null) ?? properties.autoClose;\n\n  // ----------\n\n  const toggleTrigger = (event: Event, openIt?: boolean) => {\n    const trigger = MH.currentTargetOf(event);\n    if (MH.isElement(trigger)) {\n      if (shouldPreventDefault(trigger)) {\n        MH.preventDefault(event);\n      }\n\n      // If a click was fired shortly after opening on hover, ignore\n      if (\n        openIt !== false && // not explicitly asked to close\n        widget.isOpen() &&\n        MH.timeSince(hoverTimeOpened) < MIN_CLICK_TIME_AFTER_HOVER_OPEN\n      ) {\n        return;\n      }\n\n      if (openIt ?? !widget.isOpen()) {\n        // open it\n        activeTrigger = trigger;\n        MH.setAttr(trigger, S_ARIA_EXPANDED); // will be unset on close\n        setBooleanData(trigger, PREFIX_IS_OPEN); // will be unset on close\n\n        widget.open(); // no need to await\n\n        if (usesAutoClose(trigger)) {\n          if (usesHover(trigger)) {\n            addEventListenerTo(root, MC.S_POINTERENTER, setIsPointerOver);\n            addEventListenerTo(root, MC.S_POINTERLEAVE, pointerLeft);\n          }\n\n          // auto-close listeners setup by the onOpen handler below\n        }\n      } else {\n        widget.close(); // out onClose handler below will remove listeners\n      }\n    }\n  };\n\n  // ----------\n\n  const setIsPointerOver = () => {\n    isPointerOver = true;\n  };\n\n  // ----------\n\n  const unsetIsPointerOver = (event: Event) => {\n    // Keep it set to true if this is a touch pointer type; otherwise unset\n    isPointerOver = isPointerOver && MH.isTouchPointerEvent(event);\n  };\n\n  // ----------\n\n  const pointerEntered = (event: Event) => {\n    setIsPointerOver();\n    if (!widget.isOpen()) {\n      hoverTimeOpened = MH.timeNow();\n      toggleTrigger(event, true);\n    }\n  };\n\n  // ----------\n\n  const pointerLeft = (event: Event) => {\n    unsetIsPointerOver(event);\n    const trigger = MH.currentTargetOf(event);\n    if (MH.isElement(trigger) && usesAutoClose(trigger)) {\n      MH.setTimer(\n        () => {\n          if (!isPointerOver) {\n            widget.close();\n          }\n        },\n        // use a delay that allows the mouse to move from trigger to content\n        // without closing it\n        // TODO make this user-configurable\n        properties.isOffcanvas ? 300 : 50,\n      );\n    }\n  };\n\n  // ----------\n\n  const closeIfEscape = (event: Event) => {\n    if ((event as KeyboardEvent).key === \"Escape\") {\n      widget.close(); // no need to await\n    }\n  };\n\n  // ----------\n\n  const closeIfClickOutside = (event: Event) => {\n    const target = MH.targetOf(event);\n    if (\n      target === doc ||\n      (MH.isElement(target) &&\n        !content.contains(target) && // outside content\n        !isTrigger(target)) // handled by pointer watcher\n    ) {\n      widget.close();\n    }\n  };\n\n  // ----------\n\n  const maybeSetupAutoCloseListeners = (\n    trigger: Element | null,\n    remove: boolean,\n  ) => {\n    if (usesAutoClose(trigger)) {\n      const addOrRemove = remove ? removeEventListenerFrom : addEventListenerTo;\n\n      addOrRemove(doc, \"keyup\", closeIfEscape);\n\n      // Add a short delay so that we don't catch the bubbling of the click event\n      // that opened the widget.\n      MH.setTimer(() => addOrRemove(doc, MC.S_CLICK, closeIfClickOutside), 100);\n\n      if (trigger && usesHover(trigger)) {\n        addOrRemove(trigger, MC.S_POINTERLEAVE, pointerLeft);\n      }\n    }\n  };\n\n  // ----------\n\n  const setupOrCleanup = (remove: boolean) => {\n    const addOrRemove = remove ? removeEventListenerFrom : addEventListenerTo;\n\n    for (const [trigger, triggerConfig] of triggers.entries()) {\n      // Always setup click listeners\n      addOrRemove(trigger, MC.S_CLICK, toggleTrigger);\n\n      if (triggerConfig[MC.S_HOVER]) {\n        addOrRemove(trigger, MC.S_POINTERENTER, pointerEntered);\n      }\n    }\n  };\n\n  // ----------\n\n  setupOrCleanup(false);\n\n  widget.onOpen(() => {\n    maybeSetupAutoCloseListeners(activeTrigger, false); // setup listeners if relevant\n  });\n\n  widget.onClose(() => {\n    hoverTimeOpened = 0;\n    isPointerOver = false;\n\n    removeEventListenerFrom(root, MC.S_POINTERENTER, setIsPointerOver);\n    removeEventListenerFrom(root, MC.S_POINTERLEAVE, pointerLeft);\n\n    maybeSetupAutoCloseListeners(activeTrigger, true); // remove listeners if any\n    activeTrigger = null;\n  });\n\n  widget.onDestroy(() => {\n    setupOrCleanup(true); // remove\n  });\n};\n\n// COLLAPSIBLE ------------------------------\n\nconst insertCollapsibleIcon = (\n  trigger: Element,\n  triggerConfig: OpenableTriggerConfig,\n  widget: Collapsible,\n  widgetConfig: CollapsibleConfig | undefined,\n) => {\n  const iconPosition = triggerConfig.icon ?? widgetConfig?.icon;\n  const iconClosed =\n    (triggerConfig.iconClosed ?? widgetConfig?.iconClosed) || \"plus\";\n  const iconOpen =\n    (triggerConfig.iconOpen ?? widgetConfig?.iconOpen) || \"minus\";\n\n  if (iconPosition) {\n    addClasses(trigger, PREFIX_ICON_WRAPPER);\n    setData(trigger, PREFIX_ICON_POSITION, iconPosition);\n\n    const icon = MH.createElement(\"span\");\n    setDataNow(icon, PREFIX_TRIGGER_ICON, iconClosed);\n\n    for (let l = 0; l < 2; l++) {\n      const line = MH.createElement(\"span\");\n      addClassesNow(line, PREFIX_LINE);\n      moveElementNow(line, { to: icon });\n    }\n\n    moveElement(icon, { to: trigger, ignoreMove: true });\n\n    widget.onOpen(() => {\n      if (getBooleanData(trigger, PREFIX_IS_OPEN)) {\n        setData(icon, PREFIX_TRIGGER_ICON, iconOpen);\n      }\n    });\n\n    widget.onClose(() => {\n      setData(icon, PREFIX_TRIGGER_ICON, iconClosed);\n    });\n  }\n};\n\n// POPUP ------------------------------\n\nconst fetchPopupPlacement = async (\n  contentSize: SizeData,\n  containerView: ViewData,\n) => {\n  const containerPosition = containerView.relative;\n  const containerTop = containerPosition[MC.S_TOP];\n  const containerBottom = containerPosition[MC.S_BOTTOM];\n  const containerLeft = containerPosition[MC.S_LEFT];\n  const containerRight = containerPosition[MC.S_RIGHT];\n  const containerHMiddle = containerPosition.hMiddle;\n  const containerVMiddle = containerPosition.vMiddle;\n  const vpSize = await fetchViewportSize();\n  const popupWidth = contentSize.border[MC.S_WIDTH] / vpSize[MC.S_WIDTH];\n  const popupHeight = contentSize.border[MC.S_HEIGHT] / vpSize[MC.S_HEIGHT];\n\n  // - Find the maximum of these quantities:\n  //   - containerTop - popupHeight:\n  //     the space on top if placed on top-(left|right|)\n  //   - 1 - (containerBottom + popupHeight):\n  //     the space on bottom be if placed on bottom-(left|right|)\n  //   - containerLeft - popupWidth:\n  //     the space on left if placed on left-(top|bottom|)\n  //   - 1 - (containerRight + popupWidth):\n  //     the space on right if placed on right-(top|bottom|)\n  //\n  // This determines the main placement: top|bottom|left|right\n\n  // Then to determine secondary alignment:\n  // - For top/bottom placement, determine horizontal alignment:\n  //   - Find the maximum of these quantities:\n  //     - 1 - (containerLeft + popupWidth):\n  //       the space on right if left-aligned\n  //     - containerRight - popupWidth:\n  //       the space on left if right-aligned\n  //     - min(\n  //           containerHMiddle - popupWidth / 2,\n  //           1 - (containerHMiddle + popupWidth / 2),\n  //       ):\n  //       the minimum of the space on either left or right if center-aligned\n  //\n  // - For left/right placement, determine vertical alignment:\n  //   - Find the maximum of these quantities:\n  //     - 1 - (containerTop + popupHeight):\n  //       the space on bottom if top-aligned\n  //     - containerBottom - popupHeight:\n  //       the space on top if bottom-aligned\n  //     - min(\n  //           containerVMiddle - popupHeight / 2,\n  //           1 - (containerVMiddle + popupHeight / 2),\n  //       ):\n  //       the minimum of the space on either top or bottom if center-aligned\n\n  const placementVars = {\n    top: containerTop - popupHeight,\n    bottom: 1 - (containerBottom + popupHeight),\n    left: containerLeft - popupWidth,\n    right: 1 - (containerRight + popupWidth),\n  };\n\n  const placement = keyWithMaxVal(placementVars);\n  if (placement === undefined) {\n    // container must be out-view and so left/right are NaN\n    return;\n  }\n  let finalPlacement = placement;\n\n  let alignmentVars;\n  switch (placement) {\n    case MC.S_TOP:\n    case MC.S_BOTTOM:\n      alignmentVars = {\n        left: 1 - (containerLeft + popupWidth),\n        right: containerRight - popupWidth,\n        middle: MH.min(\n          containerHMiddle - popupWidth / 2,\n          1 - (containerHMiddle + popupWidth / 2),\n        ),\n      };\n      break;\n\n    case MC.S_LEFT:\n    case MC.S_RIGHT:\n      alignmentVars = {\n        top: 1 - (containerTop + popupHeight),\n        bottom: containerBottom - popupHeight,\n        middle: MH.min(\n          containerVMiddle - popupHeight / 2,\n          1 - (containerVMiddle + popupHeight / 2),\n        ),\n      };\n      break;\n\n    default:\n      return;\n  }\n\n  const alignment = keyWithMaxVal(alignmentVars);\n  if (alignment !== \"middle\") {\n    finalPlacement += \"-\" + alignment;\n  }\n\n  return finalPlacement;\n};\n"],"mappings":"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,YAAY,EAAEF,QAAQ,CAAC;IAC1C;IAEA,IAAIzD,SAAS,IAAIyD,QAAQ,KAAKC,MAAM,EAAE;MACpC;MACA,IAAI,CAAChE,MAAM,CAAC,YAAY;QACtB,MAAM,CAACkE,WAAW,EAAEC,aAAa,CAAC,GAAG,MAAM7J,EAAE,CAAC8J,UAAU,CAAC,CACvD5G,WAAW,CAAC6G,KAAK,CAAC,CAAC,CAACC,gBAAgB,CAACpG,OAAO,CAAC,EAC7CT,WAAW,CAAC4G,KAAK,CAAC,CAAC,CAACE,gBAAgB,CAACjE,SAAS,CAAC,CAChD,CAAC;QAEF,MAAMkE,SAAS,GAAG,MAAMC,mBAAmB,CAACP,WAAW,EAAEC,aAAa,CAAC;QACvE,IAAIK,SAAS,EAAE;UACb,MAAMxJ,OAAO,CAACuE,IAAI,EAAElF,EAAE,CAAC4J,YAAY,EAAEO,SAAS,CAAC;QACjD;MACF,CAAC,CAAC;IACJ;EACF;AACF;;AAEA;AACA;AACA;;AA0EA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC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","ignoreList":[]}