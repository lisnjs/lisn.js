{"version":3,"file":"dom-watcher.cjs","names":["MC","_interopRequireWildcard","require","MH","_dom","_domAlter","_domEvents","_log","_misc","_text","_validation","_callback","_xMap","_debug","_interopRequireDefault","e","__esModule","_getRequireWildcardCache","WeakMap","r","t","_typeof","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","o","Symbol","iterator","constructor","prototype","_regeneratorRuntime","value","c","asyncIterator","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","name","mark","setPrototypeOf","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","_catch","delegateYield","_toConsumableArray","_arrayWithoutHoles","_iterableToArray","_unsupportedIterableToArray","_nonIterableSpread","Array","from","isArray","_arrayLikeToArray","asyncGeneratorStep","_asyncToGenerator","arguments","apply","_next","_throw","_createForOfIteratorHelper","_n","F","toString","test","_classCallCheck","_defineProperties","_toPropertyKey","key","_createClass","_defineProperty","_toPrimitive","toPrimitive","String","Number","DOMWatcher","exports","config","CONSTRUCTOR_KEY","illegalConstructorError","logger","debug","Logger","logAtCreation","buffer","newXMap","_target","_categoryBitmask","_attributes","newSet","_addedTo","_removedFrom","allCallbacks","newMap","timer","mutationHandler","records","debug9","concat","_iterator","_step","record","target","targetOf","recType","isElement","S_CHILD_LIST","_iterator3","addedNodes","_step3","child","operation","sGet","ADDED_BIT","err","_iterator4","removedNodes","_step4","REMOVED_BIT","S_ATTRIBUTES","attributeName","add","ATTRIBUTE_BIT","sizeOf","setTimer","size","_iterator2","_step2","shouldSkipOperation","debug10","processOperation","clear","observers","_observer","newMutationObserver","_isActive","createCallback","handler","options","_allCallbacks$get","remove","debug5","callback","wrapCallback","onRemove","deleteHandler","_options","setupOnMutation","_ref","_callee","userOptions","root","childQueue","_i","_arr","element","initOperation","bufferedOperation","diffOperation","_callee$","_context","getOptions","_root","getBody","waitForElement","isRemoved","activateObserver","skipInitial","_selector","takeRecords","querySelectorAll","matches","parentOf","getDiffOperation","invokeCallback","_x","_x2","deleteKey","activeCategories","_iterator5","_step5","entry","deactivateObserver","_iterator6","_step6","categoryBitmask","selector","currentTargets","contains","lengthOf","mutationType","debug3","observe","_subtree","disconnect","requestToSkip","getIgnoreMove","removedFrom","addedTo","requestFrom","requestTo","to","clearIgnoreMove","ignoreMove","onMutation","offMutation","_allCallbacks$get2","undefined","getConfig","reuse","_instances$get","myConfig","configStrKey","objToStrKey","omitKeys","instance","instances","SYMBOL","_config$subtree","subtree","CATEGORIES_BITS","DOM_CATEGORIES_SPACE","bit","S_ADDED","S_REMOVED","S_ATTRIBUTE","categories","validateStrList","_iterator7","_step7","cat","bitmask","isString","usageError","operationA","operationB","attributes","_iterator8","_step8","attr","_iterator9","_step9","currentTarget","logError"],"sources":["../../../src/ts/watchers/dom-watcher.ts"],"sourcesContent":["/**\n * @module Watchers/DOMWatcher\n */\n\nimport * as MC from \"@lisn/globals/minification-constants\";\nimport * as MH from \"@lisn/globals/minification-helpers\";\n\nimport {\n  MutationCategory,\n  CommaSeparatedStr,\n  AtLeastOne,\n} from \"@lisn/globals/types\";\n\nimport { DOM_CATEGORIES_SPACE } from \"@lisn/utils/dom\";\nimport {\n  getIgnoreMove,\n  clearIgnoreMove,\n  ignoreMove,\n} from \"@lisn/utils/dom-alter\";\nimport { waitForElement } from \"@lisn/utils/dom-events\";\nimport { logError } from \"@lisn/utils/log\";\nimport { omitKeys } from \"@lisn/utils/misc\";\nimport { objToStrKey } from \"@lisn/utils/text\";\nimport { validateStrList } from \"@lisn/utils/validation\";\n\nimport {\n  CallbackHandler,\n  Callback,\n  wrapCallback,\n} from \"@lisn/modules/callback\";\nimport { newXMap } from \"@lisn/modules/x-map\";\n\nimport debug from \"@lisn/debug/debug\";\n\n/**\n * {@link DOMWatcher} listens for changes do the DOM tree. It's built on top of\n * {@link https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver | MutationObserver}.\n *\n * It manages registered callbacks globally and reuses MutationObservers for\n * more efficient performance.\n *\n * Each instance of DOMWatcher manages up to two MutationObservers: one\n * for `childList` changes and one for attribute changes, and it disconnects\n * them when there are no active callbacks for the relevant type.\n *\n * `characterData` and changes to base\n * {@link https://developer.mozilla.org/en-US/docs/Web/API/Node | Node}s\n * (non-{@link https://developer.mozilla.org/en-US/docs/Web/API/Element | Element})\n * are not supported.\n */\nexport class DOMWatcher {\n  /**\n   * Call the given handler whenever there's a matching mutation within this\n   * DOMWatcher's {@link DOMWatcherConfig.root | root}.\n   *\n   * If {@link OnMutationOptions.skipInitial | options.skipInitial} is `false`\n   * (default), _and_ {@link OnMutationOptions.selector | options.selector} is\n   * given, _and_ {@link OnMutationOptions.categories | options.categories}\n   * includes \"added\", the handler is also called (almost) immediately with all\n   * existing elements matching the selector under this DOMWatcher's\n   * {@link DOMWatcherConfig.root | root}.\n   *\n   * **IMPORTANT:** The same handler can _not_ be added multiple times, even if\n   * the options differ. If the handler has already been added, it is removed\n   * and re-added with the current options.\n   *\n   * @throws {@link Errors.LisnUsageError | LisnUsageError}\n   *                If the options are not valid.\n   */\n  readonly onMutation: (\n    handler: OnMutationHandler,\n    options?: OnMutationOptions,\n  ) => Promise<void>;\n\n  /**\n   * Removes a previously added handler.\n   */\n  readonly offMutation: (handler: OnMutationHandler) => void;\n\n  /**\n   * Ignore an upcoming moving/adding/removing of an element.\n   *\n   * The operation must complete within the next cycle, by the time\n   * MutationObserver calls us.\n   *\n   * Use this to prevent this instance of DOMWatcher from calling any callbacks\n   * that listen for relevant changes as a result of this operation, to prevent\n   * loops for example.\n   *\n   * **IMPORTANT:**\n   *\n   * Ignoring moving of an element from a parent _inside_ this DOMWatcher's\n   * root to another parent that's _outside_ the root, will work as expected,\n   * even though the \"adding to the new parent\" mutation will not be observed.\n   * This is because the element's current parent at the time of the mutation\n   * callback can be examined.\n   *\n   * However if you want to ignore moving of an element _from a parent outside\n   * this DOMWatcher's root_ you need to specify from: null since the \"removal\n   * from the old parent\" mutation would not be observed and there's no way to\n   * examine it's previous parent at the time the \"adding to the new parent\"\n   * mutation is observed.\n   *\n   * For this reason, setting `options.from` to be an element that's not under\n   * the root is internally treated the same as `options.from: null`.\n   */\n  readonly ignoreMove: (target: Element, options: MoveOptions) => void;\n\n  /**\n   * Creates a new instance of DOMWatcher with the given\n   * {@link DOMWatcherConfig}. It does not save it for future reuse.\n   */\n  static create(config: DOMWatcherConfig = {}) {\n    return new DOMWatcher(getConfig(config), CONSTRUCTOR_KEY);\n  }\n\n  /**\n   * Returns an existing instance of DOMWatcher with the given\n   * {@link DOMWatcherConfig}, or creates a new one.\n   *\n   * **NOTE:** It saves it for future reuse, so don't use this for temporary\n   * short-lived watchers.\n   */\n  static reuse(config: DOMWatcherConfig = {}) {\n    const myConfig = getConfig(config);\n    const configStrKey = objToStrKey(omitKeys(myConfig, { _root: null }));\n\n    const root = myConfig._root === MH.getBody() ? null : myConfig._root;\n    let instance = instances.get(root)?.get(configStrKey);\n    if (!instance) {\n      instance = new DOMWatcher(myConfig, CONSTRUCTOR_KEY);\n      instances.sGet(root).set(configStrKey, instance);\n    }\n\n    return instance;\n  }\n\n  private constructor(\n    config: DOMWatcherConfigInternal,\n    key: typeof CONSTRUCTOR_KEY,\n  ) {\n    if (key !== CONSTRUCTOR_KEY) {\n      throw MH.illegalConstructorError(\"DOMWatcher.create\");\n    }\n\n    const logger = debug\n      ? new debug.Logger({ name: \"DOMWatcher\", logAtCreation: config })\n      : null;\n\n    const buffer = newXMap<Element, MutationOperationInternal>((t) => ({\n      _target: t,\n      _categoryBitmask: 0,\n      _attributes: MH.newSet(),\n      _addedTo: null,\n      _removedFrom: null,\n    }));\n\n    const allCallbacks = MH.newMap<\n      OnMutationHandler,\n      {\n        _callback: OnMutationCallback;\n        _options: OnMutationOptionsInternal;\n      }\n    >();\n\n    // ----------\n\n    let timer: ReturnType<typeof setTimeout> | null = null;\n    const mutationHandler = (records: MutationRecord[]) => {\n      debug: logger?.debug9(`Got ${records.length} new records`, records);\n\n      for (const record of records) {\n        const target = MH.targetOf(record);\n        const recType = record.type;\n\n        /* istanbul ignore next */\n        if (!MH.isElement(target)) {\n          continue;\n        }\n\n        if (recType === MC.S_CHILD_LIST) {\n          for (const child of record.addedNodes) {\n            if (MH.isElement(child)) {\n              const operation = buffer.sGet(child);\n              operation._addedTo = target;\n              operation._categoryBitmask |= ADDED_BIT;\n            }\n          }\n\n          for (const child of record.removedNodes) {\n            if (MH.isElement(child)) {\n              const operation = buffer.sGet(child);\n              operation._removedFrom = target;\n              operation._categoryBitmask |= REMOVED_BIT;\n            }\n          }\n\n          //\n        } else if (recType === MC.S_ATTRIBUTES && record.attributeName) {\n          const operation = buffer.sGet(target);\n          operation._attributes.add(record.attributeName);\n          operation._categoryBitmask |= ATTRIBUTE_BIT;\n        }\n      }\n\n      // Schedule flushing of the buffer asynchronously so that we can combine\n      // the records from the two MutationObservers.\n      if (!timer && MH.sizeOf(buffer)) {\n        timer = MH.setTimer(() => {\n          debug: logger?.debug9(`Processing ${buffer.size} operations`);\n          for (const operation of buffer.values()) {\n            if (shouldSkipOperation(operation)) {\n              debug: logger?.debug10(\"Skipping operation\", operation);\n            } else {\n              processOperation(operation);\n            }\n          }\n\n          buffer.clear();\n          timer = null;\n        }, 0);\n      }\n    };\n\n    const observers: Record<MutationType, MyObserver> = {\n      [MC.S_CHILD_LIST]: {\n        _observer: MH.newMutationObserver(mutationHandler),\n        _isActive: false,\n      },\n      [MC.S_ATTRIBUTES]: {\n        _observer: MH.newMutationObserver(mutationHandler),\n        _isActive: false,\n      },\n    };\n\n    // ----------\n\n    const createCallback = (\n      handler: OnMutationHandler,\n      options: OnMutationOptionsInternal,\n    ): OnMutationCallback => {\n      MH.remove(allCallbacks.get(handler)?._callback);\n\n      debug: logger?.debug5(\"Adding/updating handler\", options);\n      const callback = wrapCallback(handler);\n      callback.onRemove(() => deleteHandler(handler));\n\n      allCallbacks.set(handler, { _callback: callback, _options: options });\n      return callback;\n    };\n\n    // ----------\n\n    const setupOnMutation = async (\n      handler: OnMutationHandler,\n      userOptions: OnMutationOptions | undefined,\n    ) => {\n      const options = getOptions(userOptions || {});\n      const callback = createCallback(handler, options);\n\n      let root = config._root || MH.getBody();\n      if (!root) {\n        root = await waitForElement(MH.getBody);\n      } else {\n        // So that the call is always async\n        await null;\n      }\n\n      if (callback.isRemoved()) {\n        return;\n      }\n\n      if (options._categoryBitmask & (ADDED_BIT | REMOVED_BIT)) {\n        activateObserver(root, MC.S_CHILD_LIST);\n      }\n\n      if (options._categoryBitmask & ATTRIBUTE_BIT) {\n        activateObserver(root, MC.S_ATTRIBUTES);\n      }\n\n      if (\n        userOptions?.skipInitial ||\n        !options._selector ||\n        !(options._categoryBitmask & ADDED_BIT)\n      ) {\n        return;\n      }\n\n      // As some of the matching elements that currently exist in the root may\n      // have just been added and therefore in the MutationObserver's queue, to\n      // avoid calling the handler with those entries twice, we empty its queue\n      // now and process it (which would also invoke the newly added callback).\n      // Then we skip any elements returned in querySelectorAll that were in\n      // the queue.\n\n      const childQueue = observers[MC.S_CHILD_LIST]._observer.takeRecords();\n      mutationHandler(childQueue);\n\n      for (const element of [\n        ...MH.querySelectorAll(root, options._selector),\n        ...(root.matches(options._selector) ? [root] : []),\n      ]) {\n        const initOperation: MutationOperationInternal = {\n          _target: element,\n          _categoryBitmask: ADDED_BIT,\n          _attributes: MH.newSet(),\n          _addedTo: MH.parentOf(element),\n          _removedFrom: null,\n        };\n\n        const bufferedOperation = buffer.get(element);\n        const diffOperation = getDiffOperation(\n          initOperation,\n          bufferedOperation,\n        );\n\n        if (diffOperation) {\n          if (shouldSkipOperation(diffOperation)) {\n            debug: logger?.debug10(\"Skipping operation\", diffOperation);\n          } else {\n            debug: logger?.debug5(\"Calling initially with\", diffOperation);\n            await invokeCallback(callback, diffOperation);\n          }\n        }\n      }\n    };\n\n    // ----------\n\n    const deleteHandler = (handler: OnMutationHandler) => {\n      MH.deleteKey(allCallbacks, handler);\n\n      let activeCategories = 0;\n      for (const entry of allCallbacks.values()) {\n        activeCategories |= entry._options._categoryBitmask;\n      }\n\n      if (!(activeCategories & (ADDED_BIT | REMOVED_BIT))) {\n        deactivateObserver(MC.S_CHILD_LIST);\n      }\n\n      if (!(activeCategories & ATTRIBUTE_BIT)) {\n        deactivateObserver(MC.S_ATTRIBUTES);\n      }\n    };\n\n    // ----------\n\n    const processOperation = (operation: MutationOperationInternal) => {\n      debug: logger?.debug10(\"Processing operation\", operation);\n\n      for (const entry of allCallbacks.values()) {\n        const categoryBitmask = entry._options._categoryBitmask;\n        const target = entry._options._target;\n        const selector = entry._options._selector;\n\n        if (!(operation._categoryBitmask & categoryBitmask)) {\n          debug: logger?.debug10(`Category does not match: ${categoryBitmask}`);\n          continue;\n        }\n\n        const currentTargets = [];\n        if (target) {\n          if (!operation._target.contains(target)) {\n            debug: logger?.debug10(\"Target does not match\", target);\n            continue;\n          }\n\n          currentTargets.push(target);\n        }\n\n        if (selector) {\n          const matches = [...MH.querySelectorAll(operation._target, selector)];\n\n          if (operation._target.matches(selector)) {\n            matches.push(operation._target);\n          }\n\n          if (!MH.lengthOf(matches)) {\n            debug: logger?.debug10(`Selector does not match: ${selector}`);\n            continue;\n          }\n\n          currentTargets.push(...matches);\n        }\n\n        invokeCallback(entry._callback, operation, currentTargets);\n      }\n    };\n\n    // ----------\n\n    const activateObserver = (root: Element, mutationType: MutationType) => {\n      if (!observers[mutationType]._isActive) {\n        debug: logger?.debug3(\n          `Activating mutation observer for '${mutationType}'`,\n        );\n        observers[mutationType]._observer.observe(root, {\n          [mutationType]: true,\n          subtree: config._subtree,\n        });\n        observers[mutationType]._isActive = true;\n      }\n    };\n\n    // ----------\n\n    const deactivateObserver = (mutationType: MutationType) => {\n      if (observers[mutationType]._isActive) {\n        debug: logger?.debug3(\n          `Disconnecting mutation observer for '${mutationType}'`,\n        );\n        observers[mutationType]._observer.disconnect();\n        observers[mutationType]._isActive = false;\n      }\n    };\n\n    // ----------\n\n    const shouldSkipOperation = (\n      operation: MutationOperationInternal,\n    ): boolean => {\n      const target = operation._target;\n      const requestToSkip = getIgnoreMove(target);\n      if (!requestToSkip) {\n        return false;\n      }\n\n      const removedFrom = operation._removedFrom;\n      const addedTo = MH.parentOf(target);\n      const requestFrom = requestToSkip.from;\n      const requestTo = requestToSkip.to;\n\n      const root = config._root || MH.getBody();\n      // If \"from\" is currently outside our root, we may not have seen a\n      // removal operation.\n      if (\n        (removedFrom === requestFrom || !root.contains(requestFrom)) &&\n        addedTo === requestTo\n      ) {\n        clearIgnoreMove(target);\n        return true;\n      }\n\n      return false;\n    };\n\n    // ----------\n\n    this.ignoreMove = ignoreMove;\n\n    // ----------\n\n    this.onMutation = setupOnMutation;\n\n    // ----------\n\n    this.offMutation = (handler) => {\n      debug: logger?.debug5(\"Removing handler\");\n      MH.remove(allCallbacks.get(handler)?._callback);\n    };\n  }\n}\n\n/**\n * @interface\n */\nexport type DOMWatcherConfig = {\n  /**\n   * The root element to observe for changes.\n   *\n   * It cannot be overridden on a per-callback basis.\n   *\n   * @defaultValue document.body\n   */\n  root?: Element | null;\n\n  /**\n   * Whether to observe root's subtree for changes or just direct descendants.\n   *\n   * It cannot be overridden on a per-callback basis.\n   *\n   * @defaultValue true\n   */\n  subtree?: boolean;\n};\n\n/**\n * @interface\n */\nexport type OnMutationOptions = {\n  /**\n   * If this is given, then the handler would only be called for operations\n   * where the target is _either_ the given element or an ancestor of it, i.e.\n   * it {@link https://developer.mozilla.org/en-US/docs/Web/API/Node/contains | Node:contains} it.\n   *\n   * @defaultValue undefined\n   */\n  target?: Element;\n\n  /**\n   * If this is given, then the handler would only be called for operations\n   * where the target matches the given selector _or contains an element\n   * matching the given selector_.\n   *\n   * @defaultValue undefined\n   */\n  selector?: string;\n\n  /**\n   * Specifies a list of {@link MutationCategory}s to target for.\n   *\n   * If not given, then the handler is called for any of the supported\n   * mutations.\n   *\n   * It can be a comma-separated list of category names or an array of such\n   * names.\n   *\n   * @defaultValue undefined\n   */\n  categories?: CommaSeparatedStr<MutationCategory> | MutationCategory[];\n\n  /**\n   * Do not call the handler until there's a future matching mutation.\n   *\n   * By default, if `selector` is given, and `categories` includes `added`, we\n   * call the handler (almost) immediately with all elements matching selector\n   * relative to this DOMWatcher's root.\n   *\n   * The initial operation will contain just the element and\n   * `addedTo: <current parent>`.\n   *\n   * @defaultValue false\n   */\n  skipInitial?: boolean;\n};\n\nexport type MoveOptions = AtLeastOne<{\n  /**\n   * If to is missing or null, it's a removal operation.\n   */\n  to: Element | null;\n\n  /**\n   * If from is missing or null, it's an insertion operation.\n   */\n  from: Element | null;\n}>;\n\nexport type MutationOperation = {\n  /**\n   * The target that was changed.\n   */\n  target: Element;\n\n  /**\n   * The target that the callback was interested in.\n   *\n   * If `selector` is given as part of {@link OnMutationOptions}, then\n   * `currentTarget` will point to the target that matched the selector\n   * starting at the operation's `target` as the root. If the operation's\n   * `target` contains more than one element matching selector, the callback\n   * will be called once for _each_ matching child.\n   *\n   * If `target` is given as part of {@link OnMutationOptions}, then\n   * `currentTarget` will be that element.\n   */\n  currentTarget: Element;\n\n  /**\n   * The list of attributes that were changed in this round.\n   */\n  attributes: Set<string>;\n\n  /**\n   * The element that the target was added to, i.e. it's new parent. It is null\n   * if the target was not moved to a new element _during this round_. It does\n   * not mean that this is its current parent.\n   */\n  addedTo: Element | null;\n\n  /**\n   * The element that the target was removed from, i.e. it's old parent. It is\n   * null if the target was not removed from a previous element _during this\n   * round_. It does not mean it did not previously have a parent, but that its\n   * removal was not observed.\n   */\n  removedFrom: Element | null;\n};\n\n/**\n * The handler is invoked with one argument:\n *\n * - a {@link MutationOperation} for a set of mutations related to a particular\n *   element\n *\n * The handler could be invoked multiple times in each \"round\" (cycle of event\n * loop) if there are mutation operations for more than one element that match\n * the supplied {@link OnMutationOptions}.\n */\nexport type OnMutationHandlerArgs = [MutationOperation];\nexport type OnMutationCallback = Callback<OnMutationHandlerArgs>;\nexport type OnMutationHandler =\n  | CallbackHandler<OnMutationHandlerArgs>\n  | OnMutationCallback;\n\n// ----------------------------------------\n\ntype DOMWatcherConfigInternal = {\n  _root: Element | null;\n  _subtree: boolean;\n};\n\ntype OnMutationOptionsInternal = {\n  _target: Element | null;\n  _selector: string;\n  _categoryBitmask: number;\n};\n\ntype MyObserver = {\n  _observer: MutationObserver;\n  _isActive: boolean;\n};\n\ntype MutationType = \"childList\" | \"attributes\";\n\ntype MutationOperationInternal = {\n  _target: Element;\n  _attributes: Set<string>;\n  _addedTo: Element | null;\n  _removedFrom: Element | null;\n  _categoryBitmask: number;\n};\n\nconst CONSTRUCTOR_KEY: unique symbol = MC.SYMBOL() as typeof CONSTRUCTOR_KEY;\nconst instances = newXMap<Element | null, Map<string, DOMWatcher>>(() =>\n  MH.newMap(),\n);\n\nconst getConfig = (config: DOMWatcherConfig): DOMWatcherConfigInternal => {\n  return {\n    _root: config.root || null,\n    _subtree: config.subtree ?? true,\n  };\n};\n\nconst CATEGORIES_BITS = DOM_CATEGORIES_SPACE.bit;\nconst ADDED_BIT = CATEGORIES_BITS[MC.S_ADDED];\nconst REMOVED_BIT = CATEGORIES_BITS[MC.S_REMOVED];\nconst ATTRIBUTE_BIT = CATEGORIES_BITS[MC.S_ATTRIBUTE];\n\n// ----------------------------------------\n\nconst getOptions = (options: OnMutationOptions): OnMutationOptionsInternal => {\n  let categoryBitmask = 0;\n  const categories = validateStrList(\n    \"categories\",\n    options.categories,\n    DOM_CATEGORIES_SPACE.has,\n  );\n\n  if (categories) {\n    for (const cat of categories) {\n      categoryBitmask |= CATEGORIES_BITS[cat];\n    }\n  } else {\n    categoryBitmask = DOM_CATEGORIES_SPACE.bitmask; // default: all\n  }\n\n  const selector = options.selector || \"\";\n  if (!MH.isString(selector)) {\n    throw MH.usageError(\"'selector' must be a string\");\n  }\n\n  return {\n    _categoryBitmask: categoryBitmask,\n    _target: options.target || null,\n    _selector: options.selector || \"\",\n  };\n};\n\nconst getDiffOperation = (\n  operationA: MutationOperationInternal,\n  operationB: MutationOperationInternal | undefined,\n): MutationOperationInternal | null => {\n  if (!operationB || operationA._target !== operationB._target) {\n    return operationA;\n  }\n\n  const attributes = MH.newSet<string>();\n  for (const attr of operationA._attributes) {\n    if (!operationB._attributes.has(attr)) {\n      attributes.add(attr);\n    }\n  }\n\n  const categoryBitmask =\n    operationA._categoryBitmask ^ operationB._categoryBitmask;\n\n  const addedTo =\n    operationA._addedTo === operationB._addedTo ? null : operationA._addedTo;\n\n  const removedFrom =\n    operationA._removedFrom === operationB._removedFrom\n      ? null\n      : operationA._removedFrom;\n\n  if (!MH.sizeOf(attributes) && !categoryBitmask && !addedTo && !removedFrom) {\n    return null;\n  }\n\n  return {\n    _target: operationA._target,\n    _categoryBitmask: categoryBitmask,\n    _attributes: attributes,\n    _addedTo: addedTo,\n    _removedFrom: removedFrom,\n  };\n};\n\nconst invokeCallback = (\n  callback: OnMutationCallback,\n  operation: MutationOperationInternal,\n  currentTargets: Element[] = [],\n) => {\n  if (!MH.lengthOf(currentTargets)) {\n    currentTargets = [operation._target];\n  }\n\n  for (const currentTarget of currentTargets) {\n    callback\n      .invoke({\n        target: operation._target,\n        currentTarget,\n        attributes: operation._attributes,\n        addedTo: operation._addedTo,\n        removedFrom: operation._removedFrom,\n      })\n      .catch(logError);\n  }\n};\n"],"mappings":"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","ignoreList":[]}