{"version":3,"file":"views.cjs","names":["MC","_interopRequireWildcard","require","MH","_validation","_bitSpaces","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","_typeof","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","_createForOfIteratorHelper","Symbol","iterator","Array","isArray","_unsupportedIterableToArray","length","_n","F","s","done","value","f","TypeError","o","next","_arrayLikeToArray","toString","slice","constructor","name","from","test","isValidScrollOffset","exports","offset","match","OFFSET_REGEX","isValidView","view","includes","VIEWS","isValidViewList","views","isValidStrList","getOppositeViews","usageError","bitmask","getViewsBitmask","oppositeBitmask","VIEWS_SPACE","bit","at","above","below","left","right","getViewsFromBitmask","viewsStr","viewsBitmask","validateStrList","_iterator","_step","v","concat","err","parseScrollOffset","input","_match$groups","_match$groups2","reference","groups","ref","bugError","S_AT","S_ABOVE","S_BELOW","S_LEFT","S_RIGHT","createBitSpace","apply","newBitSpaces","RegExp","start","end","nameOf","push"],"sources":["../../../src/ts/utils/views.ts"],"sourcesContent":["/**\n * @module Utils\n */\n\nimport * as MC from \"@lisn/globals/minification-constants\";\nimport * as MH from \"@lisn/globals/minification-helpers\";\n\nimport { ScrollOffset, View, CommaSeparatedStr } from \"@lisn/globals/types\";\n\nimport { isValidStrList, validateStrList } from \"@lisn/utils/validation\";\n\nimport { newBitSpaces, createBitSpace } from \"@lisn/modules/bit-spaces\";\n\n/**\n * Returns true if the given string is a valid {@link ScrollOffset}.\n *\n * @category Validation\n */\nexport const isValidScrollOffset = (offset: string): offset is ScrollOffset =>\n  offset.match(OFFSET_REGEX) !== null;\n\n/**\n * Returns true if the given string is a valid \"view\".\n *\n * @category Validation\n */\nexport const isValidView = (view: string): view is View =>\n  MH.includes(VIEWS, view);\n\n/**\n * Returns true if the given string or array is a list of valid views.\n *\n * @category Validation\n */\nexport const isValidViewList = (views: string | string[]) =>\n  isValidStrList(views, isValidView, false);\n\n/**\n * Returns the views that are opposite to the given set of views.\n *\n * Above and below are opposites, and so are left and right.\n *\n * \"at\" is a special case. It is considered opposite to any view in the sense\n * that if it is not present in `views` it will always be included in the\n * returned array. However it is not \"strongly\" opposite in the sense that it\n * will not cause other views to be included in the result unless it is the\n * only view in `views`. That is, there are two sets of strongly opposite pairs\n * (\"above\"/\"below\" and \"left\"/\"right\") and at least one of the two opposing\n * views of a pair must be present for the other one to be included, _except in\n * the special case of `views` being \"at\"_. See examples below for\n * clarification.\n *\n * **Note** that the order of the returned array is not defined.\n *\n * @example\n * Returns [\"above\", \"below\", \"left\", \"right\"] (not definite order), since\n * \"at\" is the only view present and is opposite to all:\n *\n * ```javascript\n * getOppositeViews(\"at\"); // -> [\"above\", \"below\", \"left\", \"right\"] (not necessarily in this order)\n * ```\n *\n * @example\n * Returns [\"below\"]. \"left\" and \"right\" are NOT included even though \"at\" is\n * given, because at least one of the two opposing views of a pair must be\n * present for the other one to be included (except in the special case of\n * `views` being \"at\").\n *\n * ```javascript\n * getOppositeViews(\"at,above\"); // -> [\"below\"]\n * ```\n *\n * @example\n * ```javascript\n * getOppositeViews(\"above\"); // -> [\"at\", \"below\"] (not necessarily in this order)\n * ```\n *\n * @example\n * ```javascript\n * getOppositeViews(\"above,below\"); // -> [\"at\"]\n * ```\n *\n * @example\n * ```javascript\n * getOppositeViews(\"at,above,below\"); // -> []\n * ```\n *\n * @example\n * ```javascript\n * getOppositeViews(\"above,right\"); // -> [\"at\", \"below\", \"left\"] (not necessarily in this order)\n * ```\n *\n * @example\n * ```javascript\n * getOppositeViews(\"at,above,right\"); // -> [\"below\", \"left\"] (not necessarily in this order)\n * ```\n *\n * @throws {@link Errors.LisnUsageError | LisnUsageError}\n *                If the given view is not valid, including if it's empty \"\".\n *\n * @category Views\n */\nexport const getOppositeViews = (\n  views: CommaSeparatedStr<View> | View[],\n): View[] => {\n  if (!views) {\n    throw MH.usageError(\"'views' cannot be empty\");\n  }\n\n  const bitmask = getViewsBitmask(views);\n  let oppositeBitmask = VIEWS_SPACE.bitmask & ~bitmask; // initial, all not present in bitmask\n\n  // If the given view is \"at\", then include all the other ones.\n  // Otherwise include only the opposite views of those directional\n  // (above/below/left/right) that are present. I.e. if neither left not right\n  // is given, then don't include them\n  if (bitmask !== VIEWS_SPACE.bit.at) {\n    // remove the opposite ones to those not present\n    if (!(bitmask & VIEWS_SPACE.bit.above)) {\n      oppositeBitmask &= ~VIEWS_SPACE.bit.below;\n    }\n\n    if (!(bitmask & VIEWS_SPACE.bit.below)) {\n      oppositeBitmask &= ~VIEWS_SPACE.bit.above;\n    }\n\n    if (!(bitmask & VIEWS_SPACE.bit.left)) {\n      oppositeBitmask &= ~VIEWS_SPACE.bit.right;\n    }\n\n    if (!(bitmask & VIEWS_SPACE.bit.right)) {\n      oppositeBitmask &= ~VIEWS_SPACE.bit.left;\n    }\n  }\n\n  return getViewsFromBitmask(oppositeBitmask);\n};\n\n/**\n * @ignore\n * @internal\n */\nexport const getViewsBitmask = (\n  viewsStr: View[] | string | undefined,\n): number => {\n  let viewsBitmask = 0;\n  const views = validateStrList(\"views\", viewsStr, isValidView);\n\n  if (views) {\n    for (const v of views) {\n      if (!isValidView(v)) {\n        throw MH.usageError(`Unknown view '${v}'`);\n      }\n\n      viewsBitmask |= VIEWS_SPACE.bit[v];\n    }\n  } else {\n    viewsBitmask = VIEWS_SPACE.bitmask; // default: all\n  }\n\n  return viewsBitmask;\n};\n\n/**\n * @ignore\n * @internal\n */\nexport const parseScrollOffset = (input: string) => {\n  const match = input.match(OFFSET_REGEX);\n  if (!match) {\n    throw MH.usageError(`Invalid offset: '${input}'`);\n  }\n\n  const reference = match.groups?.ref;\n  const value = match.groups?.value;\n  /* istanbul ignore next */ // shouldn't happen\n  if (!reference || !value) {\n    throw MH.bugError(\"Offset regex: blank named groups\");\n  }\n\n  return { reference, value };\n};\n\nconst VIEWS: View[] = [\n  MC.S_AT,\n  MC.S_ABOVE,\n  MC.S_BELOW,\n  MC.S_LEFT,\n  MC.S_RIGHT,\n] as const;\n\n/**\n * @ignore\n * @internal\n */\nexport const VIEWS_SPACE = createBitSpace<View>(newBitSpaces(), ...VIEWS);\n\n// --------------------\n\nconst OFFSET_REGEX = RegExp(\"(?<ref>top|bottom|left|right): *(?<value>[^ ].+)\");\n\nconst getViewsFromBitmask = (bitmask: number): View[] => {\n  const views: View[] = [];\n  for (let bit = VIEWS_SPACE.start; bit <= VIEWS_SPACE.end; bit++) {\n    const value = 1 << bit;\n    if (bitmask & value) {\n      const name = VIEWS_SPACE.nameOf(value);\n      if (name) {\n        views.push(name);\n      }\n    }\n  }\n\n  return views;\n};\n"],"mappings":"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","ignoreList":[]}