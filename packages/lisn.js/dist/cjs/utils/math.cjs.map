{"version":3,"file":"math.cjs","names":["MC","_interopRequireWildcard","require","MH","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","_typeof","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","_toConsumableArray","_arrayWithoutHoles","_iterableToArray","_unsupportedIterableToArray","_nonIterableSpread","TypeError","_arrayLikeToArray","toString","slice","constructor","name","Array","from","test","Symbol","iterator","isArray","length","roundNumTo","exports","value","numDecimal","arguments","undefined","multiplicationFactor","pow","round","isValidNum","isNumber","NUMBER","isFinite","toNum","defaultValue","numValue","isLiteralString","parseFloat","toInt","floor","toNonNegNum","toPosNum","toNumWithBounds","limits","_limits$min","_limits$max","isDefaultGiven","min","max","result","_ref","maxAbs","_len","values","_key","apply","map","v","abs","minAbs","_len2","_key2","havingMaxAbs","_len3","_key3","lengthOf","sort","b","INFINITY","havingMinAbs","_len4","_key4","hAngle","x","y","normalizeAngle","MATH","atan2","PI","degToRad","radToDeg","areParallel","vA","vB","angleDiffThreshold","angleA","angleB","areAntiParallel","distanceBetween","ptA","ptB","sqrt","quadraticRoots","c","z","easeInOutQuad","sortedKeysByVal","obj","descending","keysOf","keyWithMaxVal","keyWithMinVal","getBitmask","start","end"],"sources":["../../../src/ts/utils/math.ts"],"sourcesContent":["/**\n * @module Utils\n */\n\nimport * as MC from \"@lisn/globals/minification-constants\";\nimport * as MH from \"@lisn/globals/minification-helpers\";\n\nimport { Point, Vector, AtLeastOne } from \"@lisn/globals/types\";\n\n/**\n * Round a number to the given decimal precision (default is 0).\n *\n * @param {} [numDecimal = 0]\n *\n * @category Math\n */\nexport const roundNumTo = (value: number, numDecimal = 0) => {\n  const multiplicationFactor = MH.pow(10, numDecimal);\n  return MH.round(value * multiplicationFactor) / multiplicationFactor;\n};\n\n/**\n * Returns true if the given value is a valid _finite_ number.\n *\n * @category Validation\n */\nexport const isValidNum = (value: unknown): value is number =>\n  MH.isNumber(value) && MC.NUMBER.isFinite(value);\n\n/**\n * If the given value is a valid _finite_ number, it is returned, otherwise\n * the default is returned.\n *\n * @category Math\n */\nexport const toNum = <D extends number | false | null = 0>(\n  value: unknown,\n  defaultValue: D | 0 = 0,\n): number | D => {\n  const numValue = MH.isLiteralString(value) ? MH.parseFloat(value) : value;\n\n  // parseFloat will strip trailing non-numeric characters, so we check that\n  // the parsed number is equal to the string, if it was a string, using loose\n  // equality, in order to make sure the entire string was a number.\n  return isValidNum(numValue) && numValue == value ? numValue : defaultValue;\n};\n\n/**\n * If the given value is a valid _finite integer_ number, it is returned,\n * otherwise the default is returned.\n *\n * @category Math\n */\nexport const toInt = <D extends number | false | null = 0>(\n  value: unknown,\n  defaultValue: D | 0 = 0,\n): number | D => {\n  let numValue = toNum(value, null);\n  numValue = numValue === null ? numValue : MH.floor(numValue);\n\n  // Ensure that the parsed int equaled the original by loose equality.\n  return isValidNum(numValue) && numValue == value ? numValue : defaultValue;\n};\n\n/**\n * If the given value is a valid non-negative _finite_ number, it is returned,\n * otherwise the default is returned.\n *\n * @category Math\n */\nexport const toNonNegNum = <D extends number | false | null = 0>(\n  value: unknown,\n  defaultValue: D | 0 = 0,\n): number | D => {\n  const numValue = toNum(value, null);\n  return numValue !== null && numValue >= 0 ? numValue : defaultValue;\n};\n\n/**\n * If the given value is a valid positive number, it is returned, otherwise the\n * default is returned.\n *\n * @category Math\n */\nexport const toPosNum = <D extends number | false | null = 0>(\n  value: unknown,\n  defaultValue: D | 0 = 0,\n): number | D => {\n  const numValue = toNum(value, null);\n  return numValue !== null && numValue > 0 ? numValue : defaultValue;\n};\n\n/**\n * Returns the given number bound by min and/or max value.\n *\n * If the value is not a valid number, then `defaultValue` is returned if given\n * (_including if it is null_), otherwise `limits.min` if given and not null,\n * otherwise `limits.max` if given and not null, or finally 0.\n *\n * If the value is outside the bounds, then:\n * - if `defaultValue` is given, `defaultValue` is returned (_including if it\n *   is null_)\n * - otherwise, the min or the max value (whichever one is violated) is\n *   returned\n *\n * @category Math\n */\nexport const toNumWithBounds = <D extends number | false | null = number>(\n  value: unknown,\n  limits: AtLeastOne<{ min: number | null; max: number | null }>,\n  defaultValue?: D,\n): number | D => {\n  const isDefaultGiven = defaultValue !== undefined;\n  const numValue = toNum(value, null);\n  const min = limits?.min ?? null;\n  const max = limits?.max ?? null;\n\n  let result: number | D;\n  if (!isValidNum(numValue)) {\n    result = isDefaultGiven ? defaultValue : (min ?? max ?? 0);\n  } else if (min !== null && numValue < min) {\n    result = isDefaultGiven ? defaultValue : min;\n  } else if (max !== null && numValue > max) {\n    result = isDefaultGiven ? defaultValue : max;\n  } else {\n    result = numValue;\n  }\n\n  return result;\n};\n\n/**\n * Returns the largest absolute value among the given ones.\n *\n * The result is always positive.\n *\n * @category Math\n */\nexport const maxAbs = (...values: number[]) =>\n  MH.max(...values.map((v) => MH.abs(v)));\n\n/**\n * Returns the smallest absolute value among the given ones.\n *\n * The result is always positive.\n *\n * @category Math\n */\nexport const minAbs = (...values: number[]) =>\n  MH.min(...values.map((v) => MH.abs(v)));\n\n/**\n * Returns the value with the largest absolute value among the given ones.\n *\n * The result can be negative.\n *\n * @category Math\n */\nexport const havingMaxAbs = (...values: number[]): number =>\n  MH.lengthOf(values)\n    ? values.sort((a, b) => MH.abs(b) - MH.abs(a))[0]\n    : -MC.INFINITY;\n\n/**\n * Returns the value with the smallest absolute value among the given ones.\n *\n * The result can be negative.\n *\n * @category Math\n */\nexport const havingMinAbs = (...values: number[]) =>\n  MH.lengthOf(values)\n    ? values.sort((a, b) => MH.abs(a) - MH.abs(b))[0]\n    : MC.INFINITY;\n\n/**\n * Returns the angle (in radians) that the vector defined by the given x, y\n * makes with the positive horizontal axis.\n *\n * The angle returned is in the range -PI to PI, not including -PI.\n *\n * @category Math\n */\nexport const hAngle = (x: number, y: number) =>\n  normalizeAngle(MC.MATH.atan2(y, x)); // ensure that -PI is transformed to +PI\n\n/**\n * Normalizes the given angle (in radians) so that it's in the range -PI to PI,\n * not including -PI.\n *\n * @category Math\n */\nexport const normalizeAngle = (a: number) => {\n  // ensure it's positive in the range 0 to 2 PI\n  while (a < 0 || a > MC.PI * 2) {\n    a += (a < 0 ? 1 : -1) * MC.PI * 2;\n  }\n\n  // then, if > PI, offset by - 2PI\n  return a > MC.PI ? a - MC.PI * 2 : a;\n};\n\n/**\n * Converts the given angle in degrees to radians.\n *\n * @category Math\n */\nexport const degToRad = (a: number) => (a * MC.PI) / 180;\n\n/**\n * Converts the given angle in radians to degrees.\n *\n * @category Math\n */\nexport const radToDeg = (a: number) => (a * 180) / MC.PI;\n\n/**\n * Returns true if the given vectors point in the same direction.\n *\n * @param {} angleDiffThreshold\n *                  Sets the threshold in degrees when comparing the angles of\n *                  two vectors. E.g. for 5 degrees threshold, directions\n *                  whose vectors are within 5 degrees of each other are\n *                  considered parallel.\n *                  It doesn't make sense for this value to be < 0 or >= 90\n *                  degrees. If it is, it's forced to be positive (absolute)\n *                  and <= 89.99.\n *\n * @category Math\n */\nexport const areParallel = (vA: Vector, vB: Vector, angleDiffThreshold = 0) => {\n  const angleA = hAngle(vA[0], vA[1]);\n  const angleB = hAngle(vB[0], vB[1]);\n  angleDiffThreshold = MH.min(89.99, MH.abs(angleDiffThreshold));\n\n  return (\n    MH.abs(normalizeAngle(angleA - angleB)) <= degToRad(angleDiffThreshold)\n  );\n};\n\n/**\n * Returns true if the given vectors point in the opposite direction.\n *\n * @param {} angleDiffThreshold\n *                  Sets the threshold in degrees when comparing the angles of\n *                  two vectors. E.g. for 5 degrees threshold, directions\n *                  whose vectors are within 175-185 degrees of each other are\n *                  considered antiparallel.\n *                  It doesn't make sense for this value to be < 0 or >= 90\n *                  degrees. If it is, it's forced to be positive (absolute)\n *                  and <= 89.99.\n *\n * @category Math\n */\nexport const areAntiParallel = (\n  vA: Vector,\n  vB: Vector,\n  angleDiffThreshold = 0,\n) => areParallel(vA, [-vB[0], -vB[1]], angleDiffThreshold);\n\n/**\n * Returns the distance between two points on the screen.\n *\n * @category Math\n */\nexport const distanceBetween = (ptA: Point, ptB: Point) =>\n  MH.sqrt(MH.pow(ptA[0] - ptB[0], 2) + MH.pow(ptA[1] - ptB[1], 2));\n\n/**\n * Returns the two roots of the quadratic equation with coefficients\n * `a`, `b` & `c`, i.e. `a * x^2 + b * x + c = 0`\n *\n * The roots may be `NaN` if the quadratic has no real solutions.\n *\n * @category Math\n */\nexport const quadraticRoots = (a: number, b: number, c: number) => {\n  const z = MH.sqrt(b * b - 4 * a * c);\n  return [(-b + z) / (2 * a), (-b - z) / (2 * a)];\n};\n\n/**\n * Returns the value that an \"easing\" quadratic function would have at the\n * given x.\n *\n * @see https://easings.net/#easeInOutQuad\n *\n * @category Math\n */\nexport const easeInOutQuad = (x: number) =>\n  x < 0.5 ? 2 * x * x : 1 - MH.pow(-2 * x + 2, 2) / 2;\n\n/**\n * Returns an array of object's keys sorted by the numeric value they hold.\n *\n * @category Math\n */\nexport const sortedKeysByVal = <T extends Record<string, number>>(\n  obj: T,\n  descending = false,\n): Array<keyof T> => {\n  if (descending) {\n    return MH.keysOf(obj).sort((x: keyof T, y: keyof T) => obj[y] - obj[x]);\n  }\n\n  return MH.keysOf(obj).sort((x: keyof T, y: keyof T) => obj[x] - obj[y]);\n};\n\n/**\n * Returns the key in the given object which holds the largest numeric value.\n *\n * If the object is empty, returns `undefined`.\n *\n * @category Math\n */\nexport const keyWithMaxVal = (\n  obj: Record<string, number>,\n): string | undefined => {\n  return sortedKeysByVal(obj).slice(-1)[0];\n};\n\n/**\n * Returns the key in the given object which holds the smallest numeric value.\n *\n * If the object is empty, returns `undefined`.\n *\n * @category Math\n */\nexport const keyWithMinVal = (\n  obj: Record<string, number>,\n): string | undefined => {\n  return sortedKeysByVal(obj).slice(0, 1)[0];\n};\n\n/**\n * Takes two integers and returns a bitmask that covers all values between\n * 1 << start and 1 << end, _including the starting and ending one_.\n *\n * If pStart > pEnd, they are reversed.\n *\n * getBitmask(start, start) always returns 1 << start\n * getBitmask(start, end) always returns same as getBitmask(end, start)\n *\n * @category Math\n */\nexport const getBitmask = (start: number, end: number): number =>\n  start > end\n    ? getBitmask(end, start)\n    : (~0 >>> (32 - end - 1 + start)) << start;\n"],"mappings":"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","ignoreList":[]}