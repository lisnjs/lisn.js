{"version":3,"file":"scroll-watcher.cjs","names":["MC","_interopRequireWildcard","require","MH","_settings","_cssAlter","_directions","_domAlter","_domOptimize","_event","_log","_math","_scroll","_text","_validation","_callback","_xMap","_domWatcher","_sizeWatcher","_debug","_interopRequireDefault","e","__esModule","_getRequireWildcardCache","WeakMap","r","t","_typeof","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","o","Symbol","iterator","constructor","prototype","_createForOfIteratorHelper","Array","isArray","_unsupportedIterableToArray","length","_n","F","s","done","value","f","TypeError","next","_arrayLikeToArray","toString","slice","name","from","test","_regeneratorRuntime","c","asyncIterator","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","h","l","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","resolve","__await","then","callInvokeWithMethodAndArg","Error","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","resultName","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","displayName","isGeneratorFunction","mark","setPrototypeOf","awrap","async","Promise","keys","reverse","pop","prev","charAt","stop","rval","handle","complete","finish","_catch","delegateYield","asyncGeneratorStep","_asyncToGenerator","arguments","apply","_next","_throw","_classCallCheck","_defineProperties","_toPropertyKey","key","_createClass","_defineProperty","_toPrimitive","toPrimitive","String","Number","ScrollWatcher","exports","config","_this","CONSTRUCTOR_KEY","illegalConstructorError","logger","debug","Logger","logAtCreation","allScrollData","newWeakMap","activeListeners","allCallbacks","newXWeakMap","newMap","fetchCurrentScroll","_ref","_callee","element","realtime","isScrollEvent","previousEventData","latestData","_args","_callee$","_context","undefined","fetchScrollData","direction","_x","createCallback","handler","options","trackType","_allCallbacks$get","_element","remove","debug5","callback","wrapCallback","_debounceWindow","onRemove","deleteHandler","entry","_trackType","_options","sGet","setupOnScroll","_ref2","_callee2","userOptions","eventTarget","scrollData","listenerOptions","directions","_callee2$","_context2","fetchOnScrollOptions","_eventTarget","isRemoved","_data","TRACK_FULL","setupSizeTrack","debug4","_nRealtime","addEventListenerTo","S_SCROLL","scrollHandler","skipInitial","directionMatches","invokeCallback","_x2","_x3","_x4","removeOnScroll","_ref3","_callee3","scrollable","_allCallbacks$get2","currEntry","_callee3$","_context3","setScrollCssProps","_x5","_x6","_x7","deleteKey","prune","removeEventListenerFrom","_ref4","_callee5","scrollCallback","doc","docScrollingElement","resizeCallback","sizeWatcher","setupOnResize","observedElements","allowedToWrap","wrapper","_iterator","_step","child","domWatcher","onAddedCallback","_callee5$","_context5","debug8","getDoc","getDocScrollingElement","_callee4","thresholdsExceeded","_callee4$","_context4","hasExceededThreshold","debug9","SizeWatcher","reuse","target","onResize","S_DEBOUNCE_WINDOW","_threshold","newSet","settings","contentWrappingAllowed","getData","PREFIX_NO_WRAP","wrapScrollingContent","add","childrenOf","err","DOMWatcher","root","subtree","operation","currentTargetOf","moveElement","to","ignoreMove","onMutation","categories","S_ADDED","_x8","_ref6","_callee6","event","_activeListeners$get","_allCallbacks$get3","_iterator2","_step2","_callee6$","_context6","targetOf","isElement","isDoc","fetchScrollableElement","t0","_x9","scroll","_options$amount","isValidScrollDirection","usageError","concat","isVertical","S_UP","S_DOWN","sign","S_LEFT","targetCoordinate","amount","asFractionOf","el","S_SCROLL_TOP","getClientHeightNow","S_SCROLL_LEFT","getClientWidthNow","S_SCROLL_HEIGHT","S_SCROLL_WIDTH","top","left","scrollTo","_ref7","_callee7","_args7","_callee7$","_context7","t1","t2","t3","duration","_scrollDuration","t4","t5","t6","t7","merge","_x10","fetchCurrentScrollAction","getCurrentScrollAction","stopUserScrolling","_callee8","stopScroll","_args8","_callee8$","_context8","elScrollTo","immediate","waitForMeasureTime","trackScroll","noTrackScroll","onScroll","TRACK_REGULAR","offScroll","fetchMainContentElement","fetchMainScrollableElement","getConfig","myConfig","configStrKey","objToStrKey","instance","instances","SYMBOL","toNonNegNum","_scrollThreshold","scrollThreshold","scrollDuration","_ref9","_callee9","_options$MC$S_DEBOUNC","_callee9$","_context9","validateStrList","getEventTarget","threshold","_x11","_x12","userDirections","latestDirection","includes","lastThresholdData","topDiff","maxAbs","S_CLIENT_HEIGHT","leftDiff","S_CLIENT_WIDTH","checkTop","checkLeft","S_NONE","S_AMBIGUOUS","S_RIGHT","_ref10","_callee10","scrollTop","scrollLeft","scrollWidth","scrollHeight","clientWidth","clientHeight","scrollTopFraction","scrollLeftFraction","prevScrollTop","prevScrollLeft","_callee10$","_context10","ceil","round","INFINITY","getMaxDeltaDirection","S_SCROLL_TOP_FRACTION","S_SCROLL_LEFT_FRACTION","_x13","_x14","_x15","prefix","tryGetMainScrollableElement","getDocElement","props","setNumericStyleProps","_prefix","copyObject","logError"],"sources":["../../../src/ts/watchers/scroll-watcher.ts"],"sourcesContent":["/**\n * @module Watchers/ScrollWatcher\n */\n\nimport * as MC from \"@lisn/globals/minification-constants\";\nimport * as MH from \"@lisn/globals/minification-helpers\";\n\nimport { settings } from \"@lisn/globals/settings\";\n\nimport { XYDirection, ScrollDirection, SizeTarget } from \"@lisn/globals/types\";\n\nimport {\n  ScrollTarget,\n  TargetCoordinate,\n  TargetCoordinates,\n  CommaSeparatedStr,\n} from \"@lisn/globals/types\";\n\nimport { getData, setNumericStyleProps } from \"@lisn/utils/css-alter\";\nimport { getMaxDeltaDirection } from \"@lisn/utils/directions\";\nimport { moveElement, wrapScrollingContent } from \"@lisn/utils/dom-alter\";\nimport { waitForMeasureTime } from \"@lisn/utils/dom-optimize\";\nimport { addEventListenerTo, removeEventListenerFrom } from \"@lisn/utils/event\";\nimport { logError } from \"@lisn/utils/log\";\nimport { toNonNegNum, maxAbs } from \"@lisn/utils/math\";\nimport {\n  scrollTo,\n  getCurrentScrollAction,\n  getClientWidthNow,\n  getClientHeightNow,\n  tryGetMainScrollableElement,\n  fetchMainContentElement,\n  fetchMainScrollableElement,\n  fetchScrollableElement,\n  isValidScrollDirection,\n  ScrollAction,\n  ScrollToOptions,\n} from \"@lisn/utils/scroll\";\nimport { objToStrKey } from \"@lisn/utils/text\";\nimport { validateStrList } from \"@lisn/utils/validation\";\n\nimport {\n  CallbackHandler,\n  Callback,\n  wrapCallback,\n} from \"@lisn/modules/callback\";\nimport { newXWeakMap } from \"@lisn/modules/x-map\";\n\nimport { MutationOperation, DOMWatcher } from \"@lisn/watchers/dom-watcher\";\nimport { SizeWatcher } from \"@lisn/watchers/size-watcher\";\n\nimport debug from \"@lisn/debug/debug\";\n\n// re-export for convenience\nexport type { ScrollAction, ScrollToOptions } from \"@lisn/utils/scroll\";\n\n/**\n * {@link ScrollWatcher} listens for scroll events in any direction.\n *\n * It manages registered callbacks globally and reuses event listeners for more\n * efficient performance.\n */\nexport class ScrollWatcher {\n  /**\n   * Call the given handler whenever the given scrollable is scrolled.\n   *\n   * Unless {@link OnScrollOptions.skipInitial} is true, the handler is also\n   * called (almost) immediately with the latest scroll data. If a scroll has\n   * not yet been observed on the scrollable and its `scrollTop` and\n   * `scrollLeft` are 0, then the direction is {@link Types.NoDirection} and\n   * the handler is only called if {@link Types.NoDirection} is part of the\n   * supplied {@link OnScrollOptions.directions | options.directions} (or\n   * {@link OnScrollOptions.directions | options.directions} is not given).\n   *\n   * **IMPORTANT:** The same handler can _not_ be added multiple times for the\n   * same scrollable, even if the options differ. If the handler has already\n   * been added for this scrollable, either using {@link trackScroll} or using\n   * {@link onScroll}, then it will be removed and re-added with the current\n   * options. So if previously it was also tracking content size changes using\n   * {@link trackScroll}, it will no longer do so.\n   *\n   * @throws {@link Errors.LisnUsageError | LisnUsageError}\n   *                If the options are invalid.\n   */\n  readonly onScroll: (\n    handler: OnScrollHandler,\n    options?: OnScrollOptions,\n  ) => Promise<void>;\n\n  /**\n   * Removes a previously added handler.\n   *\n   * @throws {@link Errors.LisnUsageError | LisnUsageError}\n   *                If the scrollable is invalid.\n   */\n  readonly offScroll: (\n    handler: OnScrollHandler,\n    scrollable?: ScrollTarget,\n  ) => void;\n\n  /**\n   * This everything that {@link onScroll} does plus more:\n   *\n   * In addition to a scroll event, the handler is also called when either the\n   * offset size or scroll (content) size of the scrollable changes as that\n   * would affect its `scrollTopFraction` and `scrollLeftFraction` and possibly\n   * the `scrollTop` and `scrollLeft` as well.\n   *\n   * **IMPORTANT:** The same handler can _not_ be added multiple times for the\n   * same scrollable, even if the options differ. If the handler has already\n   * been added for this scrollable, either using {@link trackScroll} or using\n   * {@link onScroll}, then it will be removed and re-added with the current\n   * options.\n   *\n   * ------\n   *\n   * If `handler` is not given, then it defaults to an internal handler that\n   * updates a set of CSS variables on the scrollable element's style:\n   *\n   * - If {@link OnScrollOptions.scrollable | options.scrollable} is not given,\n   *   or is `null`, `window` or `document`, the following CSS variables are\n   *   set on the root (`html`) element and represent the scroll of the\n   *   {@link fetchMainScrollableElement}:\n   *   - `--lisn-js--page-scroll-top`\n   *   - `--lisn-js--page-scroll-top-fraction`\n   *   - `--lisn-js--page-scroll-left`\n   *   - `--lisn-js--page-scroll-left-fraction`\n   *   - `--lisn-js--page-scroll-width`\n   *   - `--lisn-js--page-scroll-height`\n   *\n   * - Otherwise, the following variables are set on the scrollable itself,\n   *   and represent its scroll offset:\n   *   - `--lisn-js--scroll-top`\n   *   - `--lisn-js--scroll-top-fraction`\n   *   - `--lisn-js--scroll-left`\n   *   - `--lisn-js--scroll-left-fraction`\n   *   - `--lisn-js--scroll-width`\n   *   - `--lisn-js--scroll-height`\n   *\n   * @throws {@link Errors.LisnUsageError | LisnUsageError}\n   *                If the options are invalid.\n   */\n  readonly trackScroll: (\n    handler?: OnScrollHandler | null,\n    options?: OnScrollOptions,\n  ) => Promise<void>;\n\n  /**\n   * Removes a previously added handler for {@link trackScroll}.\n   *\n   * @throws {@link Errors.LisnUsageError | LisnUsageError}\n   *                If the scrollable is invalid.\n   */\n  readonly noTrackScroll: (\n    handler?: OnScrollHandler | null,\n    scrollable?: ScrollTarget,\n  ) => void;\n\n  /**\n   * Get the scroll offset of the given scrollable. By default, it will\n   * {@link waitForMeasureTime} and so will be delayed by one frame.\n   *\n   * @param {} realtime If true, it will not {@link waitForMeasureTime}. Use\n   *                    this only when doing realtime scroll-based animations\n   *                    as it may cause a forced layout.\n   *\n   * @throws {@link Errors.LisnUsageError | LisnUsageError}\n   *                If the scrollable is invalid.\n   */\n  readonly fetchCurrentScroll: (\n    scrollable?: ScrollTarget,\n    realtime?: boolean,\n  ) => Promise<ScrollData>;\n\n  /**\n   * Scrolls the given scrollable element to in the given direction.\n   *\n   * @throws {@link Errors.LisnUsageError | LisnUsageError}\n   *                If the direction or options are invalid.\n   */\n  readonly scroll: (\n    direction: XYDirection,\n    options?: ScrollOptions,\n  ) => Promise<ScrollAction | null>;\n\n  /**\n   * Scrolls the given scrollable element to the given `to` scrollable.\n   *\n   * Returns `null` if there's an ongoing scroll that is not cancellable.\n   *\n   * Note that if `to` is an element or a selector, then it _must_ be a\n   * descendant of the scrollable element.\n   *\n   * @throws {@link Errors.LisnUsageError | LisnUsageError}\n   *                If the \"to\" coordinates or options are invalid.\n   *\n   * @param {} to  If this is an element, then its top-left position is used as\n   *               the target coordinates. If it is a string, then it is treated\n   *               as a selector for an element using `querySelector`.\n   * @param {} [options.scrollable]\n   *               If not given, it defaults to {@link fetchMainScrollableElement}\n   *\n   * @return {} `null` if there's an ongoing scroll that is not cancellable,\n   * otherwise a {@link ScrollAction}.\n   */\n  readonly scrollTo: (\n    to: TargetCoordinates | Element | string,\n    options?: ScrollToOptions,\n  ) => Promise<ScrollAction | null>;\n\n  /**\n   * Returns the current {@link ScrollAction} if any.\n   *\n   * @param {} scrollable\n   *               If not given, it defaults to {@link fetchMainScrollableElement}\n   *\n   * @throws {@link Errors.LisnUsageError | LisnUsageError}\n   *                If the scrollable is invalid.\n   */\n  readonly fetchCurrentScrollAction: (\n    scrollable?: Element,\n  ) => Promise<ScrollAction | null>;\n\n  /**\n   * Cancels the ongoing scroll that's resulting from smooth scrolling\n   * triggered in the past. Does not interrupt or prevent further scrolling.\n   *\n   * @throws {@link Errors.LisnUsageError | LisnUsageError}\n   *                If the scrollable is invalid.\n   *\n   * @param {} [options.immediate]  If true, then it will not use\n   *                                {@link waitForMeasureTime} or\n   *                                {@link Utils.waitForMutateTime | waitForMutateTime}.\n   *                                Warning: this will likely result in forced layout.\n   */\n  readonly stopUserScrolling: (options?: {\n    scrollable?: ScrollTarget;\n    immediate?: boolean;\n  }) => Promise<void>;\n\n  /**\n   * Returns the element that holds the main page content. By default it's\n   * `document.body` but is overridden by\n   * {@link settings.mainScrollableElementSelector}.\n   *\n   * It will wait for the element to be available if not already.\n   */\n  static fetchMainContentElement(): Promise<HTMLElement> {\n    return fetchMainContentElement();\n  }\n\n  /**\n   * Returns the scrollable element that holds the wrapper around the main page\n   * content. By default it's `document.scrollable` (unless `document.body` is\n   * actually scrollable, in which case it will be used) but it will be\n   * different if {@link settings.mainScrollableElementSelector} is set.\n   *\n   * It will wait for the element to be available if not already.\n   */\n  static fetchMainScrollableElement(): Promise<HTMLElement> {\n    return fetchMainScrollableElement();\n  }\n\n  /**\n   * Creates a new instance of ScrollWatcher with the given\n   * {@link ScrollWatcherConfig}. It does not save it for future reuse.\n   */\n  static create(config: ScrollWatcherConfig = {}) {\n    return new ScrollWatcher(getConfig(config), CONSTRUCTOR_KEY);\n  }\n\n  /**\n   * Returns an existing instance of ScrollWatcher with the given\n   * {@link ScrollWatcherConfig}, or creates a new one.\n   *\n   * **NOTE:** It saves it for future reuse, so don't use this for temporary\n   * short-lived watchers.\n   */\n  static reuse(config: ScrollWatcherConfig = {}) {\n    const myConfig = getConfig(config);\n    const configStrKey = objToStrKey(myConfig);\n\n    let instance = instances.get(configStrKey);\n    if (!instance) {\n      instance = new ScrollWatcher(myConfig, CONSTRUCTOR_KEY);\n      instances.set(configStrKey, instance);\n    }\n\n    return instance;\n  }\n\n  private constructor(\n    config: ScrollWatcherConfigInternal,\n    key: typeof CONSTRUCTOR_KEY,\n  ) {\n    if (key !== CONSTRUCTOR_KEY) {\n      throw MH.illegalConstructorError(\"ScrollWatcher.create\");\n    }\n\n    const logger = debug\n      ? new debug.Logger({ name: \"ScrollWatcher\", logAtCreation: config })\n      : null;\n\n    const allScrollData = MH.newWeakMap<Element, ScrollData>();\n\n    const activeListeners = MH.newWeakMap<\n      ScrollTarget,\n      { _nRealtime: number }\n    >();\n\n    const allCallbacks = newXWeakMap<\n      Element,\n      Map<OnScrollHandler, CallbackEntry>\n    >(() => MH.newMap());\n\n    // ----------\n\n    const fetchCurrentScroll = async (\n      element: Element,\n      realtime = false,\n      isScrollEvent = false,\n    ): Promise<ScrollData> => {\n      // The scroll data can change event without a scroll event, e.g. by the\n      // element changing size, so always get the latest here.\n      const previousEventData = allScrollData.get(element);\n      const latestData = await fetchScrollData(\n        element,\n        previousEventData,\n        realtime,\n      );\n\n      // If there hasn't been a scroll event, use the old scroll direction\n      if (!isScrollEvent && previousEventData) {\n        latestData.direction = previousEventData.direction;\n      }\n      return latestData;\n    };\n\n    // ----------\n\n    const createCallback = (\n      handler: OnScrollHandler,\n      options: OnScrollOptionsInternal,\n      trackType: TrackType,\n    ): CallbackEntry => {\n      const element = options._element;\n      MH.remove(allCallbacks.get(element)?.get(handler)?._callback);\n\n      debug: logger?.debug5(\"Adding/updating handler\", options);\n      const callback = wrapCallback(handler, options._debounceWindow);\n      callback.onRemove(() => {\n        deleteHandler(handler, options);\n      });\n\n      const entry = {\n        _callback: callback,\n        _trackType: trackType,\n        _options: options,\n      };\n      allCallbacks.sGet(element).set(handler, entry);\n\n      return entry;\n    };\n\n    // ----------\n\n    const setupOnScroll = async (\n      handler: OnScrollHandler,\n      userOptions: OnScrollOptions | undefined,\n      trackType: TrackType,\n    ) => {\n      const options = await fetchOnScrollOptions(config, userOptions || {});\n      const element = options._element;\n\n      // Don't await for the scroll data before creating the callback so that\n      // setupOnScroll and removeOnScroll have the same \"timing\" and therefore\n      // calling onScroll and offScroll immediately without awaiting removes the\n      // callback.\n      const entry = createCallback(handler, options, trackType);\n      const callback = entry._callback;\n\n      const eventTarget = options._eventTarget;\n      const scrollData = await fetchCurrentScroll(\n        element,\n        options._debounceWindow === 0,\n      );\n\n      if (callback.isRemoved()) {\n        return;\n      }\n\n      entry._data = scrollData;\n      allScrollData.set(element, scrollData);\n\n      if (trackType === TRACK_FULL) {\n        await setupSizeTrack(entry);\n      }\n\n      let listenerOptions = activeListeners.get(eventTarget);\n      if (!listenerOptions) {\n        debug: logger?.debug4(\"Adding scroll listener\", eventTarget);\n        listenerOptions = { _nRealtime: 0 };\n        activeListeners.set(eventTarget, listenerOptions);\n        // Don't debounce the scroll handler, only the callbacks.\n        addEventListenerTo(eventTarget, MC.S_SCROLL, scrollHandler);\n      }\n\n      if (options._debounceWindow === 0) {\n        listenerOptions._nRealtime++;\n      }\n\n      const directions = options._directions;\n      if (\n        !callback.isRemoved() &&\n        !userOptions?.skipInitial &&\n        directionMatches(directions, scrollData.direction)\n      ) {\n        debug: logger?.debug5(\"Calling initially with\", element, scrollData);\n        // Use a one-off callback that's not debounced for the initial call.\n        await invokeCallback(wrapCallback(handler), element, scrollData);\n      }\n    };\n\n    // ----------\n\n    const removeOnScroll = async (\n      handler: OnScrollHandler,\n      scrollable: ScrollTarget | undefined,\n      trackType: TrackType,\n    ) => {\n      const options = await fetchOnScrollOptions(config, { scrollable });\n      const element = options._element;\n      const currEntry = allCallbacks.get(element)?.get(handler);\n      if (currEntry?._trackType === trackType) {\n        MH.remove(currEntry._callback);\n\n        if (handler === setScrollCssProps) {\n          // delete the properties\n          setScrollCssProps(element, null);\n        }\n      }\n    };\n\n    // ----------\n\n    const deleteHandler = (\n      handler: OnScrollHandler,\n      options: OnScrollOptionsInternal,\n    ) => {\n      const element = options._element;\n      const eventTarget = options._eventTarget;\n\n      MH.deleteKey(allCallbacks.get(element), handler);\n      allCallbacks.prune(element);\n\n      const listenerOptions = activeListeners.get(eventTarget);\n      if (listenerOptions && options._debounceWindow === 0) {\n        listenerOptions._nRealtime--;\n      }\n\n      if (!allCallbacks.has(element)) {\n        debug: logger?.debug4(\n          \"No more callbacks for scrollable; removing listener\",\n          element,\n        );\n\n        MH.deleteKey(allScrollData, element);\n        removeEventListenerFrom(eventTarget, MC.S_SCROLL, scrollHandler);\n        MH.deleteKey(activeListeners, eventTarget);\n      }\n    };\n\n    // ----------\n\n    const setupSizeTrack = async (entry: CallbackEntry) => {\n      const options = entry._options;\n      const element = options._element;\n      const scrollCallback = entry._callback;\n      debug: logger?.debug8(\"Setting up size tracking\", element);\n\n      const doc = MH.getDoc();\n      const docScrollingElement = MH.getDocScrollingElement();\n\n      const resizeCallback = wrapCallback(async () => {\n        // Get the latest scroll data for the scrollable\n        // Currently, the resize callback is already delayed by a frame due to\n        // the SizeWatcher, so we don't need to treat this as realtime.\n        const latestData = await fetchCurrentScroll(element);\n        const thresholdsExceeded = hasExceededThreshold(\n          options,\n          latestData,\n          entry._data,\n        );\n\n        if (!thresholdsExceeded) {\n          debug: logger?.debug9(\n            \"Threshold not exceeded\",\n            options,\n            latestData,\n            entry._data,\n          );\n        } else if (!scrollCallback.isRemoved()) {\n          await invokeCallback(scrollCallback, element, latestData);\n        }\n      });\n\n      scrollCallback.onRemove(resizeCallback.remove);\n\n      // Don't use default instance as it has a high threshold.\n      const sizeWatcher = SizeWatcher.reuse();\n      const setupOnResize = (target?: SizeTarget) =>\n        sizeWatcher.onResize(resizeCallback, {\n          target,\n          [MC.S_DEBOUNCE_WINDOW]: options._debounceWindow,\n          // TODO maybe accepts resizeThreshold option\n          threshold: options._threshold,\n        });\n\n      if (element === docScrollingElement) {\n        // In case we're tracking the main document scroll, then we only need to\n        // observe the viewport size and the size of the documentElement (which is\n        // the content size).\n\n        setupOnResize(); // viewport size\n        setupOnResize(doc); // content size\n\n        return;\n      }\n\n      // ResizeObserver only detects changes in offset width/height which is\n      // the visible size of the scrolling element, and that is not affected by the\n      // size of its content.\n      // But we also need to detect changes in the scroll width/height which is\n      // the size of the content.\n      // We also need to keep track of elements being added to the scrollable element.\n\n      const observedElements = MH.newSet<Element>([element]);\n\n      // Observe the scrolling element\n      setupOnResize(element);\n\n      // And also its children (if possible, single wrapper around children\n      const allowedToWrap =\n        settings.contentWrappingAllowed === true &&\n        element !== docScrollingElement &&\n        getData(element, MC.PREFIX_NO_WRAP) === null;\n\n      let wrapper: Element;\n      if (allowedToWrap) {\n        // Wrap the content and observe the wrapper\n        wrapper = await wrapScrollingContent(element);\n        setupOnResize(wrapper);\n        observedElements.add(wrapper);\n\n        //\n      } else {\n        for (const child of MH.childrenOf(element)) {\n          setupOnResize(child);\n          observedElements.add(child);\n        }\n      }\n\n      // Watch for newly added elements\n      const domWatcher = DOMWatcher.create({\n        root: element,\n        // only direct children\n        subtree: false,\n      });\n\n      const onAddedCallback = wrapCallback((operation: MutationOperation) => {\n        const child = MH.currentTargetOf(operation);\n        // If we've just added the wrapper, it will be in DOMWatcher's queue,\n        // so check.\n        if (child !== wrapper) {\n          if (allowedToWrap) {\n            // Move this child into the wrapper. If this results in change of size\n            // for wrapper, SizeWatcher will call us.\n            moveElement(child, { to: wrapper, ignoreMove: true });\n          } else {\n            // Track the size of this child.\n            // Don't skip initial, call the callback now\n            setupOnResize(child);\n            observedElements.add(child);\n          }\n        }\n      });\n\n      domWatcher.onMutation(onAddedCallback, { categories: [MC.S_ADDED] });\n      resizeCallback.onRemove(onAddedCallback.remove);\n    };\n\n    // ----------\n\n    const scrollHandler = async (event: Event) => {\n      // We cannot use event.currentTarget because scrollHandler is called inside\n      // a setTimeout so by that time, currentTarget is null or something else.\n      //\n      // However, target and currentTarget only differ when the event is in the\n      // bubbling or capturing phase. Because\n      //\n      // - the scroll event only bubbles when fired on document, and (it only\n      //   bubbles up to window)\n      // - and we never attach the listener to the capturing phase\n      // - and we always use document instead of window to listen for scroll on\n      //   document\n      //\n      // then event.target suffices.\n      const scrollable = MH.targetOf(event);\n      /* istanbul ignore next */\n      if (!scrollable || !(MH.isElement(scrollable) || MH.isDoc(scrollable))) {\n        return;\n      }\n\n      const element = await fetchScrollableElement(scrollable);\n      const realtime = (activeListeners.get(scrollable)?._nRealtime || 0) > 0;\n      const latestData = await fetchCurrentScroll(element, realtime, true);\n      allScrollData.set(element, latestData);\n\n      debug: logger?.debug9(\"Scroll event\", element, latestData);\n\n      for (const entry of allCallbacks.get(element)?.values() || []) {\n        // Consider the direction since the last scroll event and not the\n        // direction based on the largest delta the last time the callback\n        // was called.\n        const options = entry._options;\n        const thresholdsExceeded = hasExceededThreshold(\n          options,\n          latestData,\n          entry._data,\n        );\n\n        if (!thresholdsExceeded) {\n          debug: logger?.debug9(\n            \"Threshold not exceeded\",\n            options,\n            latestData,\n            entry._data,\n          );\n          continue;\n        }\n\n        // If threshold has been exceeded, always update the latest data for\n        // this callback.\n        entry._data = latestData;\n\n        if (!directionMatches(options._directions, latestData.direction)) {\n          debug: logger?.debug9(\n            \"Direction does not match\",\n            options,\n            latestData,\n          );\n          continue;\n        }\n\n        invokeCallback(entry._callback, element, latestData);\n      }\n    };\n\n    // ----------\n\n    this.fetchCurrentScroll = (scrollable?, realtime?) =>\n      fetchScrollableElement(scrollable).then((element) =>\n        fetchCurrentScroll(element, realtime),\n      );\n\n    // ----------\n\n    this.scroll = (direction, options = {}) => {\n      if (!isValidScrollDirection(direction)) {\n        throw MH.usageError(`Unknown scroll direction: '${direction}'`);\n      }\n\n      const isVertical = direction === MC.S_UP || direction === MC.S_DOWN;\n      const sign = direction === MC.S_UP || direction === MC.S_LEFT ? -1 : 1;\n      let targetCoordinate: TargetCoordinate;\n\n      const amount = options.amount ?? 100;\n      const asFractionOf = options.asFractionOf;\n\n      if (asFractionOf === \"visible\") {\n        targetCoordinate = isVertical\n          ? (el) =>\n              el[MC.S_SCROLL_TOP] +\n              (sign * amount * getClientHeightNow(el)) / 100\n          : (el) =>\n              el[MC.S_SCROLL_LEFT] +\n              (sign * amount * getClientWidthNow(el)) / 100;\n\n        //\n      } else if (asFractionOf === \"content\") {\n        targetCoordinate = isVertical\n          ? (el) =>\n              el[MC.S_SCROLL_TOP] +\n              (sign * amount * el[MC.S_SCROLL_HEIGHT]) / 100\n          : (el) =>\n              el[MC.S_SCROLL_LEFT] +\n              (sign * amount * el[MC.S_SCROLL_WIDTH]) / 100;\n\n        //\n      } else if (asFractionOf !== undefined && asFractionOf !== \"pixel\") {\n        throw MH.usageError(\n          `Unknown 'asFractionOf' keyword: '${asFractionOf}'`,\n        );\n\n        //\n      } else {\n        targetCoordinate = isVertical\n          ? (el) => el[MC.S_SCROLL_TOP] + sign * amount\n          : (el) => el[MC.S_SCROLL_LEFT] + sign * amount;\n      }\n\n      const target = isVertical\n        ? { top: targetCoordinate }\n        : { left: targetCoordinate };\n\n      return this.scrollTo(target, options);\n    };\n\n    // ----------\n\n    this.scrollTo = async (to, options = {}) =>\n      scrollTo(\n        to,\n        MH.merge(\n          { duration: config._scrollDuration }, // default\n          options,\n          {\n            scrollable: await fetchScrollableElement(options.scrollable),\n          }, // override\n        ),\n      );\n\n    // ----------\n\n    this.fetchCurrentScrollAction = (scrollable?) =>\n      fetchScrollableElement(scrollable).then((element) =>\n        getCurrentScrollAction(element),\n      );\n\n    // ----------\n\n    this.stopUserScrolling = async (options = {}) => {\n      const element = await fetchScrollableElement(options.scrollable);\n      const stopScroll = () =>\n        MH.elScrollTo(element, {\n          top: element[MC.S_SCROLL_TOP],\n          left: element[MC.S_SCROLL_LEFT],\n        });\n\n      if (options.immediate) {\n        stopScroll();\n      } else {\n        waitForMeasureTime().then(stopScroll);\n      }\n    };\n\n    // ----------\n\n    this.trackScroll = (handler?, options?) => {\n      if (!handler) {\n        handler = setScrollCssProps;\n      }\n\n      return setupOnScroll(handler, options, TRACK_FULL);\n    };\n\n    // ----------\n\n    this.noTrackScroll = (handler?, scrollable?) => {\n      if (!handler) {\n        handler = setScrollCssProps;\n      }\n\n      removeOnScroll(handler, scrollable, TRACK_FULL); // no need to await\n    };\n\n    // ----------\n\n    this.onScroll = (handler, options?) =>\n      setupOnScroll(handler, options, TRACK_REGULAR);\n\n    // ----------\n\n    this.offScroll = (handler, scrollable?) => {\n      removeOnScroll(handler, scrollable, TRACK_REGULAR); // no need to await\n    };\n  }\n}\n\n/**\n * @interface\n */\nexport type ScrollWatcherConfig = {\n  /**\n   * The default value for\n   * {@link OnScrollOptions.debounceWindow | debounceWindow} in calls to\n   * {@link ScrollWatcher.onScroll}.\n   *\n   * @defaultValue 75\n   */\n  debounceWindow?: number;\n\n  /**\n   * The default value for\n   * {@link OnScrollOptions.threshold | threshold} in calls to\n   * {@link ScrollWatcher.onScroll}.\n   *\n   * @defaultValue 50\n   */\n  scrollThreshold?: number;\n\n  /**\n   * The default value for\n   * {@link ScrollOptions.duration | duration} in calls to\n   * {@link ScrollWatcher.scroll} and {@link ScrollWatcher.scrollTo}.\n   *\n   * @defaultValue 1000\n   */\n  scrollDuration?: number;\n};\n\n/**\n * @interface\n */\nexport type OnScrollOptions = {\n  /**\n   * If it is not given, or is `null`, `window` or `document`, then it will\n   * track the scroll of the {@link ScrollWatcher.fetchMainScrollableElement}.\n   *\n   * Other values must be an `Element` and are taken literally.\n   *\n   * @defaultValue undefined\n   */\n  scrollable?: ScrollTarget;\n\n  /**\n   * If non-0, the scroll handler will only be called when the scrollable's\n   * scroll offset in the observed direction has changed at least\n   * `scrollThreshold` pixels since the last time the handler was called.\n   *\n   * @defaultValue {@link ScrollWatcherConfig.scrollThreshold}\n   */\n  threshold?: number;\n\n  /**\n   * Specifies a list of {@link ScrollDirection}s to listen for.\n   *\n   * It can be a comma-separated list of direction names or an array of such\n   * names.\n   *\n   * If not given, then it listens for scrolls in any direction, including\n   * {@link Types.NoDirection} and {@link Types.AmbiguousDirection}.\n   *\n   * The {@link Types.NoDirection} occurs when the callback is called initially\n   * (if `skipInitial` is not `true`) and there hasn't yet been a scroll\n   * observed on the scrollable _and_ it's `scrollTop`/`scrollLeft` are 0.\n   *\n   * The {@link Types.AmbiguousDirection} occurs when the user scrolls\n   * diagonally with close to equal deltas in both horizontal and vertical\n   * direction.\n   *\n   * **IMPORTANT:**\n   *\n   * The direction of a scroll event is always based on comparing `deltaX` and\n   * `deltaY` relative to the _last scroll event_ (within the `debounceWindow`,\n   * and not to the scroll data for the last time the callback was called (in\n   * case it was skipped because `threshold` was not exceeded or in case it was\n   * debounced by a larger window than the watcher).\n   *\n   * I.e. if you have both `threshold` and `directions` restricted, or if the\n   * callback has a larger debounce window than the watcher, it is possible for\n   * there to be a change in the relevant `scrollTop`/`scrollLeft` offset that\n   * exceeds the threshold, and for the callback to _not_ be called.\n   *\n   * For a callback to be called, both of these must be true:\n   * - the change in `scrollTop`/`scrollLeft`, _compared to the last time the\n   *   callback was called_ must exceed the {@link threshold}\n   * - the effective scroll direction, _compared to the last scroll event_\n   *   prior to the _watcher's_ debounce window must be one of the given\n   *   {@link directions}.\n   *\n   * @defaultValue undefined\n   */\n  directions?: CommaSeparatedStr<ScrollDirection> | ScrollDirection[];\n\n  /**\n   * Do not call the handler until there's a future scroll of the element.\n   *\n   * By default we call the handler (almost) immediately if there's been a\n   * scroll in one of the given directions, or if there has not been a scroll\n   * but directions includes {@link Types.NoDirection}, but you can disable\n   * this initial call here.\n   *\n   * @defaultValue false\n   */\n  skipInitial?: boolean;\n\n  /**\n   * If non-0, the handler will be \"debounced\" so it's called at most\n   * `debounceWindow` milliseconds.\n   *\n   * **IMPORTANT:**\n   * If the debounce window is non-0 (default), then the callback is always\n   * delayed by at least an animation frame following a scroll event to allow\n   * for optimized `scrollTop`/`scrollLeft` measurements via\n   * {@link waitForMeasureTime}.\n   *\n   * If you set this is 0, this indicates that the callback should be\n   * \"realtime\" and will therefore skip {@link waitForMeasureTime}, which could\n   * lead to forced re-layouts, but you probably need this when doing\n   * scroll-based animations.\n   *\n   * @defaultValue {@link ScrollWatcherConfig.debounceWindow}\n   */\n  debounceWindow?: number;\n};\n\n/**\n * @interface\n */\nexport type ScrollOptions = ScrollToOptions & {\n  /**\n   * How much to scroll in the given direction.\n   *\n   * @defaultValue 100\n   */\n  amount?: number;\n\n  /**\n   * If set to \"pixel\" (default), `amount` is taken as absolute pixels.\n   *\n   * If set to \"visible\", `amount` is taken as percent of the element's visible\n   * size in the scrolling direction (100 means full client width for\n   * horizontal or height for vertical scroll).\n   *\n   * If set to \"content\", `amount` is taken as percent of the element's full\n   * content size in the scrolling direction (100 means full scroll width for\n   * horizontal or height for vertical scroll).\n   *\n   * @defaultValue \"pixel\"\n   */\n  asFractionOf?: \"pixel\" | \"visible\" | \"content\";\n};\n\n/**\n * The handler is invoked with two arguments:\n *\n * - the element that has been resized\n * - the {@link ScrollData} for the element\n */\nexport type OnScrollHandlerArgs = [Element, ScrollData];\nexport type OnScrollCallback = Callback<OnScrollHandlerArgs>;\nexport type OnScrollHandler =\n  | CallbackHandler<OnScrollHandlerArgs>\n  | OnScrollCallback;\n\nexport type ScrollData = {\n  clientWidth: number;\n  clientHeight: number;\n\n  scrollTop: number;\n\n  /**\n   * This is the `scrollTop` relative to the full `scrollHeight` minus the\n   * `clientHeight`, ranging from 0 to 1.\n   */\n  scrollTopFraction: number;\n\n  scrollLeft: number;\n\n  /**\n   * This is the `scrollLeft` relative to the full `scrollWidth` minus the\n   * `clientWidth`, ranging from 0 to 1.\n   */\n  scrollLeftFraction: number;\n\n  scrollWidth: number;\n  scrollHeight: number;\n\n  /**\n   * This is the direction of the last scroll action, i.e. _compared to the\n   * last scroll event_, not necessarily based on the deltas compared to the\n   * last time this callback was called.\n   */\n  direction: ScrollDirection;\n};\n\n// ----------------------------------------\n\ntype ScrollWatcherConfigInternal = {\n  _debounceWindow: number;\n  _scrollThreshold: number;\n  _scrollDuration: number;\n};\n\ntype OnScrollOptionsInternal = {\n  _element: Element;\n  _eventTarget: ScrollTarget;\n  _directions: ScrollDirection[] | null;\n  _threshold: number;\n  _debounceWindow: number;\n};\n\ntype CallbackEntry = {\n  _callback: OnScrollCallback;\n  _trackType: TrackType;\n  _options: OnScrollOptionsInternal;\n  _data?: ScrollData;\n};\n\ntype TrackType = typeof TRACK_REGULAR | typeof TRACK_FULL;\n\nconst CONSTRUCTOR_KEY: unique symbol = MC.SYMBOL() as typeof CONSTRUCTOR_KEY;\nconst instances = MH.newMap<string, ScrollWatcher>();\n\nconst getConfig = (\n  config: ScrollWatcherConfig,\n): ScrollWatcherConfigInternal => {\n  return {\n    _debounceWindow: toNonNegNum(config[MC.S_DEBOUNCE_WINDOW], 75),\n    // If threshold is 0, internally treat as 1 (pixel)\n    _scrollThreshold: toNonNegNum(config.scrollThreshold, 50) || 1,\n    _scrollDuration: toNonNegNum(config.scrollDuration, 1000),\n  };\n};\n\nconst TRACK_REGULAR = 1; // only scroll events\nconst TRACK_FULL = 2; // scroll + resizing of content and/or wrapper\n\n// --------------------\n\nconst fetchOnScrollOptions = async (\n  config: ScrollWatcherConfigInternal,\n  options: OnScrollOptions,\n): Promise<OnScrollOptionsInternal> => {\n  const directions =\n    validateStrList(\"directions\", options.directions, isValidScrollDirection) ||\n    null;\n\n  const element = await fetchScrollableElement(options.scrollable);\n\n  return {\n    _element: element,\n    _eventTarget: getEventTarget(element),\n    _directions: directions,\n    // If threshold is 0, internally treat as 1 (pixel)\n    _threshold: toNonNegNum(options.threshold, config._scrollThreshold) || 1,\n    _debounceWindow: options[MC.S_DEBOUNCE_WINDOW] ?? config._debounceWindow,\n  };\n};\n\nconst directionMatches = (\n  userDirections: ScrollDirection[] | null,\n  latestDirection: ScrollDirection,\n) => !userDirections || MH.includes(userDirections, latestDirection);\n\nconst hasExceededThreshold = (\n  options: OnScrollOptionsInternal,\n  latestData: ScrollData,\n  lastThresholdData: ScrollData | undefined,\n): boolean => {\n  const directions = options._directions;\n  const threshold = options._threshold;\n  if (!lastThresholdData) {\n    /* istanbul ignore */\n    return false;\n  }\n\n  const topDiff = maxAbs(\n    latestData[MC.S_SCROLL_TOP] - lastThresholdData[MC.S_SCROLL_TOP],\n    latestData[MC.S_SCROLL_HEIGHT] - lastThresholdData[MC.S_SCROLL_HEIGHT],\n    latestData[MC.S_CLIENT_HEIGHT] - lastThresholdData[MC.S_CLIENT_HEIGHT],\n  );\n\n  const leftDiff = maxAbs(\n    latestData[MC.S_SCROLL_LEFT] - lastThresholdData[MC.S_SCROLL_LEFT],\n    latestData[MC.S_SCROLL_WIDTH] - lastThresholdData[MC.S_SCROLL_WIDTH],\n    latestData[MC.S_CLIENT_WIDTH] - lastThresholdData[MC.S_CLIENT_WIDTH],\n  );\n\n  // If the callback is only interested in up/down, then only check the\n  // scrollTop delta, and similarly for left/right.\n  let checkTop = false,\n    checkLeft = false;\n  if (\n    !directions ||\n    MH.includes(directions, MC.S_NONE) ||\n    MH.includes(directions, MC.S_AMBIGUOUS)\n  ) {\n    checkTop = checkLeft = true;\n  } else {\n    if (\n      MH.includes(directions, MC.S_UP) ||\n      MH.includes(directions, MC.S_DOWN)\n    ) {\n      checkTop = true;\n    }\n    if (\n      MH.includes(directions, MC.S_LEFT) ||\n      MH.includes(directions, MC.S_RIGHT)\n    ) {\n      checkLeft = true;\n    }\n  }\n\n  return (\n    (checkTop && topDiff >= threshold) || (checkLeft && leftDiff >= threshold)\n  );\n};\n\nconst fetchScrollData = async (\n  element: Element,\n  previousEventData: ScrollData | undefined,\n  realtime: boolean,\n): Promise<ScrollData> => {\n  if (!realtime) {\n    await waitForMeasureTime();\n  }\n\n  const scrollTop = MH.ceil(element[MC.S_SCROLL_TOP]);\n  const scrollLeft = MH.ceil(element[MC.S_SCROLL_LEFT]);\n  const scrollWidth = element[MC.S_SCROLL_WIDTH];\n  const scrollHeight = element[MC.S_SCROLL_HEIGHT];\n  const clientWidth = getClientWidthNow(element);\n  const clientHeight = getClientHeightNow(element);\n\n  const scrollTopFraction =\n    MH.round(scrollTop) / (scrollHeight - clientHeight || MC.INFINITY);\n  const scrollLeftFraction =\n    MH.round(scrollLeft) / (scrollWidth - clientWidth || MC.INFINITY);\n\n  const prevScrollTop = previousEventData?.scrollTop || 0;\n  const prevScrollLeft = previousEventData?.scrollLeft || 0;\n\n  const direction = getMaxDeltaDirection(\n    scrollLeft - prevScrollLeft,\n    scrollTop - prevScrollTop,\n  );\n\n  return {\n    direction,\n    [MC.S_SCROLL_TOP]: scrollTop,\n    [MC.S_SCROLL_TOP_FRACTION]: scrollTopFraction,\n    [MC.S_SCROLL_LEFT]: scrollLeft,\n    [MC.S_SCROLL_LEFT_FRACTION]: scrollLeftFraction,\n    [MC.S_SCROLL_WIDTH]: scrollWidth,\n    [MC.S_SCROLL_HEIGHT]: scrollHeight,\n    [MC.S_CLIENT_WIDTH]: clientWidth,\n    [MC.S_CLIENT_HEIGHT]: clientHeight,\n  };\n};\n\nconst setScrollCssProps = (\n  element: Element,\n  scrollData: Partial<ScrollData> | undefined | null,\n) => {\n  let prefix = \"\";\n  if (element === tryGetMainScrollableElement()) {\n    // Set the CSS vars on the root element\n    element = MH.getDocElement();\n    prefix = \"page-\";\n  }\n\n  scrollData = scrollData || {};\n  const props = {\n    [MC.S_SCROLL_TOP]: scrollData[MC.S_SCROLL_TOP],\n    [MC.S_SCROLL_TOP_FRACTION]: scrollData[MC.S_SCROLL_TOP_FRACTION],\n    [MC.S_SCROLL_LEFT]: scrollData[MC.S_SCROLL_LEFT],\n    [MC.S_SCROLL_LEFT_FRACTION]: scrollData[MC.S_SCROLL_LEFT_FRACTION],\n    [MC.S_SCROLL_WIDTH]: scrollData[MC.S_SCROLL_WIDTH],\n    [MC.S_SCROLL_HEIGHT]: scrollData[MC.S_SCROLL_HEIGHT],\n  };\n  setNumericStyleProps(element, props, { _prefix: prefix });\n};\n\nconst getEventTarget = (element: Element): ScrollTarget => {\n  if (element === MH.getDocScrollingElement()) {\n    return MH.getDoc();\n  }\n\n  return element;\n};\n\nconst invokeCallback = (\n  callback: OnScrollCallback,\n  element: Element,\n  scrollData: ScrollData,\n) => callback.invoke(element, MH.copyObject(scrollData)).catch(logError);\n"],"mappings":"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AgH,WAAA,kBAAArI,CAAA,QAAAkB,CAAA,GAAAlB,CAAA,CAAAiB,IAAA,CAAAZ,CAAA,EAAAD,CAAA,gCAAAE,OAAA,CAAAY,CAAA,UAAAA,CAAA,YAAAkB,SAAA,yEAAAhC,CAAA,GAAAkI,MAAA,GAAAC,MAAA,EAAAlI,CAAA,KADA;AACA;AACA;AAmDA;AAGA;AACA;AACA;AACA;AACA;AACA;AALA,IAMamI,aAAa,GAAAC,OAAA,CAAAD,aAAA;EAqOxB,SAAAA,cACEE,MAAmC,EACnCT,GAA2B,EAC3B;IAAA,IAAAU,KAAA;IAAAb,eAAA,OAAAU,aAAA;IAvOF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IApBEL,eAAA;IA0BA;AACF;AACA;AACA;AACA;AACA;IALEA,eAAA;IAWA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAzCEA,eAAA;IA+CA;AACF;AACA;AACA;AACA;AACA;IALEA,eAAA;IAWA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAVEA,eAAA;IAgBA;AACF;AACA;AACA;AACA;AACA;IALEA,eAAA;IAWA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAnBEA,eAAA;IAyBA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAREA,eAAA;IAaA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAXEA,eAAA;IAwEE,IAAIF,GAAG,KAAKW,eAAe,EAAE;MAC3B,MAAM9J,EAAE,CAAC+J,uBAAuB,CAAC,sBAAsB,CAAC;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","ignoreList":[]}