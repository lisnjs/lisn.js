{"version":3,"file":"pointer-watcher.cjs","names":["MC","_interopRequireWildcard","require","MH","_event","_log","_pointer","_text","_validation","_callback","_xMap","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","_typeof","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","o","Symbol","iterator","constructor","prototype","_regeneratorRuntime","value","c","asyncIterator","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","name","mark","setPrototypeOf","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","_catch","delegateYield","_createForOfIteratorHelper","Array","isArray","_unsupportedIterableToArray","_n","F","_arrayLikeToArray","toString","from","test","asyncGeneratorStep","_asyncToGenerator","arguments","apply","_next","_throw","_classCallCheck","_defineProperties","_toPropertyKey","key","_createClass","_defineProperty","_toPrimitive","toPrimitive","String","Number","PointerWatcher","exports","config","CONSTRUCTOR_KEY","illegalConstructorError","allCallbacks","newXWeakMap","newMap","createCallback","target","handler","_allCallbacks$get","remove","callback","wrapCallback","onRemove","deleteKey","sGet","setupOnPointer","_ref","_callee","startHandler","endHandler","userOptions","options","startCallback","endCallback","_iterator","_step","action","_callee$","_context","getOptions","_actions","listenerSetupFn","err","_x","_x2","_x3","_x4","onPointer","offPointer","entry","undefined","getConfig","reuse","myConfig","configStrKey","objToStrKey","instance","instances","SYMBOL","_config$preventDefaul","_config$preventSelect","_preventDefault","preventDefault","_preventSelect","preventSelect","_options$preventDefau","_options$preventSelec","validateStrList","actions","isValidPointerAction","POINTER_ACTIONS","setupClickListener","toggleState","wrapper","event","data","S_CLICK","state","invokeCallback","addEventListenerTo","removeEventListenerFrom","setupPointerListeners","startEventSuff","S_HOVER","endEventSuff","startEvent","S_POINTER","endEvent","strReplace","startListener","endListener","undoPreventSelect","click","hover","_len","args","_key","concat","press","_len2","_key2","S_PRESS","actionData","copyObject","logError"],"sources":["../../../src/ts/watchers/pointer-watcher.ts"],"sourcesContent":["/**\n * @module Watchers/PointerWatcher\n */\n\nimport * as MC from \"@lisn/globals/minification-constants\";\nimport * as MH from \"@lisn/globals/minification-helpers\";\n\nimport { PointerAction, CommaSeparatedStr } from \"@lisn/globals/types\";\n\nimport {\n  addEventListenerTo,\n  removeEventListenerFrom,\n  preventSelect,\n  undoPreventSelect,\n} from \"@lisn/utils/event\";\nimport { logError } from \"@lisn/utils/log\";\nimport { isValidPointerAction, POINTER_ACTIONS } from \"@lisn/utils/pointer\";\nimport { objToStrKey } from \"@lisn/utils/text\";\nimport { validateStrList } from \"@lisn/utils/validation\";\n\nimport {\n  CallbackHandler,\n  Callback,\n  wrapCallback,\n} from \"@lisn/modules/callback\";\nimport { newXWeakMap } from \"@lisn/modules/x-map\";\n\n/**\n * {@link PointerWatcher} listens for simple pointer actions like clicks, press\n * and hold or hover.\n */\nexport class PointerWatcher {\n  /**\n   * Call the `startHandler` whenever the pointer action begins.\n   * Call the `endHandler` whenever the pointer action ends. If `endHandler` is\n   * not given, it defaults to `startHandler`.\n   *\n   * For an explanation of what \"begins\" and \"ends\" means for each supported\n   * action, see {@link OnPointerOptions.actions}.\n   *\n   * **IMPORTANT:** The same handlers can _not_ be added multiple times for the\n   * same event target, even if the options differ. If the handler has already\n   * been added for this target, then it will be removed and re-added with the\n   * current options.\n   */\n  readonly onPointer: (\n    target: EventTarget,\n    startHandler: OnPointerHandler,\n    endHandler?: OnPointerHandler,\n    options?: OnPointerOptions,\n  ) => Promise<void>;\n\n  /**\n   * Removes previously added handlers.\n   */\n  readonly offPointer: (\n    target: EventTarget,\n    startHandler: OnPointerHandler,\n    endHandler?: OnPointerHandler,\n  ) => void;\n\n  /**\n   * Creates a new instance of PointerWatcher with the given\n   * {@link PointerWatcherConfig}. It does not save it for future reuse.\n   */\n  static create(config: PointerWatcherConfig = {}) {\n    return new PointerWatcher(getConfig(config), CONSTRUCTOR_KEY);\n  }\n\n  /**\n   * Returns an existing instance of PointerWatcher with the given\n   * {@link PointerWatcherConfig}, or creates a new one.\n   *\n   * **NOTE:** It saves it for future reuse, so don't use this for temporary\n   * short-lived watchers.\n   */\n  static reuse(config: PointerWatcherConfig = {}) {\n    const myConfig = getConfig(config);\n    const configStrKey = objToStrKey(myConfig);\n\n    let instance = instances.get(configStrKey);\n    if (!instance) {\n      instance = new PointerWatcher(myConfig, CONSTRUCTOR_KEY);\n      instances.set(configStrKey, instance);\n    }\n\n    return instance;\n  }\n\n  private constructor(\n    config: PointerWatcherConfigInternal,\n    key: typeof CONSTRUCTOR_KEY,\n  ) {\n    if (key !== CONSTRUCTOR_KEY) {\n      throw MH.illegalConstructorError(\"PointerWatcher.create\");\n    }\n\n    // Keep this watcher super simple. The events we listen for don't fire at a\n    // high rate and it's unlikely for there to be many many callbacks for each\n    // target and event type, so don't bother with using a delegating listener,\n    // etc.\n\n    // Keep a map of callbacks so we can lookup the callback by the handler\n    // (and also to prevent duplicate handler for each target, for consistency\n    // with other watchers).\n    const allCallbacks = newXWeakMap<\n      EventTarget,\n      Map<OnPointerHandler, OnPointerCallback>\n    >(() => MH.newMap());\n\n    // ----------\n\n    const createCallback = (\n      target: EventTarget,\n      handler: OnPointerHandler,\n    ): OnPointerCallback => {\n      MH.remove(allCallbacks.get(target)?.get(handler));\n\n      const callback = wrapCallback(handler);\n      callback.onRemove(() => {\n        MH.deleteKey(allCallbacks.get(target), handler);\n      });\n\n      allCallbacks.sGet(target).set(handler, callback);\n      return callback;\n    };\n\n    // async for consistency with other watchers and future compatibility in\n    // case of change needed\n    const setupOnPointer = async (\n      target: EventTarget,\n      startHandler: OnPointerHandler,\n      endHandler: OnPointerHandler | undefined,\n      userOptions: OnPointerOptions | undefined,\n    ) => {\n      const options = getOptions(config, userOptions);\n      const startCallback = createCallback(target, startHandler);\n      const endCallback =\n        endHandler && endHandler !== startHandler\n          ? createCallback(target, endHandler)\n          : startCallback;\n\n      for (const action of options._actions) {\n        listenerSetupFn[action](target, startCallback, endCallback, options);\n      }\n    };\n\n    // ----------\n\n    this.onPointer = setupOnPointer;\n\n    // ----------\n\n    this.offPointer = (target, startHandler, endHandler?) => {\n      const entry = allCallbacks.get(target);\n      MH.remove(entry?.get(startHandler));\n      if (endHandler) {\n        MH.remove(entry?.get(endHandler));\n      }\n    };\n  }\n}\n\n/**\n * @interface\n */\nexport type PointerWatcherConfig = {\n  /**\n   * The default value for\n   * {@link OnPointerOptions.preventDefault | preventDefault} in calls to\n   * {@link PointerWatcher.onPointer}.\n   *\n   * @defaultValue false\n   */\n  preventDefault?: boolean;\n\n  /**\n   * The default value for\n   * {@link OnPointerOptions.preventSelect | preventSelect} in calls to\n   * {@link PointerWatcher.onPointer}.\n   *\n   * @defaultValue true\n   */\n  preventSelect?: boolean;\n};\n\n/**\n * @interface\n */\nexport type OnPointerOptions = {\n  /**\n   * One or more of of \"click\", \"hover\" or \"press\". If not specified, then all\n   * actions are enabled.\n   *\n   * It can be a comma-separated list of {@link PointerAction}s or an array of\n   * such actions.\n   *\n   * For click actions, the start handler is called for every odd number of\n   * clicks (1st, 3rd, 5th, etc), and the end handler is called for every other\n   * click. It functions like a toggle.\n   *\n   * For hover and press actions, the start handler is called when the pointer\n   * enters or presses down on the target respectively, and the end handler is\n   * called when the pointer leaves or comes off the target respectively.\n   *\n   * Note that on touch screens, hover and press actions behave identically.\n   *\n   * @defaultValue undefined\n   */\n  actions?: CommaSeparatedStr<PointerAction> | PointerAction[];\n\n  /**\n   * If true, the events of the pointer actions, e.g. click, will have their\n   * default action prevented.\n   *\n   * @defaultValue {@link PointerWatcherConfig.preventDefault}\n   */\n  preventDefault?: boolean;\n\n  /**\n   * If true (default), then for press actions (and hover actions on touch\n   * screens) it will prevent starting a text selection.\n   *\n   * @defaultValue {@link PointerWatcherConfig.preventSelect}\n   */\n  preventSelect?: boolean;\n};\n\n/**\n * The handler is invoked with two arguments:\n *\n * - the event target that was passed to the {@link PointerWatcher.onPointer}\n *   call (equivalent to\n *   {@link https://developer.mozilla.org/en-US/docs/Web/API/Event/currentTarget | Event:currentTarget}).\n * - the {@link PointerActionData} describing the state of the action.\n */\nexport type OnPointerHandlerArgs = [EventTarget, PointerActionData, Event];\nexport type OnPointerCallback = Callback<OnPointerHandlerArgs>;\nexport type OnPointerHandler =\n  | CallbackHandler<OnPointerHandlerArgs>\n  | OnPointerCallback;\n\nexport type PointerActionData = {\n  action: PointerAction;\n  state: \"ON\" | \"OFF\";\n};\n\n// ----------------------------------------\n\ntype PointerWatcherConfigInternal = {\n  _preventDefault: boolean;\n  _preventSelect: boolean;\n};\n\ntype OnPointerOptionsInternal = {\n  _actions: PointerAction[];\n  _preventDefault: boolean;\n  _preventSelect: boolean;\n};\n\nconst CONSTRUCTOR_KEY: unique symbol = MC.SYMBOL() as typeof CONSTRUCTOR_KEY;\nconst instances = MH.newMap<string, PointerWatcher>();\n\nconst getConfig = (\n  config: PointerWatcherConfig | undefined,\n): PointerWatcherConfigInternal => {\n  return {\n    _preventDefault: config?.preventDefault ?? false,\n    _preventSelect: config?.preventSelect ?? true,\n  };\n};\n\nconst getOptions = (\n  config: PointerWatcherConfigInternal,\n  options: OnPointerOptions | undefined,\n): OnPointerOptionsInternal => {\n  return {\n    _actions:\n      validateStrList(\"actions\", options?.actions, isValidPointerAction) ||\n      POINTER_ACTIONS,\n    _preventDefault: options?.preventDefault ?? config._preventDefault,\n    _preventSelect: options?.preventSelect ?? config._preventSelect,\n  };\n};\n\nconst setupClickListener = (\n  target: EventTarget,\n  startCallback: OnPointerCallback,\n  endCallback: OnPointerCallback,\n  options: OnPointerOptionsInternal,\n) => {\n  // false if next will start; true if next will end.\n  let toggleState = false;\n\n  const wrapper = (event: Event) => {\n    if (options._preventDefault) {\n      MH.preventDefault(event);\n    }\n\n    toggleState = !toggleState;\n\n    const data: PointerActionData = {\n      action: MC.S_CLICK,\n      state: toggleState ? \"ON\" : \"OFF\",\n    };\n\n    invokeCallback(\n      toggleState ? startCallback : endCallback,\n      target,\n      data,\n      event,\n    );\n  };\n\n  addEventListenerTo(target, MC.S_CLICK, wrapper);\n\n  const remove = () => removeEventListenerFrom(target, MC.S_CLICK, wrapper);\n\n  startCallback.onRemove(remove);\n  endCallback.onRemove(remove);\n};\n\nconst setupPointerListeners = (\n  action: typeof MC.S_HOVER | typeof MC.S_PRESS,\n  target: EventTarget,\n  startCallback: OnPointerCallback,\n  endCallback: OnPointerCallback,\n  options: OnPointerOptionsInternal,\n) => {\n  // If the browser doesn't support pointer events, then\n  // addEventListenerTo will transform these into mouse*\n  const startEventSuff = action === MC.S_HOVER ? \"enter\" : \"down\";\n  const endEventSuff = action === MC.S_HOVER ? \"leave\" : \"up\";\n  const startEvent = MC.S_POINTER + startEventSuff;\n  const endEvent = MC.S_POINTER + endEventSuff;\n\n  const wrapper = (event: Event, callback: OnPointerCallback) => {\n    if (options._preventDefault) {\n      MH.preventDefault(event);\n    }\n\n    const data: PointerActionData = {\n      action,\n      state:\n        MH.strReplace(event.type, /pointer|mouse/, \"\") === startEventSuff\n          ? \"ON\"\n          : \"OFF\",\n    };\n\n    invokeCallback(callback, target, data, event);\n  };\n  const startListener = (event: Event) => wrapper(event, startCallback);\n  const endListener = (event: Event) => wrapper(event, endCallback);\n\n  addEventListenerTo(target, startEvent, startListener);\n  addEventListenerTo(target, endEvent, endListener);\n\n  // On some touch screen devices pressing and holding will initiate select\n  // and result in touchend, so we prevent text select\n  if (options._preventSelect) {\n    preventSelect(target);\n  }\n\n  startCallback.onRemove(() => {\n    undoPreventSelect(target);\n    removeEventListenerFrom(target, startEvent, startListener);\n  });\n\n  endCallback.onRemove(() => {\n    undoPreventSelect(target);\n    removeEventListenerFrom(target, endEvent, endListener);\n  });\n};\n\nconst listenerSetupFn: {\n  [D in PointerAction]: (\n    target: EventTarget,\n    startCallback: OnPointerCallback,\n    endCallback: OnPointerCallback,\n    options: OnPointerOptionsInternal,\n  ) => void;\n} = {\n  click: setupClickListener,\n  hover: (...args) => setupPointerListeners(MC.S_HOVER, ...args),\n  press: (...args) => setupPointerListeners(MC.S_PRESS, ...args),\n} as const;\n\nconst invokeCallback = (\n  callback: OnPointerCallback,\n  target: EventTarget,\n  actionData: PointerActionData,\n  event: Event,\n) => callback.invoke(target, MH.copyObject(actionData), event).catch(logError);\n"],"mappings":"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","ignoreList":[]}