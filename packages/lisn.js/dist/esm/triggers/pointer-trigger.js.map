{"version":3,"file":"pointer-trigger.js","names":["MC","MH","waitForReferenceElement","omitKeys","validateBoolean","PointerWatcher","registerTrigger","Trigger","ClickTrigger","_Trigger","element","actions","_this","config","arguments","length","undefined","_classCallCheck","_callSuper","_defineProperty","getConfig","copyObject","setupWatcher","S_CLICK","_inherits","_createClass","key","value","register","args","newConfigValidator","PressTrigger","_Trigger2","_this2","S_PRESS","HoverTrigger","_Trigger3","_this3","S_HOVER","target","_ref","isLiteralString","preventDefault","preventSelect","widget","action","lengthOf","targetOf","startHandler","endHandler","S_TOGGLE","run","reverse","reuse","onPointer","merge"],"sources":["../../../src/ts/triggers/pointer-trigger.ts"],"sourcesContent":["/**\n * @module Triggers\n *\n * @categoryDescription Pointer\n * {@link ClickTrigger} allows you to run actions when a user clicks a target\n * element (first time and every other time, i.e. odd number of click), and\n * undo them when a user clicks the target element again (or every even number\n * of clicks). It always acts as a toggle.\n *\n * {@link PressTrigger} allows you to run actions when the user presses and\n * holds a pointing device (or their finger) on a target element, and undo\n * those actions when they release their pointing device or lift their finger\n * off.\n *\n * {@link HoverTrigger} allows you to run actions when the user hovers overs\n * a target element, and undo those actions when their pointing device moves\n * off the target. On touch devices it acts just like {@link PressTrigger}.\n */\n\nimport * as MC from \"@lisn/globals/minification-constants\";\nimport * as MH from \"@lisn/globals/minification-helpers\";\n\nimport { waitForReferenceElement } from \"@lisn/utils/dom-search\";\nimport { omitKeys } from \"@lisn/utils/misc\";\nimport { validateBoolean } from \"@lisn/utils/validation\";\n\nimport {\n  PointerWatcher,\n  OnPointerHandler,\n} from \"@lisn/watchers/pointer-watcher\";\n\nimport { Action } from \"@lisn/actions/action\";\n\nimport {\n  registerTrigger,\n  Trigger,\n  TriggerConfig,\n} from \"@lisn/triggers/trigger\";\n\nimport { WidgetConfigValidatorFunc } from \"@lisn/widgets/widget\";\n\n/**\n * {@link ClickTrigger} allows you to run actions when a user clicks a target\n * element (first time and every other time, i.e. odd number of click), and\n * undo them when a user clicks the target element again (or every even number\n * of clicks). It always acts as a toggle.\n *\n * -------\n *\n * To use with auto-widgets (HTML API), see {@link registerTrigger} for the\n * specification.\n *\n * - Arguments: none\n * - Additional trigger options: none\n *   - `target`: A string element specification.\n *     See {@link Utils.getReferenceElement | getReferenceElement}.\n *   - `prevent-default`: A boolean.\n *   - `prevent-select`: A boolean.\n *\n * @example\n * Add classes `active` and `toggled-on` when the user clicks the element\n * (first time and every other time, i.e. odd number of click), remove them\n * when clicked again (or even number of click);\n *\n * ```html\n * <div data-lisn-on-click=\"@add-class=active,toggled-on\"></div>\n * ```\n *\n * @example\n * As above, but using a CSS class instead of data attribute:\n *\n * ```html\n * <div class=\"lisn-on-click--@add-class=active,toggled-on\"></div>\n * ```\n *\n * @example\n * Play the animations on the element 1000ms after the first time the user\n * clicks it.\n *\n * ```html\n * <div data-lisn-on-click=\"@animate +once +delay=1000\"></div>\n * ```\n *\n * @example\n * Add class `visited` the first time the user clicks the element, and\n * play or reverse the animations on the element 1000ms each time the\n * user clicks it.\n *\n * ```html\n * <div data-lisn-on-click=\"@add-class=visited +once ;\n *                          @animate +delay=1000\"\n * ></div>\n * ```\n *\n * @example\n * When the user clicks the next element with class `box` then add classes `c1`\n * and `c2` to the element (that the trigger is defined on) and enable trigger\n * `my-trigger` defined on this same element; undo all of that on even number\n * of clicks on the reference box element.\n *\n * ```html\n * <div data-lisn-on-click=\"@add-class=c1,c2 @enable=my-trigger +target=next.box\"\n *      data-lisn-on-run=\"@show +id=my-trigger\"\n * ></div>\n * <div class=\"box\"></div>\n * ```\n *\n * @example\n * As above, but using `data-lisn-ref` attribute instead of class selector.\n *\n * ```html\n * <div data-lisn-on-click=\"@add-class=c1,c2 @enable=my-trigger +target=next-box\"\n *      data-lisn-on-run=\"@show +id=my-trigger\"\n * ></div>\n * <div data-lisn-ref=\"box\"></div>\n * ```\n *\n * @category Pointer\n */\nexport class ClickTrigger extends Trigger {\n  readonly getConfig: () => PointerTriggerConfig;\n\n  static register() {\n    registerTrigger(\n      MC.S_CLICK,\n      (element, args, actions, config) =>\n        new ClickTrigger(element, actions, config),\n      newConfigValidator,\n    );\n  }\n\n  /**\n   * If no actions are supplied, nothing is done.\n   *\n   * @throws {@link Errors.LisnUsageError | LisnUsageError}\n   *                If the config is invalid.\n   */\n  constructor(\n    element: Element,\n    actions: Action[],\n    config: PointerTriggerConfig = {},\n  ) {\n    super(element, actions, config);\n    this.getConfig = () => MH.copyObject(config);\n\n    setupWatcher(this, element, actions, config, MC.S_CLICK);\n  }\n}\n\n/**\n * {@link PressTrigger} allows you to run actions when the user presses and\n * holds a pointing device (or their finger) on a target element, and undo\n * those actions when they release their pointing device or lift their finger\n * off.\n *\n * -------\n *\n * To use with auto-widgets (HTML API), see {@link registerTrigger} for the\n * specification.\n *\n * - Arguments: none\n * - Additional trigger options: none\n *   - `target`: A string element specification.\n *     See {@link Utils.getReferenceElement | getReferenceElement}.\n *   - `prevent-default`: boolean\n *   - `prevent-select`: boolean\n *\n * @example\n * Add classes `active` and `pressed` when the user presses and holds (with\n * mouse, finger or any pointer) the element, remove them when they release\n * the mouse.\n *\n * ```html\n * <div data-lisn-on-press=\"@add-class=active,pressed\"></div>\n * ```\n *\n * @example\n * As above, but using a CSS class instead of data attribute:\n *\n * ```html\n * <div class=\"lisn-on-press--@add-class=active,pressed\"></div>\n * ```\n *\n * @example\n * Play the animations on the element 1000ms after the first time the user\n * presses on the element it.\n *\n * ```html\n * <div data-lisn-on-press=\"@animate +once +delay=1000\"></div>\n * ```\n *\n * @example\n * Add class `pressed` the first time the user presses on the element, and\n * play the animations on the element while the user is pressing on the element\n * with a delay of 100ms, reverse the animations as soon as the user releases\n * the mouse.\n *\n * ```html\n * <div data-lisn-on-click=\"@add-class=pressed +once ;\n *                          @animate +do-delay=100\"\n * ></div>\n * ```\n *\n * @example\n * When the user presses and holds the next element with class `box` then add\n * classes `c1` and `c2` to the element (that the trigger is defined on) and\n * enable trigger `my-trigger` defined on this same element; undo all of that\n * when they release the mouse (or lift their finger/pointer device) from the\n * reference box element.\n *\n * ```html\n * <div data-lisn-on-press=\"@add-class=c1,c2 @enable=my-trigger +target=next.box\"\n *      data-lisn-on-run=\"@show +id=my-trigger\"\n * ></div>\n * <div class=\"box\"></div>\n * ```\n *\n * @example\n * As above, but using `data-lisn-ref` attribute instead of class selector.\n *\n * ```html\n * <div data-lisn-on-press=\"@add-class=c1,c2 @enable=my-trigger +target=next-box\"\n *      data-lisn-on-run=\"@show +id=my-trigger\"\n * ></div>\n * <div data-lisn-ref=\"box\"></div>\n * ```\n *\n * @category Pointer\n */\nexport class PressTrigger extends Trigger {\n  readonly getConfig: () => PointerTriggerConfig;\n\n  static register() {\n    registerTrigger(\n      MC.S_PRESS,\n      (element, args, actions, config) =>\n        new PressTrigger(element, actions, config),\n      newConfigValidator,\n    );\n  }\n\n  /**\n   * If no actions are supplied, nothing is done.\n   *\n   * @throws {@link Errors.LisnUsageError | LisnUsageError}\n   *                If the config is invalid.\n   */\n  constructor(\n    element: Element,\n    actions: Action[],\n    config: PointerTriggerConfig = {},\n  ) {\n    super(element, actions, config);\n    this.getConfig = () => MH.copyObject(config);\n\n    setupWatcher(this, element, actions, config, MC.S_PRESS);\n  }\n}\n\n/**\n * {@link HoverTrigger} allows you to run actions when the user hovers overs\n * a target element, and undo those actions when their pointing device moves\n * off the target. On touch devices it acts just like {@link PressTrigger}.\n *\n * -------\n *\n * To use with auto-widgets (HTML API), see {@link registerTrigger} for the\n * specification.\n *\n * - Arguments: none\n * - Additional trigger options: none\n *   - `target`: A string element specification.\n *     See {@link Utils.getReferenceElement | getReferenceElement}.\n *   - `prevent-default`: boolean\n *   - `prevent-select`: boolean\n *\n * @example\n * Add classes `active` and `hovered` when the user hovers over the element,\n * remove them otherwise.\n *\n * ```html\n * <div data-lisn-on-hover=\"@add-class=active,hovered\"></div>\n * ```\n *\n * @example\n * As above, but using a CSS class instead of data attribute:\n *\n * ```html\n * <div class=\"lisn-on-press--@add-class=active,hovered\"></div>\n * ```\n *\n * @example\n * Play the animations on the element 1000ms after the first time the user\n * hovers over the element it.\n *\n * ```html\n * <div data-lisn-on-hover=\"@animate +once +delay=1000\"></div>\n * ```\n *\n * @example\n * Add class `hovered` the first time the user hovers over the element, and\n * play the animations on the element while the user is hovering over the\n * element with a delay of 100ms, reverse the animations as soon as the user\n * mouse leaves the element.\n *\n * ```html\n * <div data-lisn-on-click=\"@add-class=hovered +once ;\n *                          @animate +do-delay=100\"\n * ></div>\n * ```\n *\n * @example\n * When the user hovers over the next element with class `box` then add classes\n * `c1` and `c2` to the element (that the trigger is defined on) and enable\n * trigger `my-trigger` defined on this same element; undo all of that when\n * their pointing device (or finger) moves off the reference element.\n *\n * ```html\n * <div data-lisn-on-hover=\"@add-class=c1,c2 @enable=my-trigger +target=next.box\"\n *      data-lisn-on-run=\"@show +id=my-trigger\"\n * ></div>\n * <div class=\"box\"></div>\n * ```\n *\n * @example\n * As above, but using `data-lisn-ref` attribute instead of class selector.\n *\n * ```html\n * <div data-lisn-on-hover=\"@add-class=c1,c2 @enable=my-trigger +target=next-box\"\n *      data-lisn-on-run=\"@show +id=my-trigger\"\n * ></div>\n * <div data-lisn-ref=\"box\"></div>\n * ```\n *\n * @category Pointer\n */\nexport class HoverTrigger extends Trigger {\n  readonly getConfig: () => PointerTriggerConfig;\n\n  static register() {\n    registerTrigger(\n      MC.S_HOVER,\n      (element, args, actions, config) =>\n        new HoverTrigger(element, actions, config),\n      newConfigValidator,\n    );\n  }\n\n  /**\n   * If no actions are supplied, nothing is done.\n   *\n   * @throws {@link Errors.LisnUsageError | LisnUsageError}\n   *                If the config is invalid.\n   */\n  constructor(\n    element: Element,\n    actions: Action[],\n    config: PointerTriggerConfig = {},\n  ) {\n    super(element, actions, config);\n    this.getConfig = () => MH.copyObject(config);\n\n    setupWatcher(this, element, actions, config, MC.S_HOVER);\n  }\n}\n\n/**\n * @category Pointer\n * @interface\n */\nexport type PointerTriggerConfig = TriggerConfig & {\n  /**\n   * The target to use for the hover action.\n   *\n   * @defaultValue The element on which the {@link Trigger} is defined\n   */\n  target?: Element;\n\n  /**\n   * See {@link Watchers/PointerWatcher.OnPointerOptions | OnPointerOptions}.\n   *\n   * @defaultValue {@link PointerWatcher} default, false\n   */\n  preventDefault?: boolean;\n\n  /**\n   * See {@link Watchers/PointerWatcher.OnPointerOptions | OnPointerOptions}.\n   *\n   * @defaultValue {@link PointerWatcher} default, true\n   */\n  preventSelect?: boolean;\n};\n\n// --------------------\n\nconst newConfigValidator: WidgetConfigValidatorFunc<PointerTriggerConfig> = (\n  element,\n) => {\n  return {\n    target: (key, value) =>\n      (MH.isLiteralString(value)\n        ? waitForReferenceElement(value, element)\n        : null) ?? undefined,\n    preventDefault: validateBoolean,\n    preventSelect: validateBoolean,\n  };\n};\n\nconst setupWatcher = (\n  widget: ClickTrigger | HoverTrigger | PressTrigger,\n  element: Element,\n  actions: Action[],\n  config: PointerTriggerConfig,\n  action: \"click\" | \"hover\" | \"press\",\n) => {\n  if (!MH.lengthOf(actions)) {\n    return;\n  }\n\n  const target = MH.targetOf(config) || element;\n\n  // For clicks use the trigger's own toggle function so that it remembers ITS\n  // state rather than the odd/even clicks. Otherwise if the trigger is\n  // disabled, then clicking will \"swap\" the state.\n  let startHandler: OnPointerHandler;\n  let endHandler: OnPointerHandler;\n  if (action === MC.S_CLICK) {\n    startHandler = endHandler = widget[MC.S_TOGGLE];\n  } else {\n    startHandler = widget.run;\n    endHandler = widget.reverse;\n  }\n\n  PointerWatcher.reuse().onPointer(\n    target,\n    startHandler,\n    endHandler,\n    MH.merge(\n      {\n        actions: action,\n      },\n      omitKeys(config, { target: null }),\n    ),\n  );\n};\n"],"mappings":";;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,KAAKA,EAAE;AACd,OAAO,KAAKC,EAAE;AAEd,SAASC,uBAAuB;AAChC,SAASC,QAAQ;AACjB,SAASC,eAAe;AAExB,SACEC,cAAc;AAMhB,SACEC,eAAe,EACfC,OAAO;AAMT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAaC,YAAY,0BAAAC,QAAA;EAYvB;AACF;AACA;AACA;AACA;AACA;EACE,SAAAD,aACEE,OAAgB,EAChBC,OAAiB,EAEjB;IAAA,IAAAC,KAAA;IAAA,IADAC,MAA4B,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;IAAAG,eAAA,OAAAT,YAAA;IAEjCI,KAAA,GAAAM,UAAA,OAAAV,YAAA,GAAME,OAAO,EAAEC,OAAO,EAAEE,MAAM;IAAEM,eAAA,CAAAP,KAAA;IAChCA,KAAA,CAAKQ,SAAS,GAAG;MAAA,OAAMnB,EAAE,CAACoB,UAAU,CAACR,MAAM,CAAC;IAAA;IAE5CS,YAAY,CAAAV,KAAA,EAAOF,OAAO,EAAEC,OAAO,EAAEE,MAAM,EAAEb,EAAE,CAACuB,OAAO,CAAC;IAAC,OAAAX,KAAA;EAC3D;EAACY,SAAA,CAAAhB,YAAA,EAAAC,QAAA;EAAA,OAAAgB,YAAA,CAAAjB,YAAA;IAAA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","ignoreList":[]}