{"version":3,"file":"widget.js","names":["_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","_catch","delegateYield","_createForOfIteratorHelper","Array","isArray","_unsupportedIterableToArray","_n","F","_arrayLikeToArray","toString","from","test","asyncGeneratorStep","_asyncToGenerator","arguments","apply","_next","_throw","_classCallCheck","_defineProperties","_toPropertyKey","key","_createClass","_defineProperty","_toPrimitive","toPrimitive","String","Number","MC","MH","settings","hasClass","getData","waitForInteractive","logWarn","toArrayIfSingle","waitForDelay","formatAsString","kebabToCamelCase","splitOn","wrapCallback","newXWeakMap","DOMWatcher","debug","Widget","element","config","_this","logger","Logger","concat","logAtCreation","id","_instances$get","instances","get","destroy","sGet","set","isDisabled","isDestroyed","destroyPromise","enableCallbacks","newSet","disableCallbacks","destroyCallbacks","disable","_callee","_iterator","_step","callback","_callee$","_context","debug8","t0","enable","_callee2","_iterator2","_step2","_callee2$","_context2","toggleEnable","_callee3","_callee3$","_context3","onDisable","handler","add","onEnable","_callee4","_iterator3","_step3","elInstances","_callee4$","_context4","clear","deleteKey","prune","onDestroy","getElement","_instances$get2","registerWidget","_ref5","_callee6","newWidget","configValidator","options","_options$selector","prefixedName","selector","domWatcher","_callee6$","_context6","registeredWidgets","has","prefixName","getDefaultWidgetSelector","autoWidgets","reuse","onMutation","_ref6","_callee5","operation","thisConfigValidator","widgets","configSpecs","dataAttr","_i","_configSpecs","spec","_config","theseWidgets","_callee5$","_context5","currentTargetOf","isFunction","supportsMultiple","_toConsumableArray","fetchWidgetConfig","t1","undefined","lengthOf","_iterator4","_step4","w","err","target","categories","S_REMOVED","_x5","S_ADDED","_x","_x2","_x3","_x4","getWidgetConfig","input","validator","separator","toOptionsObject","_ref7","_callee7","configPromises","_key2","_args7","_callee7$","_context7","_x6","_x7","prefix","fetchUniqueWidget","_ref8","_callee8","Type","widget","_callee8$","_context8","_x8","_x9","_x10","newMap","_iterator5","filter","isEmpty","_step5","entry","_splitOn","_splitOn2","_slicedToArray"],"sources":["../../../src/ts/widgets/widget.ts"],"sourcesContent":["/**\n * ## Specification for the HTML API for widgets\n *\n * The following describes the general syntax when using the HTML API for\n * automatic creation of widgets based on data attributes\n * ({@link Settings.settings.autoWidgets | settings.autoWidgets} must be true.\n *\n * A widget specification should be given as a\n * `data-lisn-<WidgetName>=\"<WidgetConfList>\"` attribute.\n *\n * Alternatively, if using all default configurations, you can simply add the\n * `lisn-<WidgetName>` CSS class. Specifying a configuration using CSS classes\n * is not currently possible for widgets, only triggers.\n *\n * The general specification for a widget is of the form:\n *\n * ```\n * <WidgetConfList> ::= <WidgetConf> { \";\" <WidgetConf> }\n *\n * <WidgetConf> ::= [ <WidgetOption> { \"|\" <WidgetOption> } ]\n *\n * <WidgetOption> ::=\n *     <BooleanOptionName> [ \"=\" ( \"false\" | \"true\" ) ] |\n *     <OptionName> \"=\" <OptionValue>\n * ```\n *\n * **NOTE:**\n *\n * There can be 0 or more spaces around any of the separator characters.\n *\n * Not all widgets support multiple instances per single element and therefore\n * multiple configurations. Refer to the specific widget.\n *\n * The characters \"|\", \";\", \"=\" are reserved separators and cannot be used\n * literally as part of an option value.\n *\n * @module Widgets\n */\n\nimport * as MC from \"@lisn/globals/minification-constants\";\nimport * as MH from \"@lisn/globals/minification-helpers\";\n\nimport { settings } from \"@lisn/globals/settings\";\n\nimport { hasClass, getData } from \"@lisn/utils/css-alter\";\nimport { waitForInteractive } from \"@lisn/utils/dom-events\";\nimport { logWarn } from \"@lisn/utils/log\";\nimport { toArrayIfSingle } from \"@lisn/utils/misc\";\nimport { waitForDelay } from \"@lisn/utils/tasks\";\nimport { formatAsString, kebabToCamelCase, splitOn } from \"@lisn/utils/text\";\n\nimport {\n  CallbackHandler,\n  Callback,\n  wrapCallback,\n} from \"@lisn/modules/callback\";\nimport { newXWeakMap } from \"@lisn/modules/x-map\";\n\nimport { DOMWatcher } from \"@lisn/watchers/dom-watcher\";\n\nimport debug from \"@lisn/debug/debug\";\n\nexport class Widget {\n  /**\n   * Disables the functionality of the widget. What this means is specific to\n   * each widget.\n   */\n  readonly disable: () => Promise<void>;\n\n  /**\n   * Re-enables the functionality of the widget. What this means is specific to\n   * each widget.\n   */\n  readonly enable: () => Promise<void>;\n\n  /**\n   * Re-enables the widget if disabled, otherwise disables it.\n   */\n  readonly toggleEnable: () => Promise<void>;\n\n  /**\n   * The given handler will be called when the widget is disabled.\n   */\n  readonly onDisable: (handler: WidgetHandler) => void;\n\n  /**\n   * The given handler will be called when the widget is enabled.\n   */\n  readonly onEnable: (handler: WidgetHandler) => void;\n\n  /**\n   * Returns true if the widget is currently disabled.\n   */\n  readonly isDisabled: () => boolean;\n\n  /**\n   * Undoes all modifications to the element and returns it to its original state.\n   *\n   * You will need to recreate it if you want to enable its functionality again.\n   */\n  readonly destroy: () => Promise<void>;\n\n  /**\n   * The given handler will be called when the widget is destroyed.\n   */\n  readonly onDestroy: (handler: WidgetHandler) => void;\n\n  /**\n   * Returns true if the widget is destroyed.\n   */\n  readonly isDestroyed: () => boolean;\n\n  /**\n   * Returns the element passed to the widget constructor.\n   */\n  readonly getElement: () => Element;\n\n  /**\n   * Retrieve an existing widget by element and ID.\n   */\n  static get(element: Element, id: string): Widget | null {\n    return instances.get(element)?.get(id) || null;\n  }\n\n  /**\n   * **IMPORTANT:** If ID is given and there's already a widget with this ID on\n   * this element, it will be destroyed!\n   */\n  constructor(element: Element, config?: { id?: string }) {\n    const logger = debug\n      ? new debug.Logger({\n          name: `${this.constructor.name}-${formatAsString(element)}`,\n          logAtCreation: this,\n        })\n      : null;\n\n    const id = config?.id;\n    if (id) {\n      instances.get(element)?.get(id)?.destroy(); // don't await here\n      instances.sGet(element).set(id, this);\n    }\n\n    let isDisabled = false;\n    let isDestroyed = false;\n    let destroyPromise: Promise<void>;\n\n    const enableCallbacks = MH.newSet<WidgetCallback>();\n    const disableCallbacks = MH.newSet<WidgetCallback>();\n    const destroyCallbacks = MH.newSet<WidgetCallback>();\n\n    this.disable = async () => {\n      if (!isDisabled) {\n        debug: logger?.debug8(\"Disabling\");\n        isDisabled = true;\n\n        for (const callback of disableCallbacks) {\n          await callback.invoke(this);\n        }\n      }\n    };\n\n    this.enable = async () => {\n      if (!isDestroyed && isDisabled) {\n        debug: logger?.debug8(\"Enabling\");\n        isDisabled = false;\n\n        for (const callback of enableCallbacks) {\n          await callback.invoke(this);\n        }\n      }\n    };\n\n    this.toggleEnable = async () => {\n      if (!isDestroyed) {\n        await (isDisabled ? this.enable : this.disable)();\n      }\n    };\n\n    this.onDisable = (handler) => disableCallbacks.add(wrapCallback(handler));\n    this.onEnable = (handler) => enableCallbacks.add(wrapCallback(handler));\n\n    this.isDisabled = () => isDisabled;\n\n    this.destroy = () => {\n      if (!destroyPromise) {\n        destroyPromise = (async () => {\n          debug: logger?.debug8(\"Destroying\");\n          isDestroyed = true;\n          await this.disable();\n\n          for (const callback of destroyCallbacks) {\n            await callback.invoke(this);\n          }\n\n          enableCallbacks.clear();\n          disableCallbacks.clear();\n          destroyCallbacks.clear();\n\n          if (id) {\n            const elInstances = instances.get(element);\n            if (elInstances?.get(id) === this) {\n              MH.deleteKey(elInstances, id);\n              instances.prune(element);\n            }\n          }\n        })();\n      }\n\n      return destroyPromise;\n    };\n\n    this.onDestroy = (handler) => destroyCallbacks.add(wrapCallback(handler));\n\n    this.isDestroyed = () => isDestroyed;\n\n    this.getElement = () => element;\n  }\n}\n\nexport type WidgetCallbackArgs = [Widget];\nexport type WidgetCallback = Callback<WidgetCallbackArgs>;\nexport type WidgetHandler =\n  | WidgetCallback\n  | CallbackHandler<WidgetCallbackArgs>;\n\n/**\n * **NOTE:** If the function returns a widget or a list of widgets created for\n * the given element, then each one will be automatically destroyed if the\n * element is removed from the DOM.\n */\nexport type WidgetCreateFn<Config extends Record<string, unknown>> = (\n  element: Element,\n  config?: Config,\n) => Widget | Widget[] | null | Promise<Widget | Widget[] | null>;\n\n/**\n * @see {@link getWidgetConfig}.\n */\nexport type WidgetConfigValidatorObject<\n  Config extends Record<string, unknown>,\n> = {\n  [K in keyof Config]: (key: K, v: unknown) => Config[K];\n};\n\n/**\n * @see {@link getWidgetConfig}.\n */\nexport type WidgetConfigAsyncValidatorObject<\n  Config extends Record<string, unknown>,\n> = {\n  [K in keyof Config]: (key: K, v: unknown) => Config[K] | Promise<Config[K]>;\n};\n\n/**\n * @see {@link getWidgetConfig}.\n */\nexport type WidgetConfigValidatorFunc<Config extends Record<string, unknown>> =\n  (\n    element: Element,\n  ) =>\n    | WidgetConfigValidatorObject<Config>\n    | WidgetConfigAsyncValidatorObject<Config>;\n\n/**\n * @see {@link getWidgetConfig}.\n */\nexport type WidgetConfigValidator<Config extends Record<string, unknown>> =\n  | WidgetConfigValidatorObject<Config>\n  | WidgetConfigValidatorFunc<Config>;\n\n/**\n * Enables automatic setting up of a widget from an elements matching the given\n * selector.\n *\n * If {@link settings.autoWidgets} is true, nothing is done. Otherwise,\n * when an element matching the selector is added to the DOM, `newWidget` will\n * be called and it's expected to setup the widget.\n *\n * **IMPORTANT:** The widget that is returned by `newWidget` will be\n * automatically destroyed when the element that created them is removed from\n * the DOM.\n *\n * **IMPORTANT:** If a widget by that name is already registered, the current\n * call does nothing, even if the remaining arguments differ.\n *\n * @param {} name       The name of the widget. Should be in kebab-case.\n * @param {} newWidget  Called for every element matching the widget selector.\n * @param {} configValidator\n *                      A validator object, or a function that returns such an\n *                      object, for all options supported by the widget. If\n *                      given, then the `newWidget` function will also be\n *                      passed a configuration object constructed from the\n *                      element's data attribute.\n * @param {} [options.selector]\n *                      The selector to match elements for. If not given, then\n *                      uses a default value of `[data-lisn-<name>], .lisn-<name>`\n * @param {} [options.supportsMultiple]\n *                      If true, and if `configValidator` is given, then the\n *                      value of the element's widget specific data attribute\n *                      will be split on \";\" and each one parsed individually\n *                      as a configuration. Then the `newWidget` function will\n *                      be called once for each configuration.\n */\nexport const registerWidget = async <Config extends Record<string, unknown>>(\n  name: string,\n  newWidget: WidgetCreateFn<Config>,\n  configValidator?: null | WidgetConfigValidator<Config>,\n  options?: {\n    selector?: string;\n    supportsMultiple?: boolean;\n  },\n) => {\n  if (registeredWidgets.has(name)) {\n    return;\n  }\n\n  registeredWidgets.add(name);\n\n  // init after DOM loaded so that the settings can be configured by the user\n  // straight after loading LISN.js\n  await waitForInteractive();\n\n  const prefixedName = MH.prefixName(name);\n  const selector = options?.selector ?? getDefaultWidgetSelector(prefixedName);\n\n  if (settings.autoWidgets) {\n    const domWatcher = DOMWatcher.reuse();\n    domWatcher.onMutation(\n      async (operation) => {\n        const element = MH.currentTargetOf(operation);\n        const thisConfigValidator = MH.isFunction(configValidator)\n          ? await configValidator(element)\n          : configValidator;\n\n        const widgets: Widget[] = [];\n        const configSpecs: string[] = [];\n        const dataAttr = getData(element, prefixedName);\n\n        if (options?.supportsMultiple) {\n          if (hasClass(element, prefixedName)) {\n            configSpecs.push(\"\");\n          }\n\n          if (dataAttr !== null) {\n            configSpecs.push(\n              ...(dataAttr ? splitOn(dataAttr, \";\", true) : [\"\"]),\n            );\n          }\n        } else {\n          configSpecs.push(dataAttr ?? \"\");\n        }\n\n        for (const spec of configSpecs) {\n          const config = thisConfigValidator\n            ? await fetchWidgetConfig(spec, thisConfigValidator)\n            : undefined;\n\n          const theseWidgets = await newWidget(element, config);\n          if (theseWidgets) {\n            widgets.push(...toArrayIfSingle(theseWidgets));\n          }\n        }\n\n        // auto-destroy on element remove\n        if (MH.lengthOf(widgets)) {\n          domWatcher.onMutation(\n            () => {\n              for (const w of widgets) {\n                w.destroy();\n              }\n            },\n            {\n              target: element,\n              categories: [MC.S_REMOVED],\n            },\n          );\n        }\n      },\n      {\n        selector,\n        categories: [MC.S_ADDED],\n      },\n    );\n  }\n};\n\n/**\n * Returns a configuration object from the given user input, which can be\n * either an object or a `<separator>` separated string of key=values.\n *\n * If `input` is a string, it must be of the format:\n *\n * ```\n * <UserConfigString> ::= <OptionSpec> { <Separator> <OptionSpec> }\n *\n * <OptionSpec> ::=\n *     <BooleanOptionName> [ \"=\" ( \"false\" | \"true\" ) ] |\n *     <OptionName> \"=\" <OptionValue>\n * ```\n *\n * By default, for widgets `<separator>` is \"|\".\n *\n * **NOTE:** If `input` is a string, option names will be converted from\n * kebab-case to camelCase.\n *\n * The given `validator` defines the shape of the returned object. It is called\n * for each entry _in the `validator` object_, with that key and the\n * corresponding value from the input configuration, as the two parameters.\n *\n * If a key is not found in the input, the value passed to the validating\n * function will be `undefined`.\n *\n * If the input is a string and a key has no value, the value passed to the\n * validating function will be an empty string `\"\"`.\n *\n * The final configuration contains all keys from the `validator` object with\n * the value that the validating function for each key returned.\n *\n * There are several built-in validating functions that you can make use of.\n *\n * @see {@link Utils.validateStrList}\n * @see {@link Utils.validateNumber}\n * @see {@link Utils.validateBoolean}\n * @see {@link Utils.validateString}\n * @see {@link Utils.validateBooleanOrString}\n */\nexport const getWidgetConfig = <Config extends Record<string, unknown>>(\n  input: Record<string, unknown> | string | null | undefined,\n  validator: WidgetConfigValidatorObject<Config>,\n  separator = \"|\",\n): Config => {\n  const config = {} as Config;\n  if (!(input instanceof Object)) {\n    input = toOptionsObject(input, separator);\n  }\n\n  for (const key in validator) {\n    config[key] = validator[key](key, input[key]);\n  }\n  return config;\n};\n\n/**\n * Like {@link getWidgetConfig} but it accepts an object whose validator\n * functions may return a promise.\n */\nexport const fetchWidgetConfig = async <Config extends Record<string, unknown>>(\n  input: Record<string, unknown> | string | null | undefined,\n  validator: WidgetConfigAsyncValidatorObject<Config>,\n  separator = \"|\",\n): Promise<Config> => {\n  const config = {} as Config;\n  const configPromises = getWidgetConfig<{\n    [K in keyof Config]: Config[K] | Promise<Config[K]>;\n  }>(input, validator, separator);\n\n  for (const key in configPromises) {\n    config[key] = await configPromises[key];\n  }\n\n  return config;\n};\n\n/**\n * @ignore\n * @internal\n */\nexport const getDefaultWidgetSelector = (prefix: string) =>\n  `.${prefix},[data-${prefix}]`;\n\n/**\n * @ignore\n * @internal\n */\nexport const fetchUniqueWidget = async <W extends Widget>(\n  name: string,\n  element: Element,\n  Type: { get: (element: Element) => W | null },\n): Promise<W | null> => {\n  let widget = Type.get(element);\n  if (!widget) {\n    await waitForDelay(0); // in case it's being processed now\n    widget = Type.get(element);\n\n    if (!widget) {\n      logWarn(`No ${name} widget for element ${formatAsString(element)}`);\n      return null;\n    }\n  }\n\n  return widget;\n};\n\nconst instances = newXWeakMap<Element, Map<string, Widget>>(() => MH.newMap());\nconst registeredWidgets = MH.newSet<string>();\n\n// --------------------\n\nconst toOptionsObject = (\n  input: string | null | undefined,\n  separator: string,\n) => {\n  const options: Record<string, string> = {};\n  for (const entry of MH.filter(\n    splitOn(input ?? \"\", separator, true),\n    (v) => !MH.isEmpty(v),\n  )) {\n    const [key, value] = splitOn(entry, /\\s*=\\s*/, true, 1);\n    options[kebabToCamelCase(key)] = value ?? \"\";\n  }\n  return options;\n};\n"],"mappings":"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","ignoreList":[]}