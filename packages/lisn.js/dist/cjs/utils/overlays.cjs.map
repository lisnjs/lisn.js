{"version":3,"file":"overlays.cjs","names":["MC","_interopRequireWildcard","require","MH","_cssAlter","_domAlter","_domEvents","_domOptimize","_text","_scroll","_xMap","e","t","WeakMap","r","n","__esModule","o","i","f","__proto__","default","has","get","set","hasOwnProperty","call","Object","defineProperty","getOwnPropertyDescriptor","getOverlay","userOptions","_overlays$get","options","tryGetOverlayOptions","overlays","_parent","_overlayKey","exports","createOverlay","fetchOverlayOptions","canReuse","_id","_overlays$get2","existingOverlay","parentOf","waitForMutateTime","overlay","createOnlyOverlay","sGet","id","isPercentageHOffset","includes","_style","left","right","isPercentageVOffset","top","bottom","needsContentWrapping","parentEl","isScrollable","axis","tryWrapContent","classNames","PREFIX_WRAPPER","required","requiredBy","position","S_ABSOLUTE","addClasses","prefixName","moveElement","to","newXWeakMap","newMap","_userOptions$data","_userOptions$id","style","getCssProperties","data","tryGetParent","parent","_data","getOverlayKey","_userOptions$data2","_userOptions$id2","fetchParent","objToStrKey","finalCssProperties","merge","S_FIXED","isEmpty","userSuppliedParent","getBody","tryGetMainContentElement","waitForElement","fetchMainContentElement","createElement","addClassesNow","attr","keysOf","setDataNow","camelToKebabCase","prop","setStylePropNow"],"sources":["../../../src/ts/utils/overlays.ts"],"sourcesContent":["/**\n * @module Utils\n */\n\nimport * as MC from \"@lisn/globals/minification-constants\";\nimport * as MH from \"@lisn/globals/minification-helpers\";\n\nimport {\n  addClasses,\n  addClassesNow,\n  setDataNow,\n  setStylePropNow,\n} from \"@lisn/utils/css-alter\";\nimport { moveElement, tryWrapContent } from \"@lisn/utils/dom-alter\";\nimport { waitForElement } from \"@lisn/utils/dom-events\";\nimport { waitForMutateTime } from \"@lisn/utils/dom-optimize\";\nimport { camelToKebabCase, objToStrKey } from \"@lisn/utils/text\";\nimport {\n  isScrollable,\n  tryGetMainContentElement,\n  fetchMainContentElement,\n} from \"@lisn/utils/scroll\";\n\nimport { newXWeakMap } from \"@lisn/modules/x-map\";\n\n/**\n * @category Overlays\n * @interface\n */\nexport type OverlayOptions = {\n  /**\n   * The parent element to insert the overlay into.\n   *\n   * If not given, then:\n   * - if the overlay is to have a `position: fixed`, then `document.body` is used\n   * - otherwise,\n   *   {@link Settings.settings.mainScrollableElementSelector | the main scrolling element}\n   *   is used\n   */\n  parent?: HTMLElement;\n\n  /**\n   * If set, then it will be assigned as the DOM element ID for the new\n   * overlay.\n   *\n   * Furthermore, the new overlay will be created and will not be saved for\n   * future reuse.\n   *\n   * By default, if `id` is not given, the overlay will be saved, and if\n   * {@link createOverlay} is called again with the same `style`, `data` and\n   * parent, the previous overlay is returned.\n   */\n  id?: string;\n\n  /**\n   * Every entry in this object will be set on the `style` of the new overlay.\n   *\n   * **IMPORTANT:** By default overlays are positioned absolutely, so if you need\n   * another positioning, override this here by setting a `position` key in\n   * `style`. If position is either \"absolute\" (by default or explicitly set) or\n   * \"fixed\", and none of `top` or `bottom` is given, `top: 0` is set; and\n   * similarly, if none of `left` or `right` is given, `left: 0` is set.\n   */\n  style?: Record<string, string>;\n\n  /**\n   * Every entry in this object will be set as a data attribute on the new\n   * overlay.\n   *\n   * Keys can be either kebab-case or camelCase (they will be converted if\n   * needed). Do _not_ include the \"data-\" prefix which will be added\n   * automatically. E.g. both \"foo-bar\" and \"fooBar\" will result in\n   * \"data-foo-bar\" being set.\n   */\n  data?: Record<string, string>;\n};\n\n/**\n * Returns an existing overlay for this specification. If the overlay was just\n * created it may not yet be attached to the DOM.\n *\n * @category Overlays\n */\nexport const getOverlay = (userOptions?: OverlayOptions) => {\n  const options = tryGetOverlayOptions(userOptions);\n  if (!options) {\n    return null;\n  }\n\n  return overlays.get(options._parent)?.get(options._overlayKey) || null;\n};\n\n/**\n * Creates a new overlay, and inserts it into the DOM as soon as\n * {@link waitForMutateTime} resolves, or returns an already existing matching\n * overlay.\n *\n * **Note** that if {@link OverlayOptions.id} is set, a new overlay will\n * _always_ be created.\n *\n * @category Overlays\n */\nexport const createOverlay = async (userOptions?: OverlayOptions) => {\n  const options = await fetchOverlayOptions(userOptions);\n  const canReuse = !options._id;\n\n  if (canReuse) {\n    const existingOverlay = overlays\n      .get(options._parent)\n      ?.get(options._overlayKey);\n\n    if (existingOverlay) {\n      if (!MH.parentOf(existingOverlay)) {\n        // not yet inserted into the DOM, so wait until it is\n        await waitForMutateTime();\n      }\n      return existingOverlay;\n    }\n  }\n\n  // Create a new one\n  const overlay = createOnlyOverlay(options);\n  if (canReuse) {\n    // Save it now before awating, so that concurrent requests to create the\n    // same one use it\n    overlays.sGet(options._parent).set(options._overlayKey, overlay);\n  } else {\n    overlay.id = options._id;\n  }\n\n  const isPercentageHOffset = MH.includes(\n    (options._style.left || \"\") + (options._style.right || \"\"),\n    \"%\",\n  );\n\n  const isPercentageVOffset = MH.includes(\n    (options._style.top || \"\") + (options._style.bottom || \"\"),\n    \"%\",\n  );\n\n  let needsContentWrapping = false;\n  let parentEl = options._parent;\n  if (isPercentageHOffset || isPercentageVOffset) {\n    needsContentWrapping =\n      (isPercentageHOffset && isScrollable(parentEl, { axis: \"x\" })) ||\n      (isPercentageVOffset && isScrollable(parentEl, { axis: \"y\" }));\n  }\n\n  if (needsContentWrapping) {\n    // TODO Is it possible to unwrap the children when no longer needing this\n    // overlay? Probably not worth the effort. ViewWatcher doesn't remove old\n    // olverlays anyway.\n    parentEl = await tryWrapContent(parentEl, {\n      classNames: [MC.PREFIX_WRAPPER, PREFIX_WRAPPER],\n      required: true,\n      requiredBy: \"percentage offset view trigger with scrolling root\",\n    });\n  }\n\n  if (options._style.position === MC.S_ABSOLUTE) {\n    // Ensure parent has non-static positioning\n    addClasses(parentEl, MH.prefixName(\"overlay-container\"));\n  }\n\n  await moveElement(overlay, { to: parentEl });\n\n  return overlay;\n};\n\n// ----------------------------------------\n\ntype OverlayOptionsInternal = {\n  _parent: HTMLElement;\n  _id: string;\n  _style: Record<string, string>;\n  _data: Record<string, string>;\n  _overlayKey: string;\n};\n\nconst PREFIX_WRAPPER = MH.prefixName(\"overlay-wrapper\");\n\nconst overlays = newXWeakMap<HTMLElement, Map<string, HTMLElement>>(() =>\n  MH.newMap(),\n);\n\nconst tryGetOverlayOptions = (\n  userOptions: OverlayOptions | undefined,\n): OverlayOptionsInternal | null => {\n  const style = getCssProperties(userOptions?.style);\n  const data = userOptions?.data ?? {};\n  const parentEl = tryGetParent(userOptions?.parent, style.position);\n  if (!parentEl) {\n    return null;\n  }\n\n  return {\n    _parent: parentEl,\n    _id: userOptions?.id ?? \"\",\n    _style: style,\n    _data: data,\n    _overlayKey: getOverlayKey(style, data),\n  };\n};\n\nconst fetchOverlayOptions = async (\n  userOptions: OverlayOptions | undefined,\n): Promise<OverlayOptionsInternal> => {\n  const style = getCssProperties(userOptions?.style);\n  const data = userOptions?.data ?? {};\n  const parentEl = await fetchParent(userOptions?.parent, style.position);\n\n  return {\n    _parent: parentEl,\n    _id: userOptions?.id ?? \"\",\n    _style: style,\n    _data: data,\n    _overlayKey: getOverlayKey(style, data),\n  };\n};\n\nconst getOverlayKey = (\n  style: Record<string, string>,\n  data: Record<string, string>,\n) => objToStrKey(style) + \"|\" + objToStrKey(data);\n\nconst getCssProperties = (style: Record<string, string> | undefined) => {\n  const finalCssProperties: Record<string, string> = MH.merge(\n    { position: MC.S_ABSOLUTE }, // default\n    style,\n  );\n\n  if (\n    finalCssProperties.position === MC.S_ABSOLUTE ||\n    finalCssProperties.position === MC.S_FIXED\n  ) {\n    if (\n      MH.isEmpty(finalCssProperties.top) &&\n      MH.isEmpty(finalCssProperties.bottom)\n    ) {\n      finalCssProperties.top = \"0px\";\n    }\n\n    if (\n      MH.isEmpty(finalCssProperties.left) &&\n      MH.isEmpty(finalCssProperties.right)\n    ) {\n      finalCssProperties.left = \"0px\";\n    }\n  }\n\n  return finalCssProperties;\n};\n\nconst tryGetParent = (\n  userSuppliedParent: HTMLElement | undefined | null,\n  position: string,\n) =>\n  userSuppliedParent ??\n  (position === MC.S_FIXED ? MH.getBody() : tryGetMainContentElement());\n\nconst fetchParent = async (\n  userSuppliedParent: HTMLElement | undefined | null,\n  position: string,\n) =>\n  userSuppliedParent ??\n  (position === MC.S_FIXED\n    ? await waitForElement(MH.getBody)\n    : await fetchMainContentElement());\n\nconst createOnlyOverlay = (options: OverlayOptionsInternal) => {\n  const overlay = MH.createElement(\"div\");\n\n  addClassesNow(overlay, MH.prefixName(\"overlay\"));\n\n  const data = options._data;\n  for (const attr of MH.keysOf(data)) {\n    setDataNow(overlay, camelToKebabCase(attr), data[attr]);\n  }\n\n  const style = options._style;\n  for (const prop of MH.keysOf(style)) {\n    setStylePropNow(overlay, prop, style[prop]);\n  }\n\n  return overlay;\n};\n"],"mappings":"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","ignoreList":[]}