{"version":3,"file":"x-resize-observer.cjs","names":["MH","_interopRequireWildcard","require","_log","_debug","_interopRequireDefault","e","__esModule","_getRequireWildcardCache","WeakMap","r","t","_typeof","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","o","Symbol","iterator","constructor","prototype","_createForOfIteratorHelper","Array","isArray","_unsupportedIterableToArray","length","_n","F","s","done","value","f","TypeError","next","_arrayLikeToArray","toString","slice","name","from","test","_defineProperties","enumerable","configurable","writable","_toPropertyKey","key","_createClass","_classCallCheck","_defineProperty","_toPrimitive","toPrimitive","String","Number","XResizeObserver","exports","callback","debounceWindow","_this","logger","debug","Logger","buffer","newMap","targetsToSkip","newWeakMap","observedTargets","newWeakSet","timer","resizeHandler","entries","_iterator","_step","entry","target","targetOf","skipNum","undefined","logError","bugError","concat","deleteKey","err","debug9","size","sizeOf","setTimer","arrayFrom","values","clear","borderObserver","newResizeObserver","contentObserver","logWarn","observeTarget","add","observe","box","_len","arguments","targets","_key","debug10","_i","_targets","observeLater","_len2","_key2","_i2","_targets2","unobserve","_len3","_key3","_i3","_targets3","disconnect"],"sources":["../../../src/ts/modules/x-resize-observer.ts"],"sourcesContent":["/**\n * @module Modules/XResizeObserver\n */\n\nimport * as MH from \"@lisn/globals/minification-helpers\";\n\nimport { logWarn, logError } from \"@lisn/utils/log\";\n\nimport debug from \"@lisn/debug/debug\";\n\nexport type XResizeObserverCallback = (\n  entries: ResizeObserverEntry[],\n  observer: XResizeObserver,\n) => void;\n\n/**\n * {@link XResizeObserver} is an extension of\n * {@link https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver | ResizeObserver}\n * - observes both border box and content box size changes\n * - can skip the initial callback that happens shortly after setting up via\n *   {@link observeLater}\n * - can debounce the callback\n */\nexport class XResizeObserver {\n  /**\n   * Like {@link https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver/observe | ResizeObserver:observe} except it accepts multiple targets.\n   */\n  readonly observe: (...targets: Element[]) => void;\n\n  /**\n   * Like {@link observe} but it ignores the initial almost immediate callback\n   * and only calls the callback on a subsequent resize.\n   *\n   * If the target is already being observed, nothing is done.\n   */\n  readonly observeLater: (...targets: Element[]) => void;\n\n  /**\n   * Like {@link https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver/unobserve | ResizeObserver:unobserve} except it accepts multiple targets.\n   */\n  readonly unobserve: (...targets: Element[]) => void;\n\n  /**\n   * Like {@link https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver/disconnect | ResizeObserver:disconnect}.\n   */\n  readonly disconnect: () => void;\n\n  /**\n   * @param {} debounceWindow Debounce the handler so that it's called at most\n   *                          every `debounceWindow` ms.\n   */\n  constructor(callback: XResizeObserverCallback, debounceWindow?: number) {\n    const logger = debug ? new debug.Logger({ name: \"XResizeObserver\" }) : null;\n\n    // Keep the latest ResizeObserverEntry for each target during the\n    // debounceWindow. Short-lived, so ok to use a Map.\n    const buffer = MH.newMap<Element, ResizeObserverEntry>();\n\n    // Since internally we have two observers, one for border box, one for\n    // content box, we will get called initially twice for a target. So we keep\n    // a counter of 1 or 2 for how many more calls to ignore.\n    const targetsToSkip = MH.newWeakMap<Element, 1 | 2>();\n\n    let observedTargets = MH.newWeakSet<Element>();\n\n    debounceWindow = debounceWindow || 0;\n\n    let timer: ReturnType<typeof setTimeout> | null = null;\n    const resizeHandler = (entries: ResizeObserverEntry[]) => {\n      // Override entries for previous targets, but keep entries whose targets\n      // were not resized in this round\n      for (const entry of entries) {\n        const target = MH.targetOf(entry);\n        const skipNum = targetsToSkip.get(target);\n        if (skipNum !== undefined) {\n          if (skipNum === 2) {\n            // expect one more call\n            targetsToSkip.set(target, 1);\n          } else {\n            // done\n            /* istanbul ignore next */\n            if (skipNum !== 1) {\n              logError(MH.bugError(`# targetsToSkip is ${skipNum}`));\n            }\n            MH.deleteKey(targetsToSkip, target);\n          }\n\n          continue;\n        }\n\n        buffer.set(target, entry);\n      }\n\n      debug: logger?.debug9(\n        `Got ${entries.length} new entries. ` +\n          `Have ${buffer.size} unique-target entries`,\n        entries,\n      );\n\n      if (!timer && MH.sizeOf(buffer)) {\n        timer = MH.setTimer(() => {\n          if (MH.sizeOf(buffer)) {\n            callback(MH.arrayFrom(buffer.values()), this);\n            buffer.clear();\n          }\n\n          timer = null;\n        }, debounceWindow);\n      }\n    };\n\n    const borderObserver = MH.newResizeObserver(resizeHandler);\n    const contentObserver = MH.newResizeObserver(resizeHandler);\n    if (!borderObserver || !contentObserver) {\n      logWarn(\n        \"This browser does not support ResizeObserver. Some features won't work.\",\n      );\n    }\n\n    const observeTarget = (target: Element) => {\n      observedTargets.add(target);\n      borderObserver?.observe(target, { box: \"border-box\" });\n      contentObserver?.observe(target);\n    };\n\n    // --------------------\n\n    this.observe = (...targets) => {\n      debug: logger?.debug10(\"Observing targets\", targets);\n\n      for (const target of targets) {\n        observeTarget(target);\n      }\n    };\n\n    this.observeLater = (...targets) => {\n      debug: logger?.debug10(\"Observing targets (later)\", targets);\n      for (const target of targets) {\n        // Only skip them if not already observed, otherwise the initial\n        // (almost) immediate callback won't happen anyway.\n        if (observedTargets.has(target)) {\n          continue;\n        }\n\n        targetsToSkip.set(target, 2);\n        observeTarget(target);\n      }\n    };\n\n    this.unobserve = (...targets) => {\n      debug: logger?.debug10(\"Unobserving targets\", targets);\n\n      for (const target of targets) {\n        MH.deleteKey(observedTargets, target);\n        borderObserver?.unobserve(target);\n        contentObserver?.unobserve(target);\n      }\n    };\n\n    this.disconnect = () => {\n      debug: logger?.debug10(\"Disconnecting\");\n      observedTargets = MH.newWeakSet();\n      borderObserver?.disconnect();\n      contentObserver?.disconnect();\n    };\n  }\n}\n"],"mappings":"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","ignoreList":[]}