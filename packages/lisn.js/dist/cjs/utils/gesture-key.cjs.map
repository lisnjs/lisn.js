{"version":3,"file":"gesture-key.cjs","names":["MC","_interopRequireWildcard","require","MH","_settings","_directions","_gesture","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","_typeof","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","_slicedToArray","_arrayWithHoles","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","TypeError","l","Symbol","iterator","f","o","next","done","push","value","length","Array","isArray","_defineProperty","_toPropertyKey","enumerable","configurable","writable","_toPrimitive","toPrimitive","String","Number","_createForOfIteratorHelper","_n","F","s","_arrayLikeToArray","toString","slice","constructor","name","from","test","getKeyGestureFragment","exports","events","options","_options$scrollHeight","isIterableObject","LINE","settings","deltaLineHeight","PAGE","deltaPageHeight","CONTENT","scrollHeight","deltasUp","amount","deltasDown","deltasLeft","deltasRight","deltasIn","deltasOut","direction","S_NONE","intent","deltaX","deltaY","deltaZ","_iterator","_step","_deltasForKey","event","isKeyboardEvent","type","S_KEYDOWN","deltasForKey","SK_UP","SK_ARROWUP","SK_PAGEUP","SK_DOWN","SK_ARROWDOWN","SK_PAGEDOWN","SK_LEFT","SK_ARROWLEFT","SK_RIGHT","SK_ARROWRIGHT","shiftKey","ctrlKey","theseDeltas","key","_theseDeltas","thisDeltaX","thisDeltaY","thisDeltaZ","thisIntent","S_ZOOM","S_SCROLL","addDeltaZ","S_UNKNOWN","err","S_AMBIGUOUS","S_IN","S_OUT","getVectorDirection","angleDiffThreshold","device","S_KEY","SK_PAGE","SK_ARROW"],"sources":["../../../src/ts/utils/gesture-key.ts"],"sourcesContent":["/**\n * @module Utils\n */\n\nimport * as MC from \"@lisn/globals/minification-constants\";\nimport * as MH from \"@lisn/globals/minification-helpers\";\n\nimport { settings } from \"@lisn/globals/settings\";\n\nimport { Direction, GestureIntent } from \"@lisn/globals/types\";\n\nimport { getVectorDirection } from \"@lisn/utils/directions\";\n\nimport { GestureFragment, addDeltaZ } from \"@lisn/utils/gesture\";\n\n/**\n * Returns a {@link GestureFragment} for the given events. Only \"keydown\"\n * events will be considered.\n *\n * If there are no \"keydown\" events in the given list of events, returns\n * `false`.\n *\n * The deltas of all events are summed together before determining final delta\n * and direction.\n *\n * If the events are of conflicting types, i.e. some scroll, some zoom, then\n * the intent will be \"unknown\" and the direction will be \"ambiguous\".\n *\n * Otherwise, if the deltas sum up to 0, the direction will be \"none\".\n *\n * **IMPORTANT NOTES ON THE DELTA VALUES**\n *\n * For key gestures the deltas are unreliable. You should not assume they\n * correspond to the would-be scroll or zoom amount that the browser would do.\n * But they can be used to determine relative amounts for animating, etc.\n *\n * Key press events can be divided into 3 categories: that scroll by a \"line\"\n * (e.g. arrow keys), by a \"page\" (e.g. PageUp/PageDown) or by the full content\n * height/width (e.g. Home/End). The actual scroll amount that _would_ result\n * from the event is dependent on the browser, the window size or the element's\n * scroll width/height, so ours can only be a best guess.\n *\n * Since the actual pixel equivalent is browser specific, we use reasonable\n * default values of delta for each of these \"line\", \"page\" or \"content\" modes,\n * similar to what\n * {@link Utils.getWheelGestureFragment | getWheelGestureFragment} does:\n * - For \"line\", then a configurable fixed value is used\n *  ({@link settings.deltaLineHeight}).\n * - For \"page\", then a configurable fixed value is used\n *  ({@link settings.deltaPageHeight}).\n * - For \"content\", the element's scroll height is used if given, otherwise\n *   the viewport height (same as \"page\"). We do not try to get the current\n *   scroll height of the target element, (which would be the best guess value\n *   of `deltaY` in case of Home/End key presses), as that would either involve\n *   an asynchronous action or would result in forced layout. If the caller is\n *   already tracking the scroll height of the target, you can pass this as an\n *   argument. Otherwise, we'll default to using the viewport height, same as\n *   for PageUp/Down.\n *\n * If the key gesture fragment is a result of multiple events that were\n * accumulated, the deltas are summed as usual, e.g. if a \"page\" is equal to 20\n * \"lines\", then pressing PageDown and then 10 times Up, would result in a\n * delta equal to 10 \"lines\" down.\n *\n * For zoom intents, `deltaZ` gives a relative change of scale, whereby each\n * press of + or - steps up by 15% or down by ~13% (`1 / 1.15` to be exact)\n * since the previous one.\n *\n * @param {} [options.angleDiffThreshold]\n *                                  See {@link getVectorDirection}\n * @param {} [options.scrollHeight] Use this as deltaY when Home/End is pressed\n *\n * @return {} `false` if there are no \"keydown\" events in the list, otherwise a\n * {@link GestureFragment}.\n *\n * @category Gestures\n */\nexport const getKeyGestureFragment = (\n  events: Event | readonly Event[],\n  options?: {\n    angleDiffThreshold?: number;\n    scrollHeight?: number;\n  },\n): GestureFragment | false => {\n  if (!MH.isIterableObject(events)) {\n    events = [events];\n  }\n\n  const LINE = settings.deltaLineHeight;\n  const PAGE = settings.deltaPageHeight;\n  const CONTENT = options?.scrollHeight ?? PAGE;\n\n  const deltasUp = (amount: number): DeltasArr => [0, -amount, 1];\n  const deltasDown = (amount: number): DeltasArr => [0, amount, 1];\n  const deltasLeft = (amount: number): DeltasArr => [-amount, 0, 1];\n  const deltasRight = (amount: number): DeltasArr => [amount, 0, 1];\n  const deltasIn: DeltasArr = [0, 0, 1.15];\n  const deltasOut: DeltasArr = [0, 0, 1 / 1.15];\n\n  let direction: Direction = MC.S_NONE;\n  let intent: GestureIntent | null = null;\n  let deltaX = 0,\n    deltaY = 0,\n    deltaZ = 1;\n\n  for (const event of events) {\n    if (!MH.isKeyboardEvent(event) || event.type !== MC.S_KEYDOWN) {\n      continue;\n    }\n\n    const deltasForKey: Record<string, DeltasArr | null> = {\n      [SK_UP]: deltasUp(LINE),\n      [SK_ARROWUP]: deltasUp(LINE),\n      [SK_PAGEUP]: deltasUp(PAGE),\n      Home: deltasUp(CONTENT),\n      [SK_DOWN]: deltasDown(LINE),\n      [SK_ARROWDOWN]: deltasDown(LINE),\n      [SK_PAGEDOWN]: deltasDown(PAGE),\n      End: deltasDown(CONTENT),\n      [SK_LEFT]: deltasLeft(LINE),\n      [SK_ARROWLEFT]: deltasLeft(LINE),\n      [SK_RIGHT]: deltasRight(LINE),\n      [SK_ARROWRIGHT]: deltasRight(LINE),\n      \" \": (event.shiftKey ? deltasUp : deltasDown)(PAGE),\n      \"+\": deltasIn,\n      \"=\": event.ctrlKey ? deltasIn : null,\n      \"-\": deltasOut,\n    };\n\n    const theseDeltas = deltasForKey[event.key] || null;\n    if (!theseDeltas) {\n      // not a relevant key\n      continue;\n    }\n\n    const [thisDeltaX, thisDeltaY, thisDeltaZ] = theseDeltas;\n    const thisIntent = thisDeltaZ !== 1 ? MC.S_ZOOM : MC.S_SCROLL;\n\n    deltaX += thisDeltaX;\n    deltaY += thisDeltaY;\n    deltaZ = addDeltaZ(deltaZ, thisDeltaZ);\n\n    if (!intent) {\n      intent = thisIntent;\n    } else if (intent !== thisIntent) {\n      // mixture of zoom and scroll\n      intent = MC.S_UNKNOWN;\n    }\n  }\n\n  if (!intent) {\n    return false; // no relevant events\n  } else if (intent === MC.S_UNKNOWN) {\n    direction = MC.S_AMBIGUOUS;\n  } else if (intent === MC.S_ZOOM) {\n    direction = deltaZ > 1 ? MC.S_IN : deltaZ < 1 ? MC.S_OUT : MC.S_NONE;\n  } else {\n    direction = getVectorDirection(\n      [deltaX, deltaY],\n      options?.angleDiffThreshold,\n    );\n  }\n\n  return direction === MC.S_NONE\n    ? false\n    : {\n        device: MC.S_KEY,\n        direction,\n        intent,\n        deltaX,\n        deltaY,\n        deltaZ,\n      };\n};\n\n// --------------------\n\ntype DeltasArr = [number, number, number];\n\nconst SK_UP = \"Up\";\nconst SK_DOWN = \"Down\";\nconst SK_LEFT = \"Left\";\nconst SK_RIGHT = \"Right\";\nconst SK_PAGE = \"Page\";\nconst SK_ARROW = \"Arrow\";\nconst SK_PAGEUP = (SK_PAGE + SK_UP) as `${typeof SK_PAGE}${typeof SK_UP}`;\nconst SK_PAGEDOWN = (SK_PAGE + SK_DOWN) as `${typeof SK_PAGE}${typeof SK_DOWN}`;\nconst SK_ARROWUP = (SK_ARROW + SK_UP) as `${typeof SK_ARROW}${typeof SK_UP}`;\nconst SK_ARROWDOWN = (SK_ARROW +\n  SK_DOWN) as `${typeof SK_ARROW}${typeof SK_DOWN}`;\nconst SK_ARROWLEFT = (SK_ARROW +\n  SK_LEFT) as `${typeof SK_ARROW}${typeof SK_LEFT}`;\nconst SK_ARROWRIGHT = (SK_ARROW +\n  SK_RIGHT) as `${typeof SK_ARROW}${typeof SK_RIGHT}`;\n"],"mappings":"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","ignoreList":[]}