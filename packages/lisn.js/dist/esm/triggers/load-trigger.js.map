{"version":3,"file":"load-trigger.js","names":["MH","waitForPageReady","registerTrigger","Trigger","LoadTrigger","register","element","args","actions","config","constructor","_defineProperty","getConfig","copyObject","lengthOf","then","run"],"sources":["../../../src/ts/triggers/load-trigger.ts"],"sourcesContent":["/**\n * @module Triggers\n *\n * @categoryDescription Load\n * {@link LoadTrigger} allows you to run actions once when the page is loaded.\n */\n\nimport * as MH from \"@lisn/globals/minification-helpers\";\n\nimport { waitForPageReady } from \"@lisn/utils/dom-events\";\n\nimport { Action } from \"@lisn/actions/action\";\n\nimport {\n  registerTrigger,\n  Trigger,\n  TriggerConfig,\n} from \"@lisn/triggers/trigger\";\n\n/**\n * {@link LoadTrigger} allows you to run actions one when the page is loaded.\n *\n * -------\n *\n * To use with auto-widgets (HTML API), see {@link registerTrigger} for the\n * specification.\n *\n * - Arguments: none\n * - Additional trigger options: none\n *\n * @example\n * Scroll to the given element when the page is loaded:\n *\n * ```html\n * <div data-lisn-on-load=\":scroll-to\"></div>\n * ```\n *\n * @example\n * Scroll to 100px above the given element 500ms after the page is loaded:\n *\n * ```html\n * <div data-lisn-on-load=\"@scroll-to=0,-100 +delay=500\"></div>\n * ```\n *\n * @example\n * Scroll to 100px above the given element 500ms after the page is loaded, and\n * play animations defined on it 500ms later (1000ms after it's loaded):\n *\n * ```html\n * <div data-lisn-on-load=\"@scroll-to=0,-100 +delay=500 ;\n *                         @animate +delay=1000\"\n * ></div>\n * ```\n *\n * @category Load\n */\nexport class LoadTrigger extends Trigger {\n  readonly getConfig: () => TriggerConfig;\n\n  static register() {\n    registerTrigger(\n      \"load\",\n      (element, args, actions, config) =>\n        new LoadTrigger(element, actions, config),\n    );\n  }\n\n  /**\n   * If no actions are supplied, nothing is done.\n   *\n   * @throws {@link Errors.LisnUsageError | LisnUsageError}\n   *                If the config is invalid.\n   */\n  constructor(element: Element, actions: Action[], config: TriggerConfig) {\n    super(element, actions, config);\n    this.getConfig = () => MH.copyObject(config);\n\n    if (!MH.lengthOf(actions)) {\n      return;\n    }\n\n    waitForPageReady().then(this.run);\n  }\n}\n"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,KAAKA,EAAE;AAEd,SAASC,gBAAgB;AAIzB,SACEC,eAAe,EACfC,OAAO;;AAIT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,WAAW,SAASD,OAAO,CAAC;EAGvC,OAAOE,QAAQA,CAAA,EAAG;IAChBH,eAAe,CACb,MAAM,EACN,CAACI,OAAO,EAAEC,IAAI,EAAEC,OAAO,EAAEC,MAAM,KAC7B,IAAIL,WAAW,CAACE,OAAO,EAAEE,OAAO,EAAEC,MAAM,CAC5C,CAAC;EACH;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEC,WAAWA,CAACJ,OAAgB,EAAEE,OAAiB,EAAEC,MAAqB,EAAE;IACtE,KAAK,CAACH,OAAO,EAAEE,OAAO,EAAEC,MAAM,CAAC;IAACE,eAAA;IAChC,IAAI,CAACC,SAAS,GAAG,MAAMZ,EAAE,CAACa,UAAU,CAACJ,MAAM,CAAC;IAE5C,IAAI,CAACT,EAAE,CAACc,QAAQ,CAACN,OAAO,CAAC,EAAE;MACzB;IACF;IAEAP,gBAAgB,CAAC,CAAC,CAACc,IAAI,CAAC,IAAI,CAACC,GAAG,CAAC;EACnC;AACF","ignoreList":[]}