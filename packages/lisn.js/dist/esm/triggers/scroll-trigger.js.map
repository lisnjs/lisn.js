{"version":3,"file":"scroll-trigger.js","names":["MC","MH","getOppositeXYDirections","isValidXYDirection","waitForReferenceElement","validateStrList","validateNumber","ScrollWatcher","registerTrigger","Trigger","ScrollTrigger","_Trigger","element","actions","config","_this","_classCallCheck","directions","once","S_UP","S_DOWN","S_LEFT","S_RIGHT","_callSuper","_defineProperty","getConfig","copyObject","lengthOf","_possibleConstructorReturn","watcher","reuse","scrollable","threshold","oppositeDirections","onScroll","run","reverse","_inherits","_createClass","key","value","register","S_SCROLL","args","assign","newConfigValidator","_ref","isLiteralString","undefined"],"sources":["../../../src/ts/triggers/scroll-trigger.ts"],"sourcesContent":["/**\n * @module Triggers\n *\n * @categoryDescription Scroll\n * {@link ScrollTrigger} allows you to run actions when the user scrolls a\n * target element (or the main scrollable element) in a given direction, and\n * undo those actions when they scroll in the opposite direction.\n */\n\nimport * as MC from \"@lisn/globals/minification-constants\";\nimport * as MH from \"@lisn/globals/minification-helpers\";\n\nimport {\n  XYDirection,\n  CommaSeparatedStr,\n  ScrollTarget,\n} from \"@lisn/globals/types\";\n\nimport {\n  getOppositeXYDirections,\n  isValidXYDirection,\n} from \"@lisn/utils/directions\";\nimport { waitForReferenceElement } from \"@lisn/utils/dom-search\";\nimport { validateStrList, validateNumber } from \"@lisn/utils/validation\";\n\nimport { Action } from \"@lisn/actions/action\";\n\nimport { ScrollWatcher } from \"@lisn/watchers/scroll-watcher\";\n\nimport {\n  registerTrigger,\n  Trigger,\n  TriggerConfig,\n} from \"@lisn/triggers/trigger\";\n\nimport { WidgetConfigValidatorFunc } from \"@lisn/widgets/widget\";\n\n/**\n * {@link ScrollTrigger} allows you to run actions when the user scrolls a\n * target element (or the main scrollable element) in a given direction, and\n * undo those actions when they scroll in the opposite direction.\n *\n * -------\n *\n * To use with auto-widgets (HTML API), see {@link registerTrigger} for the\n * specification.\n *\n * - Arguments (optional): One or more (comma-separated) scroll directions.\n *   Note that if you do not specify any directions, then the trigger will just\n *   run once, on any scroll.\n * - Additional trigger options:\n *   - `scrollable`: A string element specification.\n *      See {@link Utils.getReferenceElement | getReferenceElement}.\n *   - `threshold`: A number.\n *\n * @example\n * Show the element when the user scrolls the page up, hide when scrolling\n * down. User scrolling left or right not trigger the action. See\n * {@link getOppositeXYDirections}:\n *\n * ```html\n * <div data-lisn-on-scroll=\"up @show\"></div>\n * ```\n *\n * @example\n * As above, but using a CSS class instead of data attribute:\n *\n * ```html\n * <div class=\"lisn-on-scroll--up@show\"></div>\n * ```\n *\n * @example\n * Show the element 1000ms after the first time the user scrolls the page up:\n *\n * ```html\n * <div data-lisn-on-scroll=\"up @show +once +delay=1000\"></div>\n * ```\n *\n * @example\n * Add class `scrolled` the first time the user scrolls the page in any\n * direction (note that the `once` option is implied here), and show the\n * element 1000ms after each time the user scrolls the page up, hide it as soon\n * as they scroll down:\n *\n * ```html\n * <div data-lisn-on-scroll=\"@add-class=scrolled ;\n *                           up @show +do-delay=1000\"\n * ></div>\n * ```\n *\n * @example\n * When the user scrolls up or down the closest ancestor with class `section`,\n * then add classes `c1` and `c2` and enable trigger `my-trigger` defined on\n * this same element; undo all of that when scrolling right or left:\n *\n * ```html\n * <div class=\"section\">\n *   <div data-lisn-on-scroll=\"up,down @add-class=c1,c2 @enable=my-trigger +scrollable=this.section\"\n *      data-lisn-on-run=\"@show +id=my-trigger\"\n *   ></div>\n *</div>\n * ```\n *\n * @example\n * As above, but using `data-lisn-ref` attribute instead of class selector.\n *\n * ```html\n * <div data-lisn-ref=\"section\">\n *   <div data-lisn-on-scroll=\"up,down @add-class=c1,c2 @enable=my-trigger +scrollable=this-section\"\n *      data-lisn-on-run=\"@show +id=my-trigger\"\n *   ></div>\n *</div>\n * ```\n *\n * @category Scroll\n */\nexport class ScrollTrigger extends Trigger {\n  readonly getConfig: () => ScrollTriggerConfig;\n\n  static register() {\n    registerTrigger(\n      MC.S_SCROLL,\n      (element, args, actions, config) => {\n        return new ScrollTrigger(\n          element,\n          actions,\n          MH.assign(config, {\n            directions: validateStrList(\"directions\", args, isValidXYDirection),\n          }),\n        );\n      },\n      newConfigValidator,\n    );\n  }\n\n  /**\n   * If no actions are supplied, nothing is done.\n   *\n   * @throws {@link Errors.LisnUsageError | LisnUsageError}\n   *                If the config is invalid.\n   */\n  constructor(\n    element: Element,\n    actions: Action[],\n    config?: ScrollTriggerConfig,\n  ) {\n    config = config ?? {};\n\n    let directions = config.directions;\n    if (!directions) {\n      config.once = true;\n      directions = [MC.S_UP, MC.S_DOWN, MC.S_LEFT, MC.S_RIGHT];\n    }\n\n    super(element, actions, config);\n    this.getConfig = () => MH.copyObject(config);\n\n    if (!MH.lengthOf(actions)) {\n      return;\n    }\n\n    const watcher = ScrollWatcher.reuse();\n    const scrollable = config.scrollable;\n    const threshold = config.threshold;\n\n    const oppositeDirections = directions\n      ? getOppositeXYDirections(directions)\n      : [];\n\n    watcher.onScroll(this.run, {\n      directions,\n      scrollable,\n      threshold,\n    });\n\n    if (MH.lengthOf(oppositeDirections)) {\n      watcher.onScroll(this.reverse, {\n        directions: oppositeDirections,\n        scrollable,\n        threshold,\n      });\n    }\n  }\n}\n\n/**\n * @category Scroll\n * @interface\n */\nexport type ScrollTriggerConfig = TriggerConfig & {\n  /**\n   * The {@link XYDirection}s to use as the trigger.\n   * See also {@link Watchers/ScrollWatcher.OnScrollOptions | OnScrollOptions}\n   *\n   * Actions will be \"done\" when the scroll direction is one of the given ones\n   * and \"undone\" when it's the opposite direction. E.g. for \"up\" the opposite\n   * is \"down\".\n   */\n  directions?: CommaSeparatedStr<XYDirection> | XYDirection[];\n\n  /**\n   * The scrolling element target to use for the ScrollWatcher.\n   * See {@link Watchers/ScrollWatcher.OnScrollOptions | OnScrollOptions}\n   *\n   * @defaultValue {@link ScrollWatcher} default, the main scrolling element\n   */\n  scrollable?: ScrollTarget;\n\n  /**\n   * The scroll threshold to pass to the {@link ScrollWatcher}.\n   * See also {@link Watchers/ScrollWatcher.OnScrollOptions | OnScrollOptions}\n   *\n   * @defaultValue {@link ScrollWatcher} default\n   */\n  threshold?: number;\n};\n\n// --------------------\n\nconst newConfigValidator: WidgetConfigValidatorFunc<\n  Omit<ScrollTriggerConfig, \"directions\">\n> = (element) => {\n  return {\n    scrollable: (key, value) =>\n      (MH.isLiteralString(value)\n        ? waitForReferenceElement(value, element)\n        : null) ?? undefined,\n    threshold: validateNumber,\n  };\n};\n"],"mappings":";;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,KAAKA,EAAE;AACd,OAAO,KAAKC,EAAE;AAQd,SACEC,uBAAuB,EACvBC,kBAAkB;AAEpB,SAASC,uBAAuB;AAChC,SAASC,eAAe,EAAEC,cAAc;AAIxC,SAASC,aAAa;AAEtB,SACEC,eAAe,EACfC,OAAO;AAMT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAaC,aAAa,0BAAAC,QAAA;EAmBxB;AACF;AACA;AACA;AACA;AACA;EACE,SAAAD,cACEE,OAAgB,EAChBC,OAAiB,EACjBC,MAA4B,EAC5B;IAAA,IAAAC,KAAA;IAAAC,eAAA,OAAAN,aAAA;IACAI,MAAM,GAAGA,MAAM,aAANA,MAAM,cAANA,MAAM,GAAI,CAAC,CAAC;IAErB,IAAIG,UAAU,GAAGH,MAAM,CAACG,UAAU;IAClC,IAAI,CAACA,UAAU,EAAE;MACfH,MAAM,CAACI,IAAI,GAAG,IAAI;MAClBD,UAAU,GAAG,CAACjB,EAAE,CAACmB,IAAI,EAAEnB,EAAE,CAACoB,MAAM,EAAEpB,EAAE,CAACqB,MAAM,EAAErB,EAAE,CAACsB,OAAO,CAAC;IAC1D;IAEAP,KAAA,GAAAQ,UAAA,OAAAb,aAAA,GAAME,OAAO,EAAEC,OAAO,EAAEC,MAAM;IAAEU,eAAA,CAAAT,KAAA;IAChCA,KAAA,CAAKU,SAAS,GAAG;MAAA,OAAMxB,EAAE,CAACyB,UAAU,CAACZ,MAAM,CAAC;IAAA;IAE5C,IAAI,CAACb,EAAE,CAAC0B,QAAQ,CAACd,OAAO,CAAC,EAAE;MACzB,OAAAe,0BAAA,CAAAb,KAAA;IACF;IAEA,IAAMc,OAAO,GAAGtB,aAAa,CAACuB,KAAK,CAAC,CAAC;IACrC,IAAMC,UAAU,GAAGjB,MAAM,CAACiB,UAAU;IACpC,IAAMC,SAAS,GAAGlB,MAAM,CAACkB,SAAS;IAElC,IAAMC,kBAAkB,GAAGhB,UAAU,GACjCf,uBAAuB,CAACe,UAAU,CAAC,GACnC,EAAE;IAENY,OAAO,CAACK,QAAQ,CAACnB,KAAA,CAAKoB,GAAG,EAAE;MACzBlB,UAAU,EAAVA,UAAU;MACVc,UAAU,EAAVA,UAAU;MACVC,SAAS,EAATA;IACF,CAAC,CAAC;IAEF,IAAI/B,EAAE,CAAC0B,QAAQ,CAACM,kBAAkB,CAAC,EAAE;MACnCJ,OAAO,CAACK,QAAQ,CAACnB,KAAA,CAAKqB,OAAO,EAAE;QAC7BnB,UAAU,EAAEgB,kBAAkB;QAC9BF,UAAU,EAAVA,UAAU;QACVC,SAAS,EAATA;MACF,CAAC,CAAC;IACJ;IAAC,OAAAjB,KAAA;EACH;EAACsB,SAAA,CAAA3B,aAAA,EAAAC,QAAA;EAAA,OAAA2B,YAAA,CAAA5B,aAAA;IAAA6B,GAAA;IAAAC,KAAA,EA/DD,SAAOC,QAAQA,CAAA,EAAG;MAChBjC,eAAe,CACbR,EAAE,CAAC0C,QAAQ,EACX,UAAC9B,OAAO,EAAE+B,IAAI,EAAE9B,OAAO,EAAEC,MAAM,EAAK;QAClC,OAAO,IAAIJ,aAAa,CACtBE,OAAO,EACPC,OAAO,EACPZ,EAAE,CAAC2C,MAAM,CAAC9B,MAAM,EAAE;UAChBG,UAAU,EAAEZ,eAAe,CAAC,YAAY,EAAEsC,IAAI,EAAExC,kBAAkB;QACpE,CAAC,CACH,CAAC;MACH,CAAC,EACD0C,kBACF,CAAC;IACH;EAAC;AAAA,EAjBgCpC,OAAO;;AAqE1C;AACA;AACA;AACA;;AA6BA;;AAEA,IAAMoC,kBAEL,GAAG,SAFEA,kBAELA,CAAIjC,OAAO,EAAK;EACf,OAAO;IACLmB,UAAU,EAAE,SAAZA,UAAUA,CAAGQ,GAAG,EAAEC,KAAK;MAAA,IAAAM,IAAA;MAAA,QAAAA,IAAA,GACpB7C,EAAE,CAAC8C,eAAe,CAACP,KAAK,CAAC,GACtBpC,uBAAuB,CAACoC,KAAK,EAAE5B,OAAO,CAAC,GACvC,IAAI,cAAAkC,IAAA,cAAAA,IAAA,GAAKE,SAAS;IAAA;IACxBhB,SAAS,EAAE1B;EACb,CAAC;AACH,CAAC","ignoreList":[]}