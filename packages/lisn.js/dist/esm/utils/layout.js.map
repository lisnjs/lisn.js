{"version":3,"file":"layout.js","names":["MH","LisnUsageError","settings","sortedKeysByVal","validateStrList","newBitSpaces","createBitSpace","isValidDevice","device","ORDERED_DEVICES","has","isValidAspectRatio","aspectRatio","ORDERED_ASPECTR","isValidDeviceList","isValidForType","S_DEVICES","isValidAspectRatioList","aspectR","S_ASPECTRS_CAMEL","getOtherDevices","getOtherLayouts","getOtherAspectRatios","getLayoutBitmask","options","layoutBitmask","getBitmaskFromSpec","devices","aspectRatios","bitmask","ORDERED_DEVICE_NAMES","deviceBreakpoints","ORDERED_ASPECTR_NAMES","aspectRatioBreakpoints","bitSpaces","apply","concat","_toConsumableArray","NUM_LAYOUTS","lengthOf","LAYOUT_RANGE_REGEX","RegExp","getLayoutsFromBitmask","keyName","bitSpace","layouts","bit","start","end","value","name","nameOf","push","spec","oppositeBitmask","err","isInstanceOf","isEmpty","singleKeyName","slice","isString","rangeMatch","match","groups","bugError","minLayout","layoutA","maxLayout","layoutB","undefined","usageError","bitmaskFor","_iterator","_createForOfIteratorHelper","_step","s","n","done","lt","e","f"],"sources":["../../../src/ts/utils/layout.ts"],"sourcesContent":["/**\n * @module Utils\n */\n\nimport * as MH from \"@lisn/globals/minification-helpers\";\n\nimport { LisnUsageError } from \"@lisn/globals/errors\";\nimport { settings } from \"@lisn/globals/settings\";\n\nimport {\n  DeviceSpec,\n  Device,\n  AspectRatioSpec,\n  AspectRatio,\n} from \"@lisn/globals/types\";\n\nimport { sortedKeysByVal } from \"@lisn/utils/math\";\nimport { validateStrList } from \"@lisn/utils/validation\";\n\nimport {\n  BitSpace,\n  newBitSpaces,\n  createBitSpace,\n} from \"@lisn/modules/bit-spaces\";\n\n/**\n * Returns true if the given string is a valid device name.\n *\n * @category Validation\n */\nexport const isValidDevice = (device: string): device is Device =>\n  ORDERED_DEVICES.has(device);\n\n/**\n * Returns true if the given string is a valid aspect ratio name.\n *\n * @category Validation\n */\nexport const isValidAspectRatio = (\n  aspectRatio: string,\n): aspectRatio is AspectRatio => ORDERED_ASPECTR.has(aspectRatio);\n\n/**\n * Returns true if the given string is a valid device specification (including\n * `\"min <Device>\"`, etc).\n *\n * Returns false for \"\", although if you passed \"\" in\n * {@link Watchers/LayoutWatcher.OnLayoutOptions | OnLayoutOptions} it would\n * accept it as specifying _all_ devices.\n *\n * @category Validation\n */\nexport const isValidDeviceList = (\n  device: string | string[],\n): device is DeviceSpec | Device[] =>\n  isValidForType(S_DEVICES, device, ORDERED_DEVICES);\n\n/**\n * Returns true if the given string is a valid aspect ratio specification\n * (including `\"min <AspectRatio>\"`, etc).\n *\n * Returns false for \"\", although if you passed \"\" in\n * {@link Watchers/LayoutWatcher.OnLayoutOptions | OnLayoutOptions} it would\n * accept it as specifying _all_ aspect ratios.\n *\n * @category Validation\n */\nexport const isValidAspectRatioList = (\n  aspectR: string | string[],\n): aspectR is AspectRatioSpec | AspectRatio[] =>\n  isValidForType(S_ASPECTRS_CAMEL, aspectR, ORDERED_ASPECTR);\n\n/**\n * Returns a list of {@link Device}s that are not covered by the given device\n * specification. See\n * {@link Watchers/LayoutWatcher.OnLayoutOptions | OnLayoutOptions} for accepted\n * formats.\n *\n * Returns an empty for \"\" or for a specification that includes all devices.\n *\n * @category Layout\n */\nexport const getOtherDevices = (device: DeviceSpec | Device[]): Device[] =>\n  getOtherLayouts(S_DEVICES, device, ORDERED_DEVICES);\n\n/**\n * Returns a list of {@link AspectRatio}s that are not covered by the given\n * aspect ratio specification. See\n * {@link Watchers/LayoutWatcher.OnLayoutOptions | OnLayoutOptions} for accepted\n * formats.\n *\n * Returns an empty for \"\" or for a specification that includes all aspect\n * ratios.\n *\n * @category Layout\n */\nexport const getOtherAspectRatios = (\n  aspectR: AspectRatioSpec | AspectRatio[],\n): AspectRatio[] => getOtherLayouts(S_ASPECTRS_CAMEL, aspectR, ORDERED_ASPECTR);\n\n/**\n * @ignore\n * @internal\n */\nexport const getLayoutBitmask = (options?: {\n  devices?: DeviceSpec | Device[];\n  aspectRatios?: AspectRatioSpec | AspectRatio[];\n}): number => {\n  let layoutBitmask =\n    getBitmaskFromSpec(S_DEVICES, options?.devices, ORDERED_DEVICES) |\n    getBitmaskFromSpec(\n      S_ASPECTRS_CAMEL,\n      options?.aspectRatios,\n      ORDERED_ASPECTR,\n    );\n\n  if (!layoutBitmask) {\n    layoutBitmask = ORDERED_DEVICES.bitmask | ORDERED_ASPECTR.bitmask; // default: all\n  }\n\n  return layoutBitmask;\n};\n\n// In ascending order by width.\nconst ORDERED_DEVICE_NAMES = sortedKeysByVal(settings.deviceBreakpoints);\nconst ORDERED_ASPECTR_NAMES = sortedKeysByVal(settings.aspectRatioBreakpoints);\n\nconst bitSpaces = newBitSpaces();\n\n/**\n * @ignore\n * @internal\n */\nexport const ORDERED_DEVICES = createBitSpace(\n  bitSpaces,\n  ...ORDERED_DEVICE_NAMES,\n);\n\n/**\n * @ignore\n * @internal\n */\nexport const ORDERED_ASPECTR = createBitSpace(\n  bitSpaces,\n  ...ORDERED_ASPECTR_NAMES,\n);\n\n/**\n * @ignore\n * @internal\n */\nexport const NUM_LAYOUTS =\n  MH.lengthOf(ORDERED_DEVICE_NAMES) + MH.lengthOf(ORDERED_ASPECTR_NAMES);\n\n// --------------------\n\nconst S_DEVICES = \"devices\";\nconst S_ASPECTRS_CAMEL = \"aspectRatios\";\n\nconst LAYOUT_RANGE_REGEX = RegExp(\n  \"^ *(\" +\n    \"(?<layoutA>[a-z-]+) +to +(?<layoutB>[a-z-]+)|\" +\n    \"min +(?<minLayout>[a-z-]+)|\" +\n    \"max +(?<maxLayout>[a-z-]+)\" +\n    \") *$\",\n);\n\nconst getLayoutsFromBitmask = <T extends Device | AspectRatio>(\n  keyName: string,\n  bitmask: number,\n  bitSpace: BitSpace<T>,\n): T[] => {\n  const layouts: T[] = [];\n  for (let bit = bitSpace.start; bit <= bitSpace.end; bit++) {\n    const value = 1 << bit;\n    if (bitmask & value) {\n      const name = bitSpace.nameOf(value);\n      if (name) {\n        layouts.push(name);\n      }\n    }\n  }\n\n  return layouts;\n};\n\nconst getOtherLayouts = <T extends Device | AspectRatio>(\n  keyName: string,\n  spec: string | string[],\n  bitSpace: BitSpace<T>,\n): T[] => {\n  const bitmask = getBitmaskFromSpec(keyName, spec, bitSpace);\n  if (!bitmask) {\n    return [];\n  }\n\n  const oppositeBitmask = bitSpace.bitmask & ~bitmask;\n  return getLayoutsFromBitmask(keyName, oppositeBitmask, bitSpace);\n};\n\nconst isValidForType = <T extends Device | AspectRatio>(\n  keyName: string,\n  spec: string | string[],\n  bitSpace: BitSpace<T>,\n): boolean => {\n  try {\n    const bitmask = getBitmaskFromSpec(keyName, spec, bitSpace);\n    return bitmask !== 0;\n  } catch (err) {\n    if (MH.isInstanceOf(err, LisnUsageError)) {\n      return false;\n    }\n    throw err;\n  }\n};\n\nconst getBitmaskFromSpec = <T extends Device | AspectRatio>(\n  keyName: string,\n  spec: string | string[] | undefined | null,\n  bitSpace: BitSpace<T>,\n): number => {\n  if (MH.isEmpty(spec)) {\n    return 0;\n  }\n  const singleKeyName = keyName.slice(0, -1);\n\n  if (MH.isString(spec)) {\n    const rangeMatch = spec.match(LAYOUT_RANGE_REGEX);\n    if (rangeMatch) {\n      /* istanbul ignore next */ // shouldn't happen\n      if (!rangeMatch.groups) {\n        throw MH.bugError(\"Layout regex has no named groups\");\n      }\n\n      const minLayout =\n        rangeMatch.groups.layoutA || rangeMatch.groups.minLayout;\n      const maxLayout =\n        rangeMatch.groups.layoutB || rangeMatch.groups.maxLayout;\n\n      if (minLayout !== undefined && !bitSpace.has(minLayout)) {\n        throw MH.usageError(`Unknown ${singleKeyName} '${minLayout}'`);\n      }\n\n      if (maxLayout !== undefined && !bitSpace.has(maxLayout)) {\n        throw MH.usageError(`Unknown ${singleKeyName} '${maxLayout}'`);\n      }\n\n      return bitSpace.bitmaskFor(minLayout, maxLayout);\n    }\n  }\n\n  let bitmask = 0;\n  const layouts = validateStrList(keyName, spec, bitSpace.has);\n  if (layouts) {\n    for (const lt of layouts) {\n      bitmask |= bitSpace.bit[lt];\n    }\n  }\n\n  return bitmask;\n};\n"],"mappings":"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","ignoreList":[]}