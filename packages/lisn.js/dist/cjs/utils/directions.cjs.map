{"version":3,"file":"directions.cjs","names":["MC","_interopRequireWildcard","require","MH","_math","_validation","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","_typeof","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","_defineProperty","_toPropertyKey","value","enumerable","configurable","writable","_toPrimitive","Symbol","toPrimitive","TypeError","String","Number","_createForOfIteratorHelper","iterator","Array","isArray","_unsupportedIterableToArray","length","_n","F","s","done","f","o","next","_toConsumableArray","_arrayWithoutHoles","_iterableToArray","_nonIterableSpread","_arrayLikeToArray","toString","slice","constructor","name","from","test","getMaxDeltaDirection","exports","deltaX","deltaY","abs","S_NONE","S_AMBIGUOUS","S_LEFT","S_RIGHT","S_UP","S_DOWN","getVectorDirection","vector","angleDiffThreshold","arguments","undefined","min","maxAbs","apply","areParallel","getOppositeDirection","direction","OPPOSITE_DIRECTIONS","usageError","getOppositeXYDirections","directions","directionList","validateStrList","isValidXYDirection","opposites","_iterator","_step","opposite","includes","push","err","lengthOf","_iterator2","XY_DIRECTIONS","_step2","isValidZDirection","Z_DIRECTIONS","isValidDirection","DIRECTIONS","isValidDirectionList","isValidStrList","S_IN","S_OUT","SCROLL_DIRECTIONS","concat"],"sources":["../../../src/ts/utils/directions.ts"],"sourcesContent":["/**\n * @module Utils\n */\n\nimport * as MC from \"@lisn/globals/minification-constants\";\nimport * as MH from \"@lisn/globals/minification-helpers\";\n\nimport {\n  Direction,\n  XYDirection,\n  ZDirection,\n  NoDirection,\n  AmbiguousDirection,\n  CommaSeparatedStr,\n  Vector,\n} from \"@lisn/globals/types\";\n\nimport { maxAbs, areParallel } from \"@lisn/utils/math\";\nimport { isValidStrList, validateStrList } from \"@lisn/utils/validation\";\n\n/**\n * Returns the cardinal direction in the XY plane for the larger of the two\n * deltas (horizontal vs vertical).\n *\n * If both deltas are 0, returns \"none\".\n *\n * If both deltas are equal and non-0, returns \"ambiguous\".\n *\n * @category Directions\n */\nexport const getMaxDeltaDirection = (\n  deltaX: number,\n  deltaY: number,\n): XYDirection | NoDirection | AmbiguousDirection => {\n  if (!MH.abs(deltaX) && !MH.abs(deltaY)) {\n    return MC.S_NONE;\n  }\n\n  if (MH.abs(deltaX) === MH.abs(deltaY)) {\n    return MC.S_AMBIGUOUS;\n  }\n\n  if (MH.abs(deltaX) > MH.abs(deltaY)) {\n    return deltaX < 0 ? MC.S_LEFT : MC.S_RIGHT;\n  }\n  return deltaY < 0 ? MC.S_UP : MC.S_DOWN;\n};\n\n/**\n * Returns the approximate direction of the given 2D vector as one of the\n * cardinal (XY plane) ones: \"up\", \"down\", \"left\" or \"right\"; or \"ambiguous\".\n *\n * @param {} angleDiffThreshold  See {@link areParallel} or\n *                               {@link Utils.areAntiParallel | areAntiParallel}.\n *                               This determines whether the inferred direction\n *                               is ambiguous. For it to _not_ be ambiguous it\n *                               must align with one of the four cardinal\n *                               directions to within `angleDiffThreshold`.\n *                               It doesn't make sense for this value to be < 0\n *                               or >= 45 degrees. If it is, it's forced to be\n *                               positive (absolute) and <= 44.99.\n *\n * @category Directions\n */\nexport const getVectorDirection = (\n  vector: Vector,\n  angleDiffThreshold = 0,\n): XYDirection | AmbiguousDirection | NoDirection => {\n  angleDiffThreshold = MH.min(44.99, MH.abs(angleDiffThreshold));\n\n  if (!maxAbs(...vector)) {\n    return MC.S_NONE;\n  } else if (areParallel(vector, [1, 0], angleDiffThreshold)) {\n    return MC.S_RIGHT;\n  } else if (areParallel(vector, [0, 1], angleDiffThreshold)) {\n    return MC.S_DOWN;\n  } else if (areParallel(vector, [-1, 0], angleDiffThreshold)) {\n    return MC.S_LEFT;\n  } else if (areParallel(vector, [0, -1], angleDiffThreshold)) {\n    return MC.S_UP;\n  }\n\n  return MC.S_AMBIGUOUS;\n};\n\n/**\n * Returns the opposite direction to the given direction or null if the given\n * direction has no opposite.\n *\n * @example\n * ```javascript\n * getOppositeDirection(\"up\"); // -> \"down\"\n * getOppositeDirection(\"down\"); // -> \"up\"\n * getOppositeDirection(\"left\"); // -> \"right\"\n * getOppositeDirection(\"right\"); // -> \"left\"\n * getOppositeDirection(\"none\"); // -> null\n * getOppositeDirection(\"ambiguous\"); // -> null\n * ```\n *\n * @category Directions\n *\n * @throws {@link Errors.LisnUsageError | LisnUsageError}\n *                If the given view is not valid.\n */\nexport const getOppositeDirection = (\n  direction: Direction,\n): Direction | null => {\n  if (!(direction in OPPOSITE_DIRECTIONS)) {\n    throw MH.usageError(\"Invalid 'direction'\");\n  }\n\n  return OPPOSITE_DIRECTIONS[direction];\n};\n\n/**\n * Returns the set of directions which are opposite to the given set of directions.\n *\n * There are two sets of opposite pairs (\"up\"/\"down\" and \"left\"/\"right\") and at\n * least one of the two opposing directions of a pair must be present for the\n * other one to be included. If both directions that constitute a pair of\n * opposites is given, then the other pair is returned instead (minus any that\n * are present in the input). See examples below for clarification.\n *\n * @example\n * ```javascript\n * getOppositeXYDirections(\"up\"); // -> [\"down\"]\n * getOppositeXYDirections(\"left\"); // -> [\"right\"]\n * getOppositeXYDirections(\"up,down\"); // -> [\"left\",\"right\"]\n * getOppositeXYDirections(\"up,left\"); // -> [\"down\",\"right\"]\n * getOppositeXYDirections(\"up,left,right\"); // -> [\"down\"]\n * getOppositeXYDirections(\"none\"); // -> throws\n * getOppositeXYDirections(\"ambiguous\"); // -> throws\n * getOppositeXYDirections(\"in\"); // -> throws\n * ```\n *\n * @category Directions\n *\n * @throws {@link Errors.LisnUsageError | LisnUsageError}\n *                If the given view is not valid.\n */\nexport const getOppositeXYDirections = (\n  directions: CommaSeparatedStr<XYDirection> | XYDirection[],\n): XYDirection[] => {\n  const directionList = validateStrList(\n    \"directions\",\n    directions,\n    isValidXYDirection,\n  );\n\n  if (!directionList) {\n    throw MH.usageError(\"'directions' is required\");\n  }\n\n  const opposites: XYDirection[] = [];\n  for (const direction of directionList) {\n    const opposite = getOppositeDirection(direction);\n    if (\n      opposite &&\n      isValidXYDirection(opposite) &&\n      !MH.includes(directionList, opposite)\n    ) {\n      opposites.push(opposite);\n    }\n  }\n\n  if (!MH.lengthOf(opposites)) {\n    for (const direction of XY_DIRECTIONS) {\n      if (!MH.includes(directionList, direction)) {\n        opposites.push(direction);\n      }\n    }\n  }\n\n  return opposites;\n};\n\n/**\n * Returns true if the given direction is one of the known XY ones.\n *\n * @category Validation\n */\nexport const isValidXYDirection = (\n  direction: string,\n): direction is XYDirection => MH.includes(XY_DIRECTIONS, direction);\n\n/**\n * Returns true if the given direction is one of the known Z ones.\n *\n * @category Validation\n */\nexport const isValidZDirection = (direction: string): direction is ZDirection =>\n  MH.includes(Z_DIRECTIONS, direction);\n\n/**\n * Returns true if the given string is a valid direction.\n *\n * @category Validation\n */\nexport const isValidDirection = (direction: string): direction is Direction =>\n  MH.includes(DIRECTIONS, direction);\n\n/**\n * Returns true if the given string or array is a list of valid directions.\n *\n * @category Validation\n */\nexport const isValidDirectionList = (\n  directions: string | string[],\n): directions is CommaSeparatedStr<Direction> | Direction[] =>\n  isValidStrList(directions, isValidDirection, false);\n\n/**\n * @ignore\n * @internal\n */\nexport const XY_DIRECTIONS = [\n  MC.S_UP,\n  MC.S_DOWN,\n  MC.S_LEFT,\n  MC.S_RIGHT,\n] as const;\n\n/**\n * @ignore\n * @internal\n */\nexport const Z_DIRECTIONS = [MC.S_IN, MC.S_OUT] as const;\n\n/**\n * @ignore\n * @internal\n */\nexport const SCROLL_DIRECTIONS = [\n  ...XY_DIRECTIONS,\n  MC.S_NONE,\n  MC.S_AMBIGUOUS,\n] as const;\n\n/**\n * @ignore\n * @internal\n */\nexport const DIRECTIONS = [\n  ...XY_DIRECTIONS,\n  ...Z_DIRECTIONS,\n  MC.S_NONE,\n  MC.S_AMBIGUOUS,\n] as const;\n\n// --------------------\n\nconst OPPOSITE_DIRECTIONS = {\n  [MC.S_UP]: MC.S_DOWN,\n  [MC.S_DOWN]: MC.S_UP,\n  [MC.S_LEFT]: MC.S_RIGHT,\n  [MC.S_RIGHT]: MC.S_LEFT,\n  [MC.S_IN]: MC.S_OUT,\n  [MC.S_OUT]: MC.S_IN,\n  [MC.S_NONE]: null,\n  [MC.S_AMBIGUOUS]: null,\n} as const;\n"],"mappings":"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","ignoreList":[]}