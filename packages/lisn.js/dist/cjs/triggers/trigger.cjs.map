{"version":3,"file":"trigger.cjs","names":["MC","_interopRequireWildcard","require","MH","_errors","_callback","_cssAlter","_domSearch","_tasks","_text","_validation","_action","_widget","_debug","_interopRequireDefault","e","__esModule","_getRequireWildcardCache","WeakMap","r","t","_typeof","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","o","Symbol","iterator","constructor","prototype","_slicedToArray","_arrayWithHoles","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","TypeError","l","f","next","done","push","value","length","Array","isArray","_toConsumableArray","_arrayWithoutHoles","_iterableToArray","_nonIterableSpread","from","_arrayLikeToArray","_regeneratorRuntime","c","asyncIterator","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","h","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","resolve","__await","then","callInvokeWithMethodAndArg","Error","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","resultName","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","isNaN","displayName","isGeneratorFunction","name","mark","setPrototypeOf","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","_catch","delegateYield","_createForOfIteratorHelper","_n","F","toString","test","asyncGeneratorStep","_asyncToGenerator","arguments","apply","_next","_throw","_classCallCheck","_defineProperties","_toPropertyKey","key","_createClass","_callSuper","_getPrototypeOf","_possibleConstructorReturn","_isNativeReflectConstruct","Reflect","construct","_assertThisInitialized","ReferenceError","Boolean","valueOf","_inherits","_setPrototypeOf","bind","_superPropGet","_get","_superPropBase","_defineProperty","_toPrimitive","toPrimitive","String","Number","Trigger","exports","_Widget","element","actions","config","_config$once","_config$oneWay","_config$doDelay","_config$undoDelay","_this","logger","debug","Logger","concat","formatAsString","logAtCreation","once","oneWay","delay","doDelay","undoDelay","lastCallId","toggleState","callActions","_ref","_callee","callFn","newToggleState","myCallId","_iterator","_step","action","_callee$","_context","isDisabled","randId","debug10","waitForDelay","err","remove","run","toggle","_x","_x2","_x3","wrapCallback","undo","S_TOGGLE","getActions","getConfig","copyObject","id","instance","isInstanceOf","register","registerTrigger","Widget","newTrigger","configValidator","clsPref","prefixName","newWidget","_ref2","_callee2","_getData","widgets","baseConfigValidator","thisConfigValidator","allSpecs","_iterator2","_step2","cls","_iterator3","_step3","_config$actOn","spec","_splitOn","_splitOn2","tmp","configSpec","_splitOn3","_splitOn4","argSpec","allActionSpecs","_args2","_config","actionTarget","_actions","_iterator4","_step4","actionSpec","_splitOn5","_splitOn6","_name","actionArgsAndOptions","_callee2$","_context2","newBaseConfigValidator","isFunction","t0","splitOn","getData","TRIGGER_SEP","classList","startsWith","lengthOf","OPTION_PREF_CHAR","ACTION_PREF_CHAR","args","filterBlank","fetchWidgetConfig","assign","actOn","ACTION_ARGS_PREF_CHAR","t1","fetchAction","t2","t3","LisnUsageError","t4","t5","t6","t7","_x4","registerWidget","selector","validateString","validateBoolean","validateNumber","_ref3","isLiteralString","waitForReferenceElement","undefined"],"sources":["../../../src/ts/triggers/trigger.ts"],"sourcesContent":["/**\n * ## Specification for the HTML API for triggers\n *\n * The following describes the general syntax when using the HTML API and\n * automatic widgets\n * ({@link Settings.settings.autoWidgets | settings.autoWidgets} is true)\n * specifically for triggers and actions.\n *\n * A trigger specification should be given as a\n * `data-lisn-on-<TriggerName>=\"<TriggerSpecList>\"` attribute.\n * A fallback option of using a CSS class of the form\n * `lisn-on-<TriggerName>--<TriggerSpec>` is also supported but not recommended.\n *\n * The general specification for a trigger is of the form:\n *\n * ```\n * <TriggerSpecList> ::= <TriggerSpec> { \";\" <TriggerSpec> }\n *\n * <TriggerSpec> ::= [ <TriggerArg> { \",\" <TriggerArg> } ]\n *                   \"@\" <ActionSpec> { \"@\" <ActionSpec> }\n *                   { \"+\" <TriggerOption> }\n *\n * <TriggerOption> ::=\n *     <BooleanOptionName> [ \"=\" ( \"false\" | \"true\" ) ] |\n *     <OptionName> \"=\" <OptionValue>\n *\n * <ActionSpec> ::= <ActionName> [ \":\" <ActionArgOrOption> { \",\" <ActionArgOrOption> } ]\n *\n * <ActionArgOrOption> ::= <ActionArg> | <OptionName> \"=\" <OptionValue>\n * ```\n *\n * where `<TriggerArg>` is the particular trigger's main argument, which could\n * be required or optional (and not all triggers accept an argument). See each\n * trigger's specification for their arguments and options.\n *\n * Also refer to each action for their accepted arguments and/or options if any.\n *\n * **NOTE:**\n *\n * There can be 0 or more spaces around any of the separator characters.\n *\n * At least one action (with a preceding \"@\" character) is always required.\n *\n * The characters \";\", \",\", \"=\", \"@\", \"+\" and \":\" are reserved separators and\n * cannot be used literally as part of an argument or option value.\n *\n * @module Triggers\n *\n * @categoryDescription Manual run\n * {@link Trigger} is the base trigger class that you can extend when building\n * custom triggers and it also registers a trigger that needs to be run\n * manually (by e.g. the {@link Actions.Run | Run} action).\n */\n\nimport * as MC from \"@lisn/globals/minification-constants\";\nimport * as MH from \"@lisn/globals/minification-helpers\";\n\nimport { LisnUsageError } from \"@lisn/globals/errors\";\n\nimport { wrapCallback } from \"@lisn/modules/callback\";\n\nimport { getData } from \"@lisn/utils/css-alter\";\nimport { waitForReferenceElement } from \"@lisn/utils/dom-search\";\nimport { waitForDelay } from \"@lisn/utils/tasks\";\nimport { formatAsString, randId, splitOn } from \"@lisn/utils/text\";\nimport {\n  validateString,\n  validateNumber,\n  validateBoolean,\n} from \"@lisn/utils/validation\";\n\nimport { Action, fetchAction } from \"@lisn/actions/action\";\n\nimport {\n  Widget,\n  WidgetConfigValidator,\n  WidgetConfigValidatorFunc,\n  WidgetConfigAsyncValidatorObject,\n  registerWidget,\n  fetchWidgetConfig,\n} from \"@lisn/widgets/widget\";\n\nimport debug from \"@lisn/debug/debug\";\n\n/**\n * {@link Trigger} is the base trigger class that you can extend when building\n * custom triggers and it also registers a trigger that needs to be run\n * manually (by e.g. the {@link Actions.Run | Run} action).\n *\n * -------\n *\n * To use with auto-widgets (HTML API), see {@link registerTrigger} for the\n * specification.\n *\n * @example\n * Show the element 1000ms after the first time the trigger is run.\n *\n * ```html\n * <div data-lisn-on-run=\"@show +once +delay=1000\"></div>\n * ```\n *\n * @category Manual run\n */\nexport class Trigger extends Widget {\n  /**\n   * \"Do\"es all the {@link Action}s linked to the trigger.\n   */\n  readonly run: () => Promise<void>;\n\n  /**\n   * \"Undo\"es all the {@link Action}s linked to the trigger.\n   */\n  readonly reverse: () => Promise<void>;\n\n  /**\n   * \"Toggle\"s all the {@link Action}s linked to the trigger.\n   */\n  readonly toggle: () => Promise<void>;\n\n  /**\n   * Returns the trigger's actions.\n   */\n  readonly getActions: () => Action[];\n\n  /**\n   * Returns the trigger config.\n   */\n  readonly getConfig: () => TriggerConfig;\n\n  static get(element: Element, id: string): Trigger | null {\n    const instance = super.get(element, id);\n    if (MH.isInstanceOf(instance, Trigger)) {\n      return instance;\n    }\n    return null;\n  }\n\n  static register() {\n    registerTrigger(\n      \"run\",\n      (element, a, actions, config) => new Trigger(element, actions, config),\n      {},\n    );\n  }\n\n  /**\n   * If no actions are supplied, nothing is done.\n   *\n   * @throws {@link Errors.LisnUsageError | LisnUsageError}\n   *                If the config is invalid.\n   */\n  constructor(element: Element, actions: Action[], config?: TriggerConfig) {\n    super(element, config);\n\n    const logger = debug\n      ? new debug.Logger({\n          name: `Trigger-${formatAsString(element)}`,\n          logAtCreation: { actions, config },\n        })\n      : null;\n\n    const once = config?.once ?? false;\n    const oneWay = config?.oneWay ?? false;\n    const delay = config?.delay || 0;\n    const doDelay = config?.doDelay ?? delay;\n    const undoDelay = config?.undoDelay ?? delay;\n\n    let lastCallId: string;\n    // false if next should be do; true if next should be undo.\n    // Used for determining delays only.\n    let toggleState = false;\n\n    const callActions = async (\n      delay: number,\n      callFn: (action: Action) => void,\n      newToggleState: boolean,\n    ) => {\n      if (this.isDisabled()) {\n        return;\n      }\n\n      const myCallId = randId();\n      lastCallId = myCallId;\n      debug: logger?.debug10(\n        `callActions [${myCallId}] (new toggle state ${newToggleState})`,\n        callFn,\n      );\n\n      if (delay) {\n        await waitForDelay(delay);\n        if (lastCallId !== myCallId) {\n          // overriden by subsequent call\n          debug: logger?.debug10(\n            `callActions [${myCallId}]: overriden by ${lastCallId}`,\n          );\n          return;\n        }\n      }\n\n      for (const action of actions) {\n        debug: logger?.debug10(`callActions [${myCallId}]`, action);\n        callFn(action);\n      }\n\n      toggleState = newToggleState;\n\n      if (toggleState && once) {\n        MH.remove(run);\n        MH.remove(reverse);\n        MH.remove(toggle);\n      }\n    };\n\n    const run = wrapCallback(() => {\n      callActions(\n        doDelay,\n        (action) => {\n          action.do();\n        },\n        true,\n      ); // don't await\n    });\n\n    const reverse = wrapCallback(() => {\n      if (!oneWay) {\n        callActions(\n          undoDelay,\n          (action) => {\n            action.undo();\n          },\n          false,\n        ); // don't await\n      }\n    });\n\n    const toggle = wrapCallback(() => {\n      callActions(\n        toggleState ? undoDelay : doDelay,\n        (action) => {\n          action[MC.S_TOGGLE]();\n        },\n        !toggleState,\n      ); // don't await\n    });\n\n    // ----------\n\n    this.run = run.invoke;\n    this.reverse = reverse.invoke;\n    this[MC.S_TOGGLE] = oneWay ? run.invoke : toggle.invoke;\n    this.getActions = () => [...actions]; // copy\n    this.getConfig = () => MH.copyObject(config || {});\n  }\n}\n\n/**\n * @interface\n */\nexport type TriggerConfig = {\n  /**\n   * An ID for the trigger so that it can be looked up by ID. It has to be\n   * unique for each element, but you can use the same ID on different\n   * elements.\n   *\n   * @defaultValue undefined\n   */\n  id?: string;\n\n  /**\n   * If true, the trigger will run at most once. This will result in the `run`\n   * or `toggle` methods removing all three of `run`, `reverse` and `toggle`\n   * when called, so that the actions are done at most once.\n   *\n   * @defaultValue false\n   */\n  once?: boolean;\n\n  /**\n   * If true, then the `reverse` method of the trigger will do nothing and the\n   * `toggle` method will always do the actions, i.e. will be equivalent to\n   * `run`.\n   *\n   * @defaultValue false\n   */\n  oneWay?: boolean;\n\n  /**\n   * Delay in milliseconds before doing, undoing or toggling actions.\n   *\n   * @defaultValue 0\n   */\n  delay?: number;\n\n  /**\n   * Delay in milliseconds before doing actions.\n   *\n   * @defaultValue {@link TriggerConfig.delay}\n   */\n  doDelay?: number;\n\n  /**\n   * Delay in milliseconds before undoing actions.\n   *\n   * @defaultValue {@link TriggerConfig.delay}\n   */\n  undoDelay?: number;\n\n  /**\n   * The element to instantiate all actions on this trigger for.\n   *\n   * @defaultValue The element on which the {@link Trigger} is defined\n   */\n  actOn?: Element;\n};\n\nexport type TriggerCreateFn<Config extends TriggerConfig> = (\n  element: Element,\n  args: string[],\n  actions: Action[],\n  config: Config,\n) => Trigger | Promise<Trigger>;\n\n/**\n * Registers the given trigger as a widget to be automatically configured for\n * all elements that have a trigger specification with the given name.\n *\n * A trigger specification can be given as a\n * `data-lisn-on-<TriggerName>=\"<TriggerSpec> { \";\" <TriggerSpec> }\"` attribute\n * or as one or more `lisn-on-<TriggerName>--<TriggerSpec>` classes.\n *\n * See the top of the {@link Triggers} page for an explanation of `<TriggerSpec>`.\n *\n * Using classes instead of attributes is not recommended and only available as\n * a fallback option.\n *\n * **IMPORTANT:** If a trigger by that name is already registered, the current\n * call does nothing, even if the remaining arguments differ.\n *\n * @param {} name       The name of the trigger. Should be in kebab-case.\n * @param {} newTrigger Called for every trigger specification on any element\n *                      that has one or more trigger specifications.\n * @param {} configValidator\n *                      A validator object, or a function that returns such an\n *                      object, for all options that are specific to the\n *                      trigger. Base options (in {@link TriggerConfig}) will\n *                      be parsed automatically and don't need to be handled by\n *                      `configValidator`.\n *                      If the parameter is a function, it will be called with\n *                      the element on which the trigger is being defined.\n *\n * @see {@link registerWidget}\n */\nexport const registerTrigger = <Config extends TriggerConfig = TriggerConfig>(\n  name: string,\n  newTrigger: TriggerCreateFn<Config>,\n  configValidator?: null | WidgetConfigValidator<Config>,\n) => {\n  const clsPref = MH.prefixName(`on-${name}`);\n\n  const newWidget = async (element: Element) => {\n    const widgets: Widget[] = [];\n    const baseConfigValidator = newBaseConfigValidator(element);\n    const thisConfigValidator = MH.isFunction(configValidator)\n      ? await configValidator(element)\n      : configValidator;\n\n    const allSpecs = splitOn(\n      getData(element, MH.prefixName(`on-${name}`)) ?? \"\",\n      TRIGGER_SEP,\n      true,\n    );\n\n    for (const cls of MH.classList(element)) {\n      if (cls.startsWith(`${clsPref}--`)) {\n        allSpecs.push(cls.slice(MH.lengthOf(clsPref) + 2));\n      }\n    }\n\n    for (const spec of allSpecs) {\n      const [tmp, configSpec] = splitOn(spec, OPTION_PREF_CHAR, true, 1);\n      const [argSpec, allActionSpecs] = splitOn(tmp, ACTION_PREF_CHAR, true, 1);\n\n      const args = MH.filterBlank(splitOn(argSpec, \",\", true)) || [];\n\n      const config = await fetchWidgetConfig(\n        configSpec,\n        MH.assign(\n          baseConfigValidator,\n          thisConfigValidator,\n        ) as WidgetConfigAsyncValidatorObject<Required<TriggerConfig> & Config>,\n        OPTION_PREF_CHAR,\n      );\n\n      const actionTarget = config.actOn ?? element;\n\n      const actions = [];\n      for (const actionSpec of splitOn(\n        allActionSpecs || \"\",\n        ACTION_PREF_CHAR,\n        true,\n      )) {\n        const [name, actionArgsAndOptions] = splitOn(\n          actionSpec,\n          ACTION_ARGS_PREF_CHAR,\n          true,\n          1,\n        );\n\n        try {\n          actions.push(\n            await fetchAction(actionTarget, name, actionArgsAndOptions || \"\"),\n          );\n        } catch (err) {\n          if (MH.isInstanceOf(err, LisnUsageError)) {\n            // fetchAction would have logged an error\n            continue;\n          }\n\n          throw err;\n        }\n      }\n\n      widgets.push(await newTrigger(element, args, actions, config));\n    }\n\n    return widgets;\n  };\n\n  registerWidget(name, newWidget, null, {\n    selector: `[class^=\"${clsPref}--\"],[class*=\" ${clsPref}--\"],[data-${clsPref}]`,\n  });\n};\n\n// --------------------\n\nconst TRIGGER_SEP = \";\";\nconst OPTION_PREF_CHAR = \"+\";\nconst ACTION_PREF_CHAR = \"@\";\nconst ACTION_ARGS_PREF_CHAR = \":\";\n\nconst newBaseConfigValidator: WidgetConfigValidatorFunc<TriggerConfig> = (\n  element,\n) => {\n  return {\n    id: validateString,\n    once: validateBoolean,\n    oneWay: validateBoolean,\n    delay: validateNumber,\n    doDelay: validateNumber,\n    undoDelay: validateNumber,\n    actOn: (key, value) =>\n      (MH.isLiteralString(value)\n        ? waitForReferenceElement(value, element)\n        : null) ?? undefined,\n  };\n};\n"],"mappings":"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","ignoreList":[]}