{"version":3,"file":"layout.cjs","names":["MH","_interopRequireWildcard","require","_errors","_settings","_math","_validation","_bitSpaces","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","_typeof","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","_createForOfIteratorHelper","Symbol","iterator","Array","isArray","_unsupportedIterableToArray","length","_n","F","s","done","value","f","TypeError","o","next","_toConsumableArray","_arrayWithoutHoles","_iterableToArray","_nonIterableSpread","_arrayLikeToArray","toString","slice","constructor","name","from","test","isValidDevice","exports","device","ORDERED_DEVICES","isValidAspectRatio","aspectRatio","ORDERED_ASPECTR","isValidDeviceList","isValidForType","S_DEVICES","isValidAspectRatioList","aspectR","S_ASPECTRS_CAMEL","getOtherDevices","getOtherLayouts","getOtherAspectRatios","getLayoutBitmask","options","layoutBitmask","getBitmaskFromSpec","devices","aspectRatios","bitmask","ORDERED_DEVICE_NAMES","sortedKeysByVal","settings","deviceBreakpoints","ORDERED_ASPECTR_NAMES","aspectRatioBreakpoints","bitSpaces","newBitSpaces","createBitSpace","apply","concat","NUM_LAYOUTS","lengthOf","LAYOUT_RANGE_REGEX","RegExp","getLayoutsFromBitmask","keyName","bitSpace","layouts","bit","start","end","nameOf","push","spec","oppositeBitmask","err","isInstanceOf","LisnUsageError","isEmpty","singleKeyName","isString","rangeMatch","match","groups","bugError","minLayout","layoutA","maxLayout","layoutB","undefined","usageError","bitmaskFor","validateStrList","_iterator","_step","lt"],"sources":["../../../src/ts/utils/layout.ts"],"sourcesContent":["/**\n * @module Utils\n */\n\nimport * as MH from \"@lisn/globals/minification-helpers\";\n\nimport { LisnUsageError } from \"@lisn/globals/errors\";\nimport { settings } from \"@lisn/globals/settings\";\n\nimport {\n  DeviceSpec,\n  Device,\n  AspectRatioSpec,\n  AspectRatio,\n} from \"@lisn/globals/types\";\n\nimport { sortedKeysByVal } from \"@lisn/utils/math\";\nimport { validateStrList } from \"@lisn/utils/validation\";\n\nimport {\n  BitSpace,\n  newBitSpaces,\n  createBitSpace,\n} from \"@lisn/modules/bit-spaces\";\n\n/**\n * Returns true if the given string is a valid device name.\n *\n * @category Validation\n */\nexport const isValidDevice = (device: string): device is Device =>\n  ORDERED_DEVICES.has(device);\n\n/**\n * Returns true if the given string is a valid aspect ratio name.\n *\n * @category Validation\n */\nexport const isValidAspectRatio = (\n  aspectRatio: string,\n): aspectRatio is AspectRatio => ORDERED_ASPECTR.has(aspectRatio);\n\n/**\n * Returns true if the given string is a valid device specification (including\n * `\"min <Device>\"`, etc).\n *\n * Returns false for \"\", although if you passed \"\" in\n * {@link Watchers/LayoutWatcher.OnLayoutOptions | OnLayoutOptions} it would\n * accept it as specifying _all_ devices.\n *\n * @category Validation\n */\nexport const isValidDeviceList = (\n  device: string | string[],\n): device is DeviceSpec | Device[] =>\n  isValidForType(S_DEVICES, device, ORDERED_DEVICES);\n\n/**\n * Returns true if the given string is a valid aspect ratio specification\n * (including `\"min <AspectRatio>\"`, etc).\n *\n * Returns false for \"\", although if you passed \"\" in\n * {@link Watchers/LayoutWatcher.OnLayoutOptions | OnLayoutOptions} it would\n * accept it as specifying _all_ aspect ratios.\n *\n * @category Validation\n */\nexport const isValidAspectRatioList = (\n  aspectR: string | string[],\n): aspectR is AspectRatioSpec | AspectRatio[] =>\n  isValidForType(S_ASPECTRS_CAMEL, aspectR, ORDERED_ASPECTR);\n\n/**\n * Returns a list of {@link Device}s that are not covered by the given device\n * specification. See\n * {@link Watchers/LayoutWatcher.OnLayoutOptions | OnLayoutOptions} for accepted\n * formats.\n *\n * Returns an empty for \"\" or for a specification that includes all devices.\n *\n * @category Layout\n */\nexport const getOtherDevices = (device: DeviceSpec | Device[]): Device[] =>\n  getOtherLayouts(S_DEVICES, device, ORDERED_DEVICES);\n\n/**\n * Returns a list of {@link AspectRatio}s that are not covered by the given\n * aspect ratio specification. See\n * {@link Watchers/LayoutWatcher.OnLayoutOptions | OnLayoutOptions} for accepted\n * formats.\n *\n * Returns an empty for \"\" or for a specification that includes all aspect\n * ratios.\n *\n * @category Layout\n */\nexport const getOtherAspectRatios = (\n  aspectR: AspectRatioSpec | AspectRatio[],\n): AspectRatio[] => getOtherLayouts(S_ASPECTRS_CAMEL, aspectR, ORDERED_ASPECTR);\n\n/**\n * @ignore\n * @internal\n */\nexport const getLayoutBitmask = (options?: {\n  devices?: DeviceSpec | Device[];\n  aspectRatios?: AspectRatioSpec | AspectRatio[];\n}): number => {\n  let layoutBitmask =\n    getBitmaskFromSpec(S_DEVICES, options?.devices, ORDERED_DEVICES) |\n    getBitmaskFromSpec(\n      S_ASPECTRS_CAMEL,\n      options?.aspectRatios,\n      ORDERED_ASPECTR,\n    );\n\n  if (!layoutBitmask) {\n    layoutBitmask = ORDERED_DEVICES.bitmask | ORDERED_ASPECTR.bitmask; // default: all\n  }\n\n  return layoutBitmask;\n};\n\n// In ascending order by width.\nconst ORDERED_DEVICE_NAMES = sortedKeysByVal(settings.deviceBreakpoints);\nconst ORDERED_ASPECTR_NAMES = sortedKeysByVal(settings.aspectRatioBreakpoints);\n\nconst bitSpaces = newBitSpaces();\n\n/**\n * @ignore\n * @internal\n */\nexport const ORDERED_DEVICES = createBitSpace(\n  bitSpaces,\n  ...ORDERED_DEVICE_NAMES,\n);\n\n/**\n * @ignore\n * @internal\n */\nexport const ORDERED_ASPECTR = createBitSpace(\n  bitSpaces,\n  ...ORDERED_ASPECTR_NAMES,\n);\n\n/**\n * @ignore\n * @internal\n */\nexport const NUM_LAYOUTS =\n  MH.lengthOf(ORDERED_DEVICE_NAMES) + MH.lengthOf(ORDERED_ASPECTR_NAMES);\n\n// --------------------\n\nconst S_DEVICES = \"devices\";\nconst S_ASPECTRS_CAMEL = \"aspectRatios\";\n\nconst LAYOUT_RANGE_REGEX = RegExp(\n  \"^ *(\" +\n    \"(?<layoutA>[a-z-]+) +to +(?<layoutB>[a-z-]+)|\" +\n    \"min +(?<minLayout>[a-z-]+)|\" +\n    \"max +(?<maxLayout>[a-z-]+)\" +\n    \") *$\",\n);\n\nconst getLayoutsFromBitmask = <T extends Device | AspectRatio>(\n  keyName: string,\n  bitmask: number,\n  bitSpace: BitSpace<T>,\n): T[] => {\n  const layouts: T[] = [];\n  for (let bit = bitSpace.start; bit <= bitSpace.end; bit++) {\n    const value = 1 << bit;\n    if (bitmask & value) {\n      const name = bitSpace.nameOf(value);\n      if (name) {\n        layouts.push(name);\n      }\n    }\n  }\n\n  return layouts;\n};\n\nconst getOtherLayouts = <T extends Device | AspectRatio>(\n  keyName: string,\n  spec: string | string[],\n  bitSpace: BitSpace<T>,\n): T[] => {\n  const bitmask = getBitmaskFromSpec(keyName, spec, bitSpace);\n  if (!bitmask) {\n    return [];\n  }\n\n  const oppositeBitmask = bitSpace.bitmask & ~bitmask;\n  return getLayoutsFromBitmask(keyName, oppositeBitmask, bitSpace);\n};\n\nconst isValidForType = <T extends Device | AspectRatio>(\n  keyName: string,\n  spec: string | string[],\n  bitSpace: BitSpace<T>,\n): boolean => {\n  try {\n    const bitmask = getBitmaskFromSpec(keyName, spec, bitSpace);\n    return bitmask !== 0;\n  } catch (err) {\n    if (MH.isInstanceOf(err, LisnUsageError)) {\n      return false;\n    }\n    throw err;\n  }\n};\n\nconst getBitmaskFromSpec = <T extends Device | AspectRatio>(\n  keyName: string,\n  spec: string | string[] | undefined | null,\n  bitSpace: BitSpace<T>,\n): number => {\n  if (MH.isEmpty(spec)) {\n    return 0;\n  }\n  const singleKeyName = keyName.slice(0, -1);\n\n  if (MH.isString(spec)) {\n    const rangeMatch = spec.match(LAYOUT_RANGE_REGEX);\n    if (rangeMatch) {\n      /* istanbul ignore next */ // shouldn't happen\n      if (!rangeMatch.groups) {\n        throw MH.bugError(\"Layout regex has no named groups\");\n      }\n\n      const minLayout =\n        rangeMatch.groups.layoutA || rangeMatch.groups.minLayout;\n      const maxLayout =\n        rangeMatch.groups.layoutB || rangeMatch.groups.maxLayout;\n\n      if (minLayout !== undefined && !bitSpace.has(minLayout)) {\n        throw MH.usageError(`Unknown ${singleKeyName} '${minLayout}'`);\n      }\n\n      if (maxLayout !== undefined && !bitSpace.has(maxLayout)) {\n        throw MH.usageError(`Unknown ${singleKeyName} '${maxLayout}'`);\n      }\n\n      return bitSpace.bitmaskFor(minLayout, maxLayout);\n    }\n  }\n\n  let bitmask = 0;\n  const layouts = validateStrList(keyName, spec, bitSpace.has);\n  if (layouts) {\n    for (const lt of layouts) {\n      bitmask |= bitSpace.bit[lt];\n    }\n  }\n\n  return bitmask;\n};\n"],"mappings":"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","ignoreList":[]}