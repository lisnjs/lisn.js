{"version":3,"file":"dom-alter.js","names":["_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","_catch","delegateYield","asyncGeneratorStep","_asyncToGenerator","arguments","apply","_next","_throw","MC","MH","hideElement","hasClass","addClassesNow","setDataNow","setBoolData","waitForMutateTime","isInlineTag","randId","wrapElementNow","element","options","wrapper","createWrapperFor","ignoreMove","from","parentOf","to","replaceWith","append","wrapElement","_ref","_callee","_callee$","_context","_x","_x2","wrapChildrenNow","moveChildrenNow","moveElementNow","wrapChildren","_ref2","_callee2","_callee2$","_context2","_x3","_x4","replaceElementNow","newElement","replaceElement","_ref3","_callee3","_callee3$","_context3","_x5","_x6","_x7","swapElementsNow","elementA","elementB","temp","createElement","swapElements","_ref4","_callee4","_callee4$","_context4","_x8","_x9","_x10","oldParent","newParent","_iterator","_createForOfIteratorHelper","childrenOf","_step","child","err","_toConsumableArray","moveChildren","_ref5","_callee5","_callee5$","_context5","_x11","_x12","_x13","parentEl","position","remove","moveElement","_ref6","_callee6","_callee6$","_context6","_x14","_x15","hideAndRemoveElement","_ref7","_callee7","delay","_args7","_callee7$","_context7","undefined","_x16","getOrAssignID","prefix","domID","id","concat","wrapScrollingContent","_ref8","_callee8","firstChild","_callee8$","_context8","lengthOf","isHTMLElement","PREFIX_CONTENT_WRAPPER","_x17","cloneElement","clone","cloneNode","prefixName","insertGhostCloneNow","insertBefore","PREFIX_GHOST","PREFIX_TRANSITION_DISABLE","PREFIX_ANIMATE_DISABLE","PREFIX_WRAPPER","_wrapper","_clone","insertGhostClone","target","recordsToSkipOnce","set","getIgnoreMove","get","clearIgnoreMove","setTimer","deleteKey","insertArrow","direction","tag","arrow","S_ARROW","newMap","isElement","tagName"],"sources":["../../../src/ts/utils/dom-alter.ts"],"sourcesContent":["/**\n * @module Utils\n *\n * @categoryDescription DOM: Altering\n * These functions alter the DOM tree, but could lead to forced layout if not\n * scheduled using {@link waitForMutateTime}.\n *\n * @categoryDescription DOM: Altering (optimized)\n * These functions alter the DOM tree in an optimized way using\n * {@link waitForMutateTime} and so are asynchronous.\n */\n\nimport * as MC from \"@lisn/globals/minification-constants\";\nimport * as MH from \"@lisn/globals/minification-helpers\";\n\nimport {\n  hideElement,\n  hasClass,\n  addClassesNow,\n  setDataNow,\n  setBoolData,\n} from \"@lisn/utils/css-alter\";\nimport { waitForMutateTime } from \"@lisn/utils/dom-optimize\";\nimport { isInlineTag } from \"@lisn/utils/dom-query\";\nimport { randId } from \"@lisn/utils/text\";\n\n/**\n * Wraps the element in the given wrapper, or a newly created element if not given.\n *\n * @param {} [options.wrapper]\n *              If it's an element, it is used as the wrapper. If it's a string\n *              tag name, then a new element with this tag is created as the\n *              wrapper. If not given, then `div` is used if the element to be\n *              wrapped has an block-display tag, or otherwise `span` (if the\n *              element to be wrapped has an inline tag name).\n * @param {} [options.ignoreMove]\n *              If true, the DOM watcher instances will ignore the operation of\n *              replacing the element (so as to not trigger relevant callbacks).\n * @returns {} The wrapper element that was either passed in options or created.\n *\n * @category DOM: Altering\n */\nexport const wrapElementNow = (\n  element: Element,\n  options?: {\n    wrapper?: HTMLElement | keyof HTMLElementTagNameMap;\n    ignoreMove?: boolean;\n  },\n) => {\n  const wrapper = createWrapperFor(element, options?.wrapper);\n\n  if (options?.ignoreMove === true) {\n    ignoreMove(element, {\n      from: MH.parentOf(element),\n      to: wrapper,\n    });\n\n    ignoreMove(wrapper, {\n      to: MH.parentOf(element),\n    });\n  }\n\n  element.replaceWith(wrapper);\n  wrapper.append(element);\n\n  return wrapper;\n};\n\n/**\n * Like {@link wrapElementNow} except it will {@link waitForMutateTime}.\n *\n * @category DOM: Altering (optimized)\n */\nexport const wrapElement = async (\n  element: Element,\n  options?: {\n    wrapper?: HTMLElement | keyof HTMLElementTagNameMap;\n    ignoreMove?: boolean;\n  },\n) => waitForMutateTime().then(() => wrapElementNow(element, options));\n\n/**\n * Wraps the element's children in the given wrapper, or a newly created element\n * if not given.\n *\n * @see {@link wrapElementNow}.\n *\n * @category DOM: Altering\n */\nexport const wrapChildrenNow = (\n  element: Element,\n  options?: {\n    wrapper?: HTMLElement | keyof HTMLElementTagNameMap;\n    ignoreMove?: boolean;\n  },\n) => {\n  const wrapper = createWrapperFor(element, options?.wrapper);\n\n  moveChildrenNow(element, wrapper, { ignoreMove: true });\n  moveElementNow(wrapper, {\n    to: element,\n    ignoreMove: true,\n  });\n\n  return wrapper;\n};\n\n/**\n * Like {@link wrapChildrenNow} except it will {@link waitForMutateTime}.\n *\n * @category DOM: Altering (optimized)\n */\nexport const wrapChildren = async (\n  element: Element,\n  options?: {\n    wrapper?: HTMLElement | keyof HTMLElementTagNameMap;\n    ignoreMove?: boolean;\n  },\n) => waitForMutateTime().then(() => wrapChildrenNow(element, options));\n\n/**\n * Replace an element with another one.\n *\n * @param {} [options.ignoreMove]\n *              If true, the DOM watcher instances will ignore the operation of\n *              moving the element (so as to not trigger relevant callbacks).\n *\n * @category DOM: Altering\n */\nexport const replaceElementNow = (\n  element: Element,\n  newElement: Element,\n  options?: {\n    ignoreMove?: boolean;\n  },\n) => {\n  if (options?.ignoreMove === true) {\n    ignoreMove(\n      // remove element\n      element,\n      { from: MH.parentOf(element) },\n    );\n\n    ignoreMove(\n      // move newElement to element's current parent\n      newElement,\n      { from: MH.parentOf(newElement), to: MH.parentOf(element) },\n    );\n  }\n\n  element.replaceWith(newElement);\n};\n\n/**\n * Like {@link replaceElementNow} except it will {@link waitForMutateTime}.\n *\n * @category DOM: Altering (optimized)\n */\nexport const replaceElement = async (\n  element: Element,\n  newElement: Element,\n  options?: {\n    ignoreMove?: boolean;\n  },\n) =>\n  waitForMutateTime().then(() =>\n    replaceElementNow(element, newElement, options),\n  );\n\n/**\n * Replace an element with another one.\n *\n * @param {} [options.ignoreMove]\n *              If true, the DOM watcher instances will ignore the operation of\n *              moving the element (so as to not trigger relevant callbacks).\n *\n * @category DOM: Altering\n */\nexport const swapElementsNow = (\n  elementA: Element,\n  elementB: Element,\n  options?: {\n    ignoreMove?: boolean;\n  },\n) => {\n  const temp = MH.createElement(\"div\");\n  replaceElementNow(elementA, temp, options);\n  replaceElementNow(elementB, elementA, options);\n  replaceElementNow(temp, elementB, options);\n};\n\n/**\n * Like {@link swapElementsNow} except it will {@link waitForMutateTime}.\n *\n * @category DOM: Altering (optimized)\n */\nexport const swapElements = async (\n  elementA: Element,\n  elementB: Element,\n  options?: {\n    ignoreMove?: boolean;\n  },\n) =>\n  waitForMutateTime().then(() => swapElementsNow(elementA, elementB, options));\n\n/**\n * Move an element's children to a new element\n *\n * @param {} [options.ignoreMove]\n *              If true, the DOM watcher instances will ignore the operation of\n *              moving the children (so as to not trigger relevant callbacks).\n *\n * @category DOM: Altering\n */\nexport const moveChildrenNow = (\n  oldParent: Element,\n  newParent: Element,\n  options?: {\n    ignoreMove?: boolean;\n  },\n) => {\n  if (options?.ignoreMove === true) {\n    for (const child of MH.childrenOf(oldParent)) {\n      ignoreMove(child, {\n        from: oldParent,\n        to: newParent,\n      });\n    }\n  }\n\n  newParent.append(...MH.childrenOf(oldParent));\n};\n\n/**\n * Like {@link moveChildrenNow} except it will {@link waitForMutateTime}.\n *\n * @category DOM: Altering (optimized)\n */\nexport const moveChildren = async (\n  oldParent: Element,\n  newParent: Element,\n  options?: {\n    ignoreMove?: boolean;\n  },\n) =>\n  waitForMutateTime().then(() =>\n    moveChildrenNow(oldParent, newParent, options),\n  );\n\n/**\n * Moves an element to a new position.\n *\n * @param {} [options.to]         The new parent or sibling (depending on\n *                                `options.position`). If not given, the\n *                                element is removed from the DOM.\n * @param {} [options.position]   - append (default): append to `options.to`\n *                                - prepend: prepend to `options.to`\n *                                - before: insert before `options.to`\n *                                - after: insert after `options.to`\n * @param {} [options.ignoreMove] If true, the DOM watcher instances will\n *                                ignore the operation of moving the element\n *                                (so as to not trigger relevant callbacks).\n *\n * @category DOM: Altering\n */\nexport const moveElementNow = (\n  element: Element,\n  options?: {\n    to?: Element;\n    position?: \"append\" | \"prepend\" | \"before\" | \"after\";\n    ignoreMove?: boolean;\n  },\n) => {\n  let parentEl = options?.to || null;\n  const position = options?.position || \"append\";\n  if (position === \"before\" || position === \"after\") {\n    parentEl = MH.parentOf(options?.to);\n  }\n\n  if (options?.ignoreMove === true) {\n    ignoreMove(element, {\n      from: MH.parentOf(element),\n      to: parentEl,\n    });\n  }\n\n  if (options?.to) {\n    options.to[position](element);\n  } else {\n    MH.remove(element);\n  }\n};\n\n/**\n * Like {@link moveElementNow} except it will {@link waitForMutateTime}.\n *\n * @category DOM: Altering (optimized)\n */\nexport const moveElement = async (\n  element: Element,\n  options?: {\n    to?: Element;\n    position?: \"append\" | \"prepend\" | \"before\" | \"after\";\n    ignoreMove?: boolean;\n  },\n) => waitForMutateTime().then(() => moveElementNow(element, options));\n\n/**\n * It will {@link hideElement} and then remove it from the DOM.\n *\n * @param {} [options.ignoreMove]\n *              If true, the DOM watcher instances will ignore the operation of\n *              replacing the element (so as to not trigger relevant callbacks).\n *\n * @category DOM: Altering (optimized)\n */\nexport const hideAndRemoveElement = async (\n  element: Element,\n  delay = 0,\n  options?: {\n    ignoreMove?: boolean;\n  },\n) => {\n  await hideElement(element, delay);\n  moveElementNow(element, options);\n};\n\n/**\n * @ignore\n * @internal\n */\nexport const getOrAssignID = (element: Element, prefix = \"\") => {\n  let domID = element.id;\n  if (!domID) {\n    domID = `${prefix}-${randId()}`;\n    element.id = domID;\n  }\n\n  return domID;\n};\n\n/**\n * @ignore\n * @internal\n */\nexport const wrapScrollingContent = async (element: Element) => {\n  await waitForMutateTime();\n\n  let wrapper: HTMLElement;\n  const firstChild = MH.childrenOf(element)[0];\n  if (\n    MH.lengthOf(MH.childrenOf(element)) === 1 &&\n    MH.isHTMLElement(firstChild) &&\n    hasClass(firstChild, PREFIX_CONTENT_WRAPPER)\n  ) {\n    // Another concurrent call has just wrapped it\n    wrapper = firstChild;\n  } else {\n    wrapper = wrapChildrenNow(element, { ignoreMove: true });\n    addClassesNow(wrapper, PREFIX_CONTENT_WRAPPER);\n  }\n\n  return wrapper;\n};\n\n/**\n * @ignore\n * @internal\n */\nexport const cloneElement = <E extends Element>(element: E) => {\n  const clone = element.cloneNode(true) as E;\n  setBoolData(clone, MH.prefixName(\"clone\"));\n  return clone;\n};\n\n/**\n * Creates a dummy hidden clone that's got animation and transitions disabled\n * and absolute position, wrapped in a wrapper (of size 0) and inserts it just\n * before the `insertBefore` element (or if not given, the original element),\n * so that the hidden clone overlaps the actual element's regular\n * (pre-transformed) position.\n *\n * It clears the ID of the clone.\n *\n * Returns the clone.\n *\n * @ignore\n * @internal\n */\nexport const insertGhostCloneNow = <E extends Element>(\n  element: E,\n  insertBefore: Element | null = null,\n) => {\n  const clone = cloneElement(element);\n  clone.id = \"\";\n\n  addClassesNow(\n    clone,\n    MC.PREFIX_GHOST,\n    MC.PREFIX_TRANSITION_DISABLE,\n    MC.PREFIX_ANIMATE_DISABLE,\n  );\n\n  const wrapper = wrapElementNow(clone);\n  addClassesNow(wrapper, MC.PREFIX_WRAPPER);\n\n  moveElementNow(wrapper, {\n    to: insertBefore || element,\n    position: \"before\",\n    ignoreMove: true,\n  });\n\n  return { _wrapper: wrapper, _clone: clone };\n};\n\n/**\n * @ignore\n * @internal\n *\n * Exposed via DOMWatcher\n */\nexport const insertGhostClone = <E extends Element>(\n  element: E,\n  insertBefore: Element | null = null,\n) => waitForMutateTime().then(() => insertGhostCloneNow(element, insertBefore));\n\n/**\n * @ignore\n * @internal\n *\n * Exposed via DOMWatcher\n */\nexport const ignoreMove = (\n  target: Element,\n  options: { from?: Element | null; to?: Element | null },\n) =>\n  recordsToSkipOnce.set(target, {\n    from: options.from || null,\n    to: options.to || null,\n  });\n\n/**\n * @ignore\n * @internal\n */\nexport const getIgnoreMove = (\n  target: Element,\n): { from: Element | null; to: Element | null } | null =>\n  recordsToSkipOnce.get(target) || null;\n\n/**\n * @ignore\n * @internal\n */\nexport const clearIgnoreMove = (target: Element) => {\n  // We should not clear the entry the first time the operation is observed\n  // (when we return true here), because there may be multiple DOMWatcher\n  // instances that will observe it and need to query it. Instead do it shortly.\n  MH.setTimer(() => {\n    MH.deleteKey(recordsToSkipOnce, target);\n  }, 100);\n};\n\n/**\n * @ignore\n * @internal\n */\nexport const insertArrow = (\n  target: Element,\n  direction: \"up\" | \"down\" | \"left\" | \"right\",\n  position: \"prepend\" | \"append\" | \"before\" | \"after\" = \"append\",\n  tag = \"span\",\n) => {\n  const arrow = MH.createElement(tag);\n  addClassesNow(arrow, MH.prefixName(MC.S_ARROW));\n  setDataNow(arrow, MH.prefixName(\"direction\"), direction);\n  moveElement(arrow, { to: target, position, ignoreMove: true });\n  return arrow;\n};\n\n// ----------------------------------------\n\nconst PREFIX_CONTENT_WRAPPER = MH.prefixName(\"content-wrapper\");\n\nconst recordsToSkipOnce = MH.newMap<\n  /* target being moved */ Element,\n  { from: Element | null; to: Element | null }\n>();\n\nconst createWrapperFor = (\n  element: Element,\n  wrapper: HTMLElement | keyof HTMLElementTagNameMap | undefined,\n) => {\n  if (MH.isElement(wrapper)) {\n    return wrapper;\n  }\n\n  let tag = wrapper;\n  if (!tag) {\n    if (isInlineTag(MH.tagName(element))) {\n      tag = \"span\";\n    } else {\n      tag = \"div\";\n    }\n  }\n\n  return MH.createElement(tag);\n};\n"],"mappings":"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","ignoreList":[]}