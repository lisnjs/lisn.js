{"version":3,"file":"math.cjs","names":["MC","_interopRequireWildcard","require","MH","e","t","WeakMap","r","n","__esModule","o","i","f","__proto__","default","has","get","set","hasOwnProperty","call","Object","defineProperty","getOwnPropertyDescriptor","roundNumTo","value","numDecimal","multiplicationFactor","pow","round","exports","isValidNum","isNumber","NUMBER","isFinite","toNum","defaultValue","numValue","isLiteralString","parseFloat","toInt","floor","toNonNegNum","toPosNum","toNumWithBounds","limits","_limits$min","_limits$max","isDefaultGiven","undefined","min","max","result","_ref","maxAbs","values","map","v","abs","minAbs","havingMaxAbs","lengthOf","sort","a","b","INFINITY","havingMinAbs","hAngle","x","y","normalizeAngle","MATH","atan2","PI","degToRad","radToDeg","areParallel","vA","vB","angleDiffThreshold","angleA","angleB","areAntiParallel","distanceBetween","ptA","ptB","sqrt","quadraticRoots","c","z","easeInOutQuad","sortedKeysByVal","obj","descending","keysOf","keyWithMaxVal","lastOf","keyWithMinVal","firstOf","getBitmask","start","end"],"sources":["../../../src/ts/utils/math.ts"],"sourcesContent":["/**\n * @module Utils\n */\n\nimport * as MC from \"@lisn/globals/minification-constants\";\nimport * as MH from \"@lisn/globals/minification-helpers\";\n\nimport { Point, Vector, AtLeastOne } from \"@lisn/globals/types\";\n\n/**\n * Round a number to the given decimal precision (default is 0).\n *\n * @param {} [numDecimal = 0]\n *\n * @category Math\n */\nexport const roundNumTo = (value: number, numDecimal = 0) => {\n  const multiplicationFactor = MH.pow(10, numDecimal);\n  return MH.round(value * multiplicationFactor) / multiplicationFactor;\n};\n\n/**\n * Returns true if the given value is a valid _finite_ number.\n *\n * @category Validation\n */\nexport const isValidNum = (value: unknown): value is number =>\n  MH.isNumber(value) && MC.NUMBER.isFinite(value);\n\n/**\n * If the given value is a valid _finite_ number, it is returned, otherwise\n * the default is returned.\n *\n * @category Math\n */\nexport const toNum = <D extends number | false | null = 0>(\n  value: unknown,\n  defaultValue: D | 0 = 0,\n): number | D => {\n  const numValue = MH.isLiteralString(value) ? MH.parseFloat(value) : value;\n\n  // parseFloat will strip trailing non-numeric characters, so we check that\n  // the parsed number is equal to the string, if it was a string, using loose\n  // equality, in order to make sure the entire string was a number.\n  return isValidNum(numValue) && numValue == value ? numValue : defaultValue;\n};\n\n/**\n * If the given value is a valid _finite integer_ number, it is returned,\n * otherwise the default is returned.\n *\n * @category Math\n */\nexport const toInt = <D extends number | false | null = 0>(\n  value: unknown,\n  defaultValue: D | 0 = 0,\n): number | D => {\n  let numValue = toNum(value, null);\n  numValue = numValue === null ? numValue : MH.floor(numValue);\n\n  // Ensure that the parsed int equaled the original by loose equality.\n  return isValidNum(numValue) && numValue == value ? numValue : defaultValue;\n};\n\n/**\n * If the given value is a valid non-negative _finite_ number, it is returned,\n * otherwise the default is returned.\n *\n * @category Math\n */\nexport const toNonNegNum = <D extends number | false | null = 0>(\n  value: unknown,\n  defaultValue: D | 0 = 0,\n): number | D => {\n  const numValue = toNum(value, null);\n  return numValue !== null && numValue >= 0 ? numValue : defaultValue;\n};\n\n/**\n * If the given value is a valid positive number, it is returned, otherwise the\n * default is returned.\n *\n * @category Math\n */\nexport const toPosNum = <D extends number | false | null = 0>(\n  value: unknown,\n  defaultValue: D | 0 = 0,\n): number | D => {\n  const numValue = toNum(value, null);\n  return numValue !== null && numValue > 0 ? numValue : defaultValue;\n};\n\n/**\n * Returns the given number bound by min and/or max value.\n *\n * If the value is not a valid number, then `defaultValue` is returned if given\n * (_including if it is null_), otherwise `limits.min` if given and not null,\n * otherwise `limits.max` if given and not null, or finally 0.\n *\n * If the value is outside the bounds, then:\n * - if `defaultValue` is given, `defaultValue` is returned (_including if it\n *   is null_)\n * - otherwise, the min or the max value (whichever one is violated) is\n *   returned\n *\n * @category Math\n */\nexport const toNumWithBounds = <D extends number | false | null = number>(\n  value: unknown,\n  limits: AtLeastOne<{ min: number | null; max: number | null }>,\n  defaultValue?: D,\n): number | D => {\n  const isDefaultGiven = defaultValue !== undefined;\n  const numValue = toNum(value, null);\n  const min = limits?.min ?? null;\n  const max = limits?.max ?? null;\n\n  let result: number | D;\n  if (!isValidNum(numValue)) {\n    result = isDefaultGiven ? defaultValue : (min ?? max ?? 0);\n  } else if (min !== null && numValue < min) {\n    result = isDefaultGiven ? defaultValue : min;\n  } else if (max !== null && numValue > max) {\n    result = isDefaultGiven ? defaultValue : max;\n  } else {\n    result = numValue;\n  }\n\n  return result;\n};\n\n/**\n * Returns the largest absolute value among the given ones.\n *\n * The result is always positive.\n *\n * @category Math\n */\nexport const maxAbs = (...values: number[]) =>\n  MH.max(...values.map((v) => MH.abs(v)));\n\n/**\n * Returns the smallest absolute value among the given ones.\n *\n * The result is always positive.\n *\n * @category Math\n */\nexport const minAbs = (...values: number[]) =>\n  MH.min(...values.map((v) => MH.abs(v)));\n\n/**\n * Returns the value with the largest absolute value among the given ones.\n *\n * The result can be negative.\n *\n * @category Math\n */\nexport const havingMaxAbs = (...values: number[]): number =>\n  MH.lengthOf(values)\n    ? values.sort((a, b) => MH.abs(b) - MH.abs(a))[0]\n    : -MC.INFINITY;\n\n/**\n * Returns the value with the smallest absolute value among the given ones.\n *\n * The result can be negative.\n *\n * @category Math\n */\nexport const havingMinAbs = (...values: number[]) =>\n  MH.lengthOf(values)\n    ? values.sort((a, b) => MH.abs(a) - MH.abs(b))[0]\n    : MC.INFINITY;\n\n/**\n * Returns the angle (in radians) that the vector defined by the given x, y\n * makes with the positive horizontal axis.\n *\n * The angle returned is in the range -PI to PI, not including -PI.\n *\n * @category Math\n */\nexport const hAngle = (x: number, y: number) =>\n  normalizeAngle(MC.MATH.atan2(y, x)); // ensure that -PI is transformed to +PI\n\n/**\n * Normalizes the given angle (in radians) so that it's in the range -PI to PI,\n * not including -PI.\n *\n * @category Math\n */\nexport const normalizeAngle = (a: number) => {\n  // ensure it's positive in the range 0 to 2 PI\n  while (a < 0 || a > MC.PI * 2) {\n    a += (a < 0 ? 1 : -1) * MC.PI * 2;\n  }\n\n  // then, if > PI, offset by - 2PI\n  return a > MC.PI ? a - MC.PI * 2 : a;\n};\n\n/**\n * Converts the given angle in degrees to radians.\n *\n * @category Math\n */\nexport const degToRad = (a: number) => (a * MC.PI) / 180;\n\n/**\n * Converts the given angle in radians to degrees.\n *\n * @category Math\n */\nexport const radToDeg = (a: number) => (a * 180) / MC.PI;\n\n/**\n * Returns true if the given vectors point in the same direction.\n *\n * @param {} angleDiffThreshold\n *                  Sets the threshold in degrees when comparing the angles of\n *                  two vectors. E.g. for 5 degrees threshold, directions\n *                  whose vectors are within 5 degrees of each other are\n *                  considered parallel.\n *                  It doesn't make sense for this value to be < 0 or >= 90\n *                  degrees. If it is, it's forced to be positive (absolute)\n *                  and <= 89.99.\n *\n * @category Math\n */\nexport const areParallel = (vA: Vector, vB: Vector, angleDiffThreshold = 0) => {\n  const angleA = hAngle(vA[0], vA[1]);\n  const angleB = hAngle(vB[0], vB[1]);\n  angleDiffThreshold = MH.min(89.99, MH.abs(angleDiffThreshold));\n\n  return (\n    MH.abs(normalizeAngle(angleA - angleB)) <= degToRad(angleDiffThreshold)\n  );\n};\n\n/**\n * Returns true if the given vectors point in the opposite direction.\n *\n * @param {} angleDiffThreshold\n *                  Sets the threshold in degrees when comparing the angles of\n *                  two vectors. E.g. for 5 degrees threshold, directions\n *                  whose vectors are within 175-185 degrees of each other are\n *                  considered antiparallel.\n *                  It doesn't make sense for this value to be < 0 or >= 90\n *                  degrees. If it is, it's forced to be positive (absolute)\n *                  and <= 89.99.\n *\n * @category Math\n */\nexport const areAntiParallel = (\n  vA: Vector,\n  vB: Vector,\n  angleDiffThreshold = 0,\n) => areParallel(vA, [-vB[0], -vB[1]], angleDiffThreshold);\n\n/**\n * Returns the distance between two points on the screen.\n *\n * @category Math\n */\nexport const distanceBetween = (ptA: Point, ptB: Point) =>\n  MH.sqrt(MH.pow(ptA[0] - ptB[0], 2) + MH.pow(ptA[1] - ptB[1], 2));\n\n/**\n * Returns the two roots of the quadratic equation with coefficients\n * `a`, `b` & `c`, i.e. `a * x^2 + b * x + c = 0`\n *\n * The roots may be `NaN` if the quadratic has no real solutions.\n *\n * @category Math\n */\nexport const quadraticRoots = (a: number, b: number, c: number) => {\n  const z = MH.sqrt(b * b - 4 * a * c);\n  return [(-b + z) / (2 * a), (-b - z) / (2 * a)];\n};\n\n/**\n * Returns the value that an \"easing\" quadratic function would have at the\n * given x (between 0 and 1).\n *\n * @see https://easings.net/#easeInOutQuad\n *\n * @category Math\n */\nexport const easeInOutQuad = (x: number) =>\n  x < 0.5 ? 2 * x * x : 1 - MH.pow(-2 * x + 2, 2) / 2;\n\n/**\n * Returns an array of object's keys sorted by the numeric value they hold.\n *\n * @category Math\n */\nexport const sortedKeysByVal = <T extends Record<string, number>>(\n  obj: T,\n  descending = false,\n): Array<keyof T> => {\n  if (descending) {\n    return MH.keysOf(obj).sort((x: keyof T, y: keyof T) => obj[y] - obj[x]);\n  }\n\n  return MH.keysOf(obj).sort((x: keyof T, y: keyof T) => obj[x] - obj[y]);\n};\n\n/**\n * Returns the key in the given object which holds the largest numeric value.\n *\n * If the object is empty, returns `undefined`.\n *\n * @category Math\n */\nexport const keyWithMaxVal = (\n  obj: Record<string, number>,\n): string | undefined => {\n  return MH.lastOf(sortedKeysByVal(obj));\n};\n\n/**\n * Returns the key in the given object which holds the smallest numeric value.\n *\n * If the object is empty, returns `undefined`.\n *\n * @category Math\n */\nexport const keyWithMinVal = (\n  obj: Record<string, number>,\n): string | undefined => {\n  return MH.firstOf(sortedKeysByVal(obj));\n};\n\n/**\n * Takes two integers and returns a bitmask that covers all values between\n * 1 << start and 1 << end, _including the starting and ending one_.\n *\n * If pStart > pEnd, they are reversed.\n *\n * getBitmask(start, start) always returns 1 << start\n * getBitmask(start, end) always returns same as getBitmask(end, start)\n *\n * @category Math\n */\nexport const getBitmask = (start: number, end: number): number =>\n  start > end\n    ? getBitmask(end, start)\n    : (~0 >>> (32 - end - 1 + start)) << start;\n"],"mappings":"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","ignoreList":[]}