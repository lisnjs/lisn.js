{"version":3,"file":"gesture-watcher.js","names":["_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","_catch","delegateYield","_createForOfIteratorHelper","Array","isArray","_unsupportedIterableToArray","_n","F","_arrayLikeToArray","toString","from","test","asyncGeneratorStep","_asyncToGenerator","arguments","apply","_next","_throw","_classCallCheck","_defineProperties","_toPropertyKey","key","_createClass","_defineProperty","_toPrimitive","toPrimitive","String","Number","MC","MH","addClasses","removeClasses","setNumericStyleProps","isValidDirection","addEventListenerTo","removeEventListenerFrom","preventSelect","undoPreventSelect","getDebouncedHandler","addDeltaZ","isValidInputDevice","isValidIntent","DEVICES","INTENTS","getKeyGestureFragment","getPointerGestureFragment","getTouchGestureFragment","getWheelGestureFragment","logError","maxAbs","toNonNegNum","toPosNum","toNumWithBounds","randId","objToStrKey","validateStrList","wrapCallback","newXWeakMap","debug","GestureWatcher","config","_this","CONSTRUCTOR_KEY","illegalConstructorError","logger","Logger","logAtCreation","allCallbacks","newMap","allListeners","createCallback","target","handler","options","_allCallbacks$get","remove","get","_callback","debug5","_getCallbackAndWrappe","getCallbackAndWrapper","_wrapper","onRemove","deleteHandler","sGet","set","_options","setupOnGesture","_ref","_callee","userOptions","_iterator","_step","_allListeners$get","device","listeners","_callee$","_context","getOptions","_devices","debug4","concat","setupListeners","_nCallbacks","_preventDefault","_nPreventDefault","err","_x","_x2","_x3","deleteKey","prune","_iterator2","_step2","_allListeners$get2","_remove","invokeCallbacks","event","_allListeners$get3","_allCallbacks$get2","preventDefault","isTerminated","_iterator3","_step3","intents","_intents","hasAddedTabIndex","hasPreventedSelect","S_KEY","isElement","getTabIndex","setTabIndex","S_TOUCH","PREFIX_NO_TOUCH_ACTION","includes","S_DRAG","addOrRemoveListeners","action","listener","eventTypes","_iterator4","_step4","eventType","debug8","passive","capture","addInitialListener","initialListener","initiatingEvents","removeInitialListener","addOngoingListener","processEvent","ongoingEvents","removeOngoingListener","unsetTabIndex","trackGesture","element","setGestureCssProps","_iterator5","_step5","intent","totalDeltaX","totalDeltaY","totalDeltaZ","noTrackGesture","_iterator6","_step6","offGesture","onGesture","_allCallbacks$get3","undefined","getConfig","reuse","myConfig","configStrKey","instance","instances","SYMBOL","_config$preventDefaul","_config$naturalTouchS","_config$touchDragHold","_config$touchDragNumF","_debounceWindow","S_DEBOUNCE_WINDOW","_deltaThreshold","deltaThreshold","_angleDiffThreshold","angleDiffThreshold","_naturalTouchScroll","naturalTouchScroll","_touchDragHoldTime","touchDragHoldTime","_touchDragNumFingers","touchDragNumFingers","S_KEYDOWN","pointer","S_POINTERDOWN","S_CLICK","touch","S_TOUCHSTART","wheel","S_WHEEL","S_POINTERUP","S_POINTERMOVE","S_POINTERCANCEL","S_TOUCHEND","S_TOUCHMOVE","S_TOUCHCANCEL","fragmentGetters","S_POINTER","_options$minTotalDelt","_options$maxTotalDelt","_options$minTotalDelt2","_options$maxTotalDelt2","_options$minTotalDelt3","_options$maxTotalDelt3","_options$preventDefau","_options$naturalTouch","_options$touchDragHol","_options$touchDragNum","debounceWindow","devices","_directions","directions","_minTotalDeltaX","minTotalDeltaX","_maxTotalDeltaX","maxTotalDeltaX","_minTotalDeltaY","minTotalDeltaY","_maxTotalDeltaY","maxTotalDeltaY","_minTotalDeltaZ","minTotalDeltaZ","_maxTotalDeltaZ","maxTotalDeltaZ","preventNextClick","reverseScroll","dragHoldTime","dragNumFingers","eventQueue","id","callback","debouncedWrapper","fragment","eventQueueCopy","_eventQueueCopy","_eventQueueCopy$","isRemoved","deltaX","deltaY","deltaZ","round","debug7","debug9","clearEventQueue","newTotalDeltaX","min","max","newTotalDeltaY","newTotalDeltaZ","direction","time","lengthOf","timeStamp","data","S_NONE","wrapper","map","preventDefaultActionFor","setTimer","queue","keepLastEvent","splice","isActualGesture","currentTarget","isPointerDown","S_MOUSEDOWN","buttons","isHTMLElement","focus","preventScroll","S_UNKNOWN","prefix","S_ZOOM","_prefix","_numDecimal"],"sources":["../../../src/ts/watchers/gesture-watcher.ts"],"sourcesContent":["/**\n * @module Watchers/GestureWatcher\n */\n\nimport * as MC from \"@lisn/globals/minification-constants\";\nimport * as MH from \"@lisn/globals/minification-helpers\";\n\nimport {\n  Direction,\n  GestureIntent,\n  GestureDevice,\n  CommaSeparatedStr,\n} from \"@lisn/globals/types\";\n\nimport {\n  addClasses,\n  removeClasses,\n  setNumericStyleProps,\n} from \"@lisn/utils/css-alter\";\nimport { isValidDirection } from \"@lisn/utils/directions\";\nimport {\n  addEventListenerTo,\n  removeEventListenerFrom,\n  preventSelect,\n  undoPreventSelect,\n} from \"@lisn/utils/event\";\nimport { getDebouncedHandler } from \"@lisn/utils/tasks\";\n\nimport { addDeltaZ } from \"@lisn/utils/gesture\";\n\nimport {\n  isValidInputDevice,\n  isValidIntent,\n  GestureFragment,\n  DEVICES,\n  INTENTS,\n} from \"@lisn/utils/gesture\";\nimport { getKeyGestureFragment } from \"@lisn/utils/gesture-key\";\nimport { getPointerGestureFragment } from \"@lisn/utils/gesture-pointer\";\nimport { getTouchGestureFragment } from \"@lisn/utils/gesture-touch\";\nimport { getWheelGestureFragment } from \"@lisn/utils/gesture-wheel\";\nimport { logError } from \"@lisn/utils/log\";\nimport {\n  maxAbs,\n  toNonNegNum,\n  toPosNum,\n  toNumWithBounds,\n} from \"@lisn/utils/math\";\nimport { randId, objToStrKey } from \"@lisn/utils/text\";\nimport { validateStrList } from \"@lisn/utils/validation\";\n\nimport {\n  CallbackHandler,\n  Callback,\n  wrapCallback,\n} from \"@lisn/modules/callback\";\nimport { newXWeakMap } from \"@lisn/modules/x-map\";\n\nimport { LoggerInterface } from \"@lisn/debug/types\";\nimport debug from \"@lisn/debug/debug\";\n\n/**\n * {@link GestureWatcher} listens for user gestures resulting from wheel,\n * pointer, touch or key input events.\n *\n * It supports scroll, zoom or drag type gestures.\n *\n * It manages registered callbacks globally and reuses event listeners for more\n * efficient performance.\n */\nexport class GestureWatcher {\n  /**\n   * Call the given handler whenever the user performs a gesture on the target\n   * matching the given options.\n   *\n   * **IMPORTANT:** The same handler can _not_ be added multiple times for the\n   * same event target, even if the options differ. If the handler has already\n   * been added for this target, either using {@link onGesture} or\n   * {@link trackGesture}, then it will be removed and re-added with the\n   * current options.\n   *\n   * @throws {@link Errors.LisnUsageError | LisnUsageError}\n   *                If the options are invalid.\n   */\n  readonly onGesture: (\n    target: EventTarget,\n    handler: OnGestureHandler,\n    options?: OnGestureOptions,\n  ) => Promise<void>;\n\n  /**\n   * Removes a previously added handler.\n   */\n  readonly offGesture: (target: EventTarget, handler: OnGestureHandler) => void;\n\n  /**\n   * This is the same as {@link onGesture} except that if `handler` is not\n   * given, then it defaults to an internal handler that updates a set of CSS\n   * variables on the target's style:\n   *\n   *   - `--lisn-js--<Intent>-delta-x`\n   *   - `--lisn-js--<Intent>-delta-y`\n   *   - `--lisn-js--<Intent>-delta-z`\n   *\n   * where and `<Intent>` is one of {@link GestureIntent} and the delta X, Y\n   * and Z are the _total summed up_ `deltaX`, `deltaY` and `deltaZ` since the\n   * callback was added, summed over all devices used (key, touch, etc).\n   *\n   * **IMPORTANT:** The same handler can _not_ be added multiple times for the\n   * same target, even if the options differ. If the handler has already been\n   * added for this target, either using {@link trackGesture} or using\n   * {@link onGesture}, then it will be removed and re-added with the current\n   * options.\n   *\n   * @throws {@link Errors.LisnUsageError | LisnUsageError}\n   *                If the options are invalid.\n   */\n  readonly trackGesture: (\n    element: Element,\n    handler?: OnGestureHandler | null,\n    options?: OnGestureOptions,\n  ) => Promise<void>;\n\n  /**\n   * Removes a previously added handler for {@link trackGesture}.\n   */\n  readonly noTrackGesture: (\n    element: Element,\n    handler?: OnGestureHandler | null,\n  ) => void;\n\n  /**\n   * Creates a new instance of GestureWatcher with the given\n   * {@link GestureWatcherConfig}. It does not save it for future reuse.\n   */\n  static create(config: GestureWatcherConfig = {}) {\n    return new GestureWatcher(getConfig(config), CONSTRUCTOR_KEY);\n  }\n\n  /**\n   * Returns an existing instance of GestureWatcher with the given\n   * {@link GestureWatcherConfig}, or creates a new one.\n   *\n   * **NOTE:** It saves it for future reuse, so don't use this for temporary\n   * short-lived watchers.\n   */\n  static reuse(config: GestureWatcherConfig = {}) {\n    const myConfig = getConfig(config);\n    const configStrKey = objToStrKey(myConfig);\n\n    let instance = instances.get(configStrKey);\n    if (!instance) {\n      instance = new GestureWatcher(myConfig, CONSTRUCTOR_KEY);\n      instances.set(configStrKey, instance);\n    }\n\n    return instance;\n  }\n\n  private constructor(\n    config: GestureWatcherConfigInternal,\n    key: typeof CONSTRUCTOR_KEY,\n  ) {\n    if (key !== CONSTRUCTOR_KEY) {\n      throw MH.illegalConstructorError(\"GestureWatcher.create\");\n    }\n\n    const logger = debug\n      ? new debug.Logger({ name: \"GestureWatcher\", logAtCreation: config })\n      : null;\n\n    const allCallbacks = newXWeakMap<\n      EventTarget,\n      Map<\n        OnGestureHandler,\n        {\n          _callback: OnGestureCallback;\n          _wrapper: OnGestureHandlerWrapper;\n          _options: OnGestureOptionsInternal;\n        }\n      >\n    >(() => MH.newMap());\n\n    // For each target and event type, add only 1 global listener that will then\n    // manage the event queues and callbacks.\n    const allListeners = newXWeakMap<\n      EventTarget,\n      Map<GestureDevice, DeviceListeners>\n    >(() => MH.newMap());\n\n    // ----------\n\n    const createCallback = (\n      target: EventTarget,\n      handler: OnGestureHandler,\n      options: OnGestureOptionsInternal,\n    ): OnGestureCallback => {\n      MH.remove(allCallbacks.get(target)?.get(handler)?._callback);\n\n      debug: logger?.debug5(\"Adding/updating handler for\", options);\n      const { _callback, _wrapper } = getCallbackAndWrapper(\n        handler,\n        options,\n        logger,\n      );\n\n      _callback.onRemove(() => deleteHandler(target, handler, options));\n\n      allCallbacks.sGet(target).set(handler, {\n        _callback,\n        _wrapper,\n        _options: options,\n      });\n\n      return _callback;\n    };\n\n    // ----------\n\n    // async for consistency with other watchers and future compatibility in\n    // case of change needed\n    const setupOnGesture = async (\n      target: EventTarget,\n      handler: OnGestureHandler,\n      userOptions: OnGestureOptions | undefined,\n    ) => {\n      const options = getOptions(config, userOptions || {});\n      createCallback(target, handler, options);\n\n      for (const device of options._devices || DEVICES) {\n        let listeners = allListeners.get(target)?.get(device);\n        if (listeners) {\n          debug: logger?.debug4(\n            `Listeners already added for ${device}`,\n            target,\n            options,\n          );\n        } else {\n          debug: logger?.debug4(\n            `Adding listeners for ${device}`,\n            target,\n            options,\n          );\n\n          listeners = setupListeners(target, device, options);\n          allListeners.sGet(target).set(device, listeners);\n        }\n\n        listeners._nCallbacks++;\n        if (options._preventDefault) {\n          listeners._nPreventDefault++;\n        }\n      }\n    };\n\n    // ----------\n\n    const deleteHandler = (\n      target: EventTarget,\n      handler: OnGestureHandler,\n      options: OnGestureOptionsInternal,\n    ) => {\n      MH.deleteKey(allCallbacks.get(target), handler);\n      allCallbacks.prune(target);\n\n      for (const device of options._devices || DEVICES) {\n        const listeners = allListeners.get(target)?.get(device);\n        if (listeners) {\n          listeners._nCallbacks--;\n          if (options._preventDefault) {\n            listeners._nPreventDefault--;\n          }\n\n          if (!listeners._nCallbacks) {\n            debug: logger?.debug4(\n              `No more callbacks for target and device ${device}; removing listeners`,\n              target,\n            );\n\n            MH.deleteKey(allListeners.get(target), device);\n            listeners._remove();\n          }\n        }\n      }\n    };\n\n    // ----------\n\n    const invokeCallbacks = (\n      target: EventTarget,\n      device: GestureDevice,\n      event: Event,\n    ): boolean /* true if terminated */ => {\n      const preventDefault =\n        (allListeners.get(target)?.get(device)?._nPreventDefault || 0) > 0;\n\n      let isTerminated = false;\n      for (const { _wrapper } of allCallbacks.get(target)?.values() || []) {\n        isTerminated =\n          _wrapper(target, device, event, preventDefault) || isTerminated;\n      }\n\n      return isTerminated;\n    };\n\n    // ----------\n\n    const setupListeners = (\n      target: EventTarget,\n      device: GestureDevice,\n      options: OnGestureOptionsInternal,\n    ): DeviceListeners => {\n      const intents = options._intents;\n      let hasAddedTabIndex = false;\n      let hasPreventedSelect = false;\n\n      if (\n        device === MC.S_KEY &&\n        MH.isElement(target) &&\n        !MH.getTabIndex(target)\n      ) {\n        hasAddedTabIndex = true;\n        // enable element to receive keydown events\n        MH.setTabIndex(target);\n      } else if (MH.isElement(target) && device === MC.S_TOUCH) {\n        if (options._preventDefault) {\n          addClasses(target, MC.PREFIX_NO_TOUCH_ACTION);\n        }\n\n        if (!intents || MH.includes(intents, MC.S_DRAG)) {\n          hasPreventedSelect = true;\n          preventSelect(target);\n        }\n      }\n\n      const addOrRemoveListeners = (\n        action: \"add\" | \"remove\",\n        listener: EventListener,\n        eventTypes: readonly (keyof GlobalEventHandlersEventMap)[],\n      ) => {\n        const method =\n          action === \"add\" ? addEventListenerTo : removeEventListenerFrom;\n        for (const eventType of eventTypes) {\n          debug: logger?.debug8(`${action} listener for ${eventType}`, target);\n          method(target, eventType, listener, {\n            passive: false,\n            capture: true,\n          });\n        }\n      };\n\n      const addInitialListener = () =>\n        addOrRemoveListeners(\"add\", initialListener, initiatingEvents[device]);\n\n      const removeInitialListener = () =>\n        addOrRemoveListeners(\n          \"remove\",\n          initialListener,\n          initiatingEvents[device],\n        );\n\n      const addOngoingListener = () =>\n        addOrRemoveListeners(\"add\", processEvent, ongoingEvents[device]);\n\n      const removeOngoingListener = () =>\n        addOrRemoveListeners(\"remove\", processEvent, ongoingEvents[device]);\n\n      const initialListener = (event: Event) => {\n        processEvent(event);\n        removeInitialListener();\n        addOngoingListener();\n      };\n\n      const processEvent = (event: Event) => {\n        const isTerminated = invokeCallbacks(target, device, event);\n        if (isTerminated) {\n          removeOngoingListener();\n          addInitialListener();\n        }\n      };\n\n      addInitialListener();\n\n      return {\n        _nCallbacks: 0,\n        _nPreventDefault: 0,\n        _remove: () => {\n          if (MH.isElement(target)) {\n            if (hasAddedTabIndex) {\n              MH.unsetTabIndex(target);\n            }\n\n            removeClasses(target, MC.PREFIX_NO_TOUCH_ACTION);\n\n            if (hasPreventedSelect) {\n              undoPreventSelect(target);\n            }\n          }\n\n          removeOngoingListener();\n          removeInitialListener();\n        },\n      };\n    };\n\n    // ----------\n\n    this.trackGesture = (element, handler?, options?) => {\n      if (!handler) {\n        handler = setGestureCssProps;\n        // initial values\n        for (const intent of INTENTS) {\n          setGestureCssProps(element, {\n            intent,\n            totalDeltaX: 0,\n            totalDeltaY: 0,\n            totalDeltaZ: 1,\n          });\n        }\n      }\n\n      return setupOnGesture(element, handler, options);\n    };\n\n    // ----------\n\n    this.noTrackGesture = (element, handler?) => {\n      if (!handler) {\n        handler = setGestureCssProps;\n\n        // delete the properties\n        for (const intent of INTENTS) {\n          setGestureCssProps(element, { intent });\n        }\n      }\n\n      this.offGesture(element, handler);\n    };\n\n    // ----------\n\n    this.onGesture = setupOnGesture;\n\n    // ----------\n\n    this.offGesture = (target, handler) => {\n      debug: logger?.debug5(\"Removing handler\");\n      MH.remove(allCallbacks.get(target)?.get(handler)?._callback);\n    };\n  }\n}\n\n/**\n * @interface\n */\nexport type GestureWatcherConfig = {\n  /**\n   * The default value for\n   * {@link OnGestureOptions.preventDefault | preventDefault} in calls to\n   * {@link GestureWatcher.onGesture}.\n   *\n   * @defaultValue true\n   */\n  preventDefault?: boolean;\n\n  /**\n   * The default value for\n   * {@link OnGestureOptions.debounceWindow | debounceWindow} in calls to\n   * {@link GestureWatcher.onGesture}.\n   *\n   * @defaultValue 150\n   */\n  debounceWindow?: number;\n\n  /**\n   * The default value for\n   * {@link OnGestureOptions.deltaThreshold | deltaThreshold} in calls to\n   * {@link GestureWatcher.onGesture}.\n   *\n   * @defaultValue 5\n   */\n  deltaThreshold?: number;\n\n  /**\n   * The default value for\n   * {@link OnGestureOptions.angleDiffThreshold | angleDiffThreshold} in calls to\n   * {@link GestureWatcher.onGesture}.\n   *\n   * It does not make much sense to set this to 0.\n   *\n   * The value is in _degrees_, not radians.\n   *\n   * @defaultValue 35\n   */\n  angleDiffThreshold?: number;\n\n  /**\n   * The default value for\n   * {@link OnGestureOptions.naturalTouchScroll | naturalTouchScroll} in calls to\n   * {@link GestureWatcher.onGesture}.\n   *\n   * @defaultValue true\n   */\n  naturalTouchScroll?: boolean;\n\n  /**\n   * The default value for\n   * {@link OnGestureOptions.touchDragHoldTime | touchDragHoldTime} in calls to\n   * {@link GestureWatcher.onGesture}.\n   *\n   * @defaultValue 500\n   */\n  touchDragHoldTime?: number;\n\n  /**\n   * The default value for\n   * {@link OnGestureOptions.touchDragNumFingers | touchDragNumFingers} in calls to\n   * {@link GestureWatcher.onGesture}.\n   *\n   * @defaultValue 1\n   */\n  touchDragNumFingers?: number;\n};\n\n/**\n * @interface\n */\nexport type OnGestureOptions = {\n  /**\n   * One or more device types to listen for. If not specified, then all devices\n   * are enabled.\n   *\n   * It can be a comma-separated list of {@link GestureDevice}s or an array of\n   * such devices.\n   *\n   * @defaultValue undefined\n   */\n  devices?: CommaSeparatedStr<GestureDevice> | GestureDevice[];\n\n  /**\n   * If given, callback will only be called if the gesture's direction is one\n   * of the given ones.\n   *\n   * It can be a comma-separated list of {@link Direction}s or an array of such\n   * directions.\n   *\n   * @defaultValue undefined\n   */\n  directions?: CommaSeparatedStr<Direction> | Direction[];\n\n  /**\n   * If given, callback will only be called if the gesture's intent is one\n   * of the given ones.\n   *\n   * It can be a comma-separated list of {@link GestureIntent}s or an\n   * array of such intents.\n   *\n   * @defaultValue undefined\n   */\n  intents?: CommaSeparatedStr<GestureIntent> | GestureIntent[];\n\n  /**\n   * Set minimum total delta X. Further reductions in delta X below this value\n   * will be ignored.\n   *\n   * The value is in pixels and can be negative.\n   *\n   * @defaultValue undefined\n   */\n  minTotalDeltaX?: number;\n\n  /**\n   * Set maximum total delta X. Further increase in delta X above this value\n   * will be ignored.\n   *\n   * The value is in pixels.\n   *\n   * @defaultValue undefined\n   */\n  maxTotalDeltaX?: number;\n\n  /**\n   * Set minimum total delta Y. Further reductions in delta Y below this value\n   * will be ignored.\n   *\n   * The value is in pixels and can be negative.\n   *\n   * @defaultValue undefined\n   */\n  minTotalDeltaY?: number;\n\n  /**\n   * Set maximum total delta Y. Further increase in delta Y above this value\n   * will be ignored.\n   *\n   * The value is in pixels.\n   *\n   * @defaultValue undefined\n   */\n  maxTotalDeltaY?: number;\n\n  /**\n   * Set minimum total delta Z. Further reductions in delta Z below this value\n   * will be ignored.\n   *\n   * The value is in percentage zoom, relative to 1, and can be less than 1 but\n   * must be > 0.1 which is a hard minimum.\n   *\n   * @defaultValue undefined\n   */\n  minTotalDeltaZ?: number;\n\n  /**\n   * Set maximum total delta Z. Further increase in delta Z above this value\n   * will be ignored.\n   *\n   * The value is in percentage zoom, relative to 1, and must be positive.\n   *\n   * @defaultValue undefined\n   */\n  maxTotalDeltaZ?: number;\n\n  /**\n   * If true, the events of the gesture, e.g. relevant key presses or touch\n   * moves, etc, will have their default action prevented.\n   *\n   * **IMPORTANT:** For pointer gestures, then pointer/mouse down and click\n   * will be prevented.\n   *\n   * @defaultValue {@link GestureWatcherConfig.preventDefault}\n   */\n  preventDefault?: boolean;\n\n  /**\n   * If given, callback will be called at most once every `debounceWindow`\n   * milliseconds.\n   *\n   * Note that if both `debounceWindow` and `deltaThreshold` are set, _both_\n   * must be exceeded before callback is called.\n   *\n   * @defaultValue {@link GestureWatcherConfig.debounceWindow}\n   */\n  debounceWindow?: number;\n\n  /**\n   * Callback will only be called when the gesture's accumulated delta, since\n   * the last time callback was called, exceeds `deltaThreshold`.\n   *\n   * At least one of the three deltas (X, Y or Z) must exceed this number (in\n   * absolute value). Note that when comparing `deltaZ`, it is multiplied by\n   * 100 since it represents fractions of 1 (100%). So supplying\n   * `deltaThreshold` of 10 means is equivalent to the following condition:\n   *\n   * ```\n   * abs(deltaX) >= 10 || abs(deltaY) >= 10 ||  abs(1 - deltaZ) >= 0.1\n   * ```\n   *\n   * Accumulation of the delta ends if the gesture is terminated, for example,\n   * in case of touch gestures, by a \"touchcancel\" event of by the final finger\n   * lifting off..\n   *\n   * Note that if both `debounceWindow` and `deltaThreshold` are set, _both_\n   * must be exceeded before callback is called.\n   *\n   * @defaultValue {@link GestureWatcherConfig.deltaThreshold}\n   */\n  deltaThreshold?: number;\n\n  /**\n   * See {@link Utils.getVectorDirection | getVectorDirection}.\n   *\n   * @defaultValue {@link GestureWatcherConfig.angleDiffThreshold}\n   */\n  angleDiffThreshold?: number;\n\n  /**\n   * Whether touch scroll gestures follow the natural direction: swipe up\n   * with scroll intent results in direction down and swipe down results in\n   * direction up.\n   *\n   * @defaultValue {@link GestureWatcherConfig.naturalTouchScroll}\n   */\n  naturalTouchScroll?: boolean;\n\n  /**\n   * If the user presses and holds on a touchscreen for at least the given\n   * amount of milliseconds before moving the finger(s), touch gestures other\n   * than pinch will be treated as a drag intent instead of scroll as long as\n   * the number of fingers touching the screen is {@link touchDragNumFingers}.\n   *\n   * Set to 0 in order to treat _all_ non-pinch touch gestures as drag.\n   *\n   * Set to a negative number in order to treat _all_ non-pinch touch gestures\n   * as scroll.\n   *\n   * @defaultValue {@link GestureWatcherConfig.touchDragHoldTime}\n   */\n  touchDragHoldTime?: number;\n\n  /**\n   * The number of fingers that could be considered a drag intent for touch\n   * gestures.\n   *\n   * @defaultValue {@link GestureWatcherConfig.touchDragHoldTime}\n   */\n  touchDragNumFingers?: number;\n};\n\n/**\n * The handler is invoked with two arguments:\n *\n * - the event target that was passed to the {@link GestureWatcher.onGesture}\n *   call (equivalent to\n *   {@link https://developer.mozilla.org/en-US/docs/Web/API/Event/currentTarget | Event:currentTarget}).\n * - the {@link GestureData} that describes the gesture's progression since the\n *   last time the callback was called and since the callback was added.\n */\nexport type OnGestureHandlerArgs = [EventTarget, GestureData, Event[]];\nexport type OnGestureCallback = Callback<OnGestureHandlerArgs>;\nexport type OnGestureHandler =\n  | CallbackHandler<OnGestureHandlerArgs>\n  | OnGestureCallback;\n\nexport type GestureData = {\n  device: GestureDevice;\n  direction: Direction;\n  intent: GestureIntent;\n\n  /**\n   * Delta in the horizontal direction since the start of the gesture.\n   */\n  deltaX: number;\n\n  /**\n   * Delta in the vertical direction since the start of the gesture.\n   */\n  deltaY: number;\n\n  /**\n   * Relative fractional zoom in or out for zoom intents since the start of\n   * the gesture.\n   *\n   * For zoom in, `deltaZ` is always > 1, and for zoom out it is < 1.\n   *\n   * For non-zoom gestures it is 1.\n   */\n  deltaZ: number;\n\n  /**\n   * The time in milliseconds it took for the gesture. This will be the\n   * difference in timestamps between the first and last event that composed\n   * the gesture. For key and wheel gestures this could be 0, since 1 event is\n   * sufficient for them.\n   */\n  time: number;\n\n  /**\n   * Delta in the horizontal direction since the callback was added.\n   */\n  totalDeltaX: number;\n\n  /**\n   * Delta in the vertical direction since the callback was added.\n   */\n  totalDeltaY: number;\n\n  /**\n   * Percentage (relative) zoom in or out for zoom intents since the callback\n   * was added.\n   */\n  totalDeltaZ: number;\n};\n\n// ----------------------------------------\n\ntype GestureWatcherConfigInternal = {\n  _preventDefault: boolean;\n  _debounceWindow: number;\n  _deltaThreshold: number;\n  _angleDiffThreshold: number;\n  _naturalTouchScroll: boolean;\n  _touchDragHoldTime: number;\n  _touchDragNumFingers: number;\n};\n\ntype OnGestureOptionsInternal = {\n  _devices: GestureDevice[] | null;\n  _directions: Direction[] | null;\n  _intents: GestureIntent[] | null;\n  _minTotalDeltaX: number | null;\n  _maxTotalDeltaX: number | null;\n  _minTotalDeltaY: number | null;\n  _maxTotalDeltaY: number | null;\n  _minTotalDeltaZ: number | null;\n  _maxTotalDeltaZ: number | null;\n  _preventDefault: boolean;\n  _debounceWindow: number;\n  _deltaThreshold: number;\n  _angleDiffThreshold: number;\n  _naturalTouchScroll: boolean;\n  _touchDragHoldTime: number;\n  _touchDragNumFingers: number;\n};\n\ntype OnGestureHandlerWrapper = (\n  _target: EventTarget,\n  _device: GestureDevice,\n  _event: Event,\n  _preventDefault: boolean,\n) => boolean;\n\n// Specific to a combination of target + device\ntype DeviceListeners = {\n  _nCallbacks: number; // total number of callbacks\n  _nPreventDefault: number; // total number wanting to prevent default action\n  _remove: () => void;\n};\n\nconst CONSTRUCTOR_KEY: unique symbol = MC.SYMBOL() as typeof CONSTRUCTOR_KEY;\nconst instances = MH.newMap<string, GestureWatcher>();\n\nconst getConfig = (\n  config: GestureWatcherConfig,\n): GestureWatcherConfigInternal => {\n  return {\n    _preventDefault: config.preventDefault ?? true,\n    _debounceWindow: toNonNegNum(config[MC.S_DEBOUNCE_WINDOW], 150),\n    _deltaThreshold: toNonNegNum(config.deltaThreshold, 5),\n    _angleDiffThreshold: toPosNum(config.angleDiffThreshold, 35),\n    _naturalTouchScroll: config.naturalTouchScroll ?? true,\n    _touchDragHoldTime: config.touchDragHoldTime ?? 500,\n    _touchDragNumFingers: config.touchDragNumFingers ?? 1,\n  };\n};\n\nconst initiatingEvents: {\n  [D in GestureDevice]: readonly (keyof GlobalEventHandlersEventMap)[];\n} = {\n  key: [MC.S_KEYDOWN],\n  // If the browser doesn't support pointer events, then\n  // addEventListenerTo will transform it into mousedown\n  //\n  // We need to listen for click, since that occurs after a pointerup (i.e.\n  // after a gesure is terminated and the ongoing listeners removed), but it\n  // needs to have its default action prevented.\n  pointer: [MC.S_POINTERDOWN, MC.S_CLICK],\n  touch: [MC.S_TOUCHSTART],\n  wheel: [MC.S_WHEEL],\n} as const;\n\nconst ongoingEvents: {\n  [D in GestureDevice]: readonly (keyof GlobalEventHandlersEventMap)[];\n} = {\n  key: [MC.S_KEYDOWN],\n  pointer: [\n    // If the browser doesn't support point events, then\n    // addEventListenerTo will transform them into mouse*\n    MC.S_POINTERDOWN,\n    MC.S_POINTERUP, // would terminate\n    MC.S_POINTERMOVE,\n    MC.S_POINTERCANCEL, // would terminate\n    MC.S_CLICK, // would terminate; can be default-prevented\n  ],\n  touch: [MC.S_TOUCHSTART, MC.S_TOUCHEND, MC.S_TOUCHMOVE, MC.S_TOUCHCANCEL],\n  wheel: [MC.S_WHEEL],\n} as const;\n\nconst fragmentGetters: {\n  [D in GestureDevice]: (\n    events: Event[],\n    options: {\n      deltaThreshold?: number;\n      angleDiffThreshold?: number;\n      reverseScroll?: boolean;\n      dragHoldTime?: number;\n      dragNumFingers?: number;\n    },\n  ) => GestureFragment | null | false;\n} = {\n  [MC.S_KEY]: getKeyGestureFragment,\n  [MC.S_POINTER]: getPointerGestureFragment,\n  [MC.S_TOUCH]: getTouchGestureFragment,\n  [MC.S_WHEEL]: getWheelGestureFragment,\n};\n\nconst getOptions = (\n  config: GestureWatcherConfigInternal,\n  options: OnGestureOptions,\n): OnGestureOptionsInternal => {\n  const debounceWindow = toNonNegNum(\n    options[MC.S_DEBOUNCE_WINDOW],\n    config._debounceWindow, // watcher is never debounced, so apply default here\n  );\n  const deltaThreshold = toNonNegNum(\n    options.deltaThreshold,\n    config._deltaThreshold,\n  );\n\n  return {\n    _devices:\n      validateStrList(\"devices\", options.devices, isValidInputDevice) || null,\n    _directions:\n      validateStrList(\"directions\", options.directions, isValidDirection) ||\n      null,\n    _intents:\n      validateStrList(\"intents\", options.intents, isValidIntent) || null,\n    _minTotalDeltaX: options.minTotalDeltaX ?? null,\n    _maxTotalDeltaX: options.maxTotalDeltaX ?? null,\n    _minTotalDeltaY: options.minTotalDeltaY ?? null,\n    _maxTotalDeltaY: options.maxTotalDeltaY ?? null,\n    _minTotalDeltaZ: options.minTotalDeltaZ ?? null,\n    _maxTotalDeltaZ: options.maxTotalDeltaZ ?? null,\n    _preventDefault: options.preventDefault ?? config._preventDefault,\n    _debounceWindow: debounceWindow,\n    _deltaThreshold: deltaThreshold,\n    _angleDiffThreshold: toNonNegNum(\n      options.angleDiffThreshold,\n      config._angleDiffThreshold,\n    ),\n    _naturalTouchScroll:\n      options.naturalTouchScroll ?? config._naturalTouchScroll,\n    _touchDragHoldTime: options.touchDragHoldTime ?? config._touchDragHoldTime,\n    _touchDragNumFingers:\n      options.touchDragNumFingers ?? config._touchDragNumFingers,\n  };\n};\n\n// Since each callback needs to accumulate events during its debounce window\n// and until its threshold is exceeded, we use a wrapper around the\n// user-supplied handler to do that.\nconst getCallbackAndWrapper = (\n  handler: OnGestureHandler,\n  options: OnGestureOptionsInternal,\n  logger: LoggerInterface | null,\n): { _callback: OnGestureCallback; _wrapper: OnGestureHandlerWrapper } => {\n  let totalDeltaX = 0,\n    totalDeltaY = 0,\n    totalDeltaZ = 1;\n  // When there's a pointer down, drag then pointerup, since we prevent\n  // pointerdown default action, this results in a click event shortly\n  // afterwards even when there's been a movement of the mouse. We detect that\n  // and prevent this click.\n  let preventNextClick = false;\n\n  const directions = options._directions;\n  const intents = options._intents;\n  const minTotalDeltaX = options._minTotalDeltaX;\n  const maxTotalDeltaX = options._maxTotalDeltaX;\n  const minTotalDeltaY = options._minTotalDeltaY;\n  const maxTotalDeltaY = options._maxTotalDeltaY;\n  const minTotalDeltaZ = options._minTotalDeltaZ;\n  const maxTotalDeltaZ = options._maxTotalDeltaZ;\n  const deltaThreshold = options._deltaThreshold;\n  const angleDiffThreshold = options._angleDiffThreshold;\n  const reverseScroll = !options._naturalTouchScroll;\n  const dragHoldTime = options._touchDragHoldTime;\n  const dragNumFingers = options._touchDragNumFingers;\n\n  // The event queue is cleared when the threshold is exceeded AND the debounce\n  // window has passed. It's not necessary for the actual handler to be called\n  // then (e.g. if the direction or intent doesn't match, it won't be).\n  const eventQueue: Event[] = [];\n  const id = randId();\n\n  // Since handler could be a function or a callback (not callable), we wrap it\n  // so that in case it's already a callback, its removal will result in\n  // deleteHandler getting called. It is not debounced itself, instead there's\n  // a debounced wrapper that invokes it.\n  const callback = wrapCallback(handler);\n\n  // The debounced callback wrapper is what is debounced.\n  // It accumulates total deltas and checks if the conditions (of threshold,\n  // direction and intent) are satisfied before calling the real handler.\n  //\n  // Most importantly, since it is only called when the debounce window has\n  // expired it can clear the event queue if the threshold is also exceeded.\n  const debouncedWrapper = getDebouncedHandler(\n    options._debounceWindow,\n    (\n      target: EventTarget,\n      fragment: GestureFragment,\n      eventQueueCopy: Event[],\n    ) => {\n      if (callback.isRemoved()) {\n        return;\n      }\n\n      const deltaX = fragment.deltaX;\n      const deltaY = fragment.deltaY;\n      const deltaZ = fragment.deltaZ;\n      const device = fragment.device;\n\n      if (\n        MH.round(maxAbs(deltaX, deltaY, (1 - deltaZ) * 100)) < deltaThreshold\n      ) {\n        debug: logger?.debug7(\n          `[${id}] Delta threshold not exceeded for callback`,\n        );\n        return;\n      }\n\n      debug: logger?.debug9(`[${id}] Done summing events for ${device}`);\n      clearEventQueue(device, eventQueue);\n\n      const newTotalDeltaX = toNumWithBounds(totalDeltaX + deltaX, {\n        min: minTotalDeltaX,\n        max: maxTotalDeltaX,\n      });\n\n      const newTotalDeltaY = toNumWithBounds(totalDeltaY + deltaY, {\n        min: minTotalDeltaY,\n        max: maxTotalDeltaY,\n      });\n\n      const newTotalDeltaZ = toNumWithBounds(addDeltaZ(totalDeltaZ, deltaZ), {\n        min: minTotalDeltaZ,\n        max: maxTotalDeltaZ,\n      });\n\n      if (\n        newTotalDeltaX === totalDeltaX &&\n        newTotalDeltaY === totalDeltaY &&\n        newTotalDeltaZ === totalDeltaZ\n      ) {\n        return;\n      }\n\n      totalDeltaX = newTotalDeltaX;\n      totalDeltaY = newTotalDeltaY;\n      totalDeltaZ = newTotalDeltaZ;\n\n      const direction = fragment.direction;\n      const intent = fragment.intent;\n      const time =\n        eventQueueCopy[MH.lengthOf(eventQueueCopy) - 1]?.timeStamp -\n          eventQueueCopy[0]?.timeStamp || 0;\n\n      const data = {\n        device,\n        direction,\n        intent,\n        deltaX,\n        deltaY,\n        deltaZ,\n        time,\n        totalDeltaX,\n        totalDeltaY,\n        totalDeltaZ,\n      };\n\n      if (\n        direction !== MC.S_NONE &&\n        (!directions || MH.includes(directions, direction)) &&\n        (!intents || MH.includes(intents, intent))\n      ) {\n        callback.invoke(target, data, eventQueueCopy).catch(logError);\n      } else {\n        debug: logger?.debug7(\n          `[${id}] Directions or intents not matching for callback`,\n        );\n      }\n    },\n  );\n\n  // This wrapper is NOT debounced and adds the events to the queue, prevents\n  // default action if needed, and indicates whether the gesture is terminated.\n  const wrapper = (\n    target: EventTarget,\n    device: GestureDevice,\n    event: Event,\n    preventDefault: boolean,\n  ) => {\n    eventQueue.push(event);\n\n    const fragment = fragmentGetters[device](eventQueue, {\n      angleDiffThreshold,\n      deltaThreshold,\n      reverseScroll,\n      dragHoldTime,\n      dragNumFingers,\n    });\n\n    debug: logger?.debug8(\n      `[${id}] Got fragment for ${device} (${event.type})`,\n      fragment,\n      [...eventQueue].map((e) => e.type),\n    );\n\n    if (preventDefault) {\n      preventDefaultActionFor(\n        event,\n        !!fragment || (event.type === MC.S_CLICK && preventNextClick),\n      );\n    }\n\n    if (fragment === false) {\n      // not enough events in the queue, pass\n      debug: logger?.debug9(`[${id}] Not enough events for gesture ${device}`);\n      return false;\n    } else if (fragment === null) {\n      // consider the gesture terminated\n      clearEventQueue(device, eventQueue);\n      debug: logger?.debug9(`[${id}] Gesture for ${device} terminated`);\n      return true;\n    }\n\n    if (device === MC.S_POINTER) {\n      // If we're here, there's been a drag, expect a click immediately\n      // afterwards and prevent default action.\n      preventNextClick = true;\n      MH.setTimer(() => {\n        preventNextClick = false;\n      }, 10);\n    }\n\n    debouncedWrapper(\n      target,\n      fragment,\n      [...eventQueue], // copy\n    );\n\n    return false;\n  };\n\n  return { _callback: callback, _wrapper: wrapper };\n};\n\nconst clearEventQueue = (device: GestureDevice, queue: Event[]) => {\n  const keepLastEvent = device === MC.S_POINTER || device === MC.S_TOUCH;\n  queue.splice(0, MH.lengthOf(queue) - (keepLastEvent ? 1 : 0));\n};\n\nconst preventDefaultActionFor = (event: Event, isActualGesture: boolean) => {\n  const target = event.currentTarget;\n  const eventType = event.type;\n  const isPointerDown =\n    eventType === MC.S_POINTERDOWN || eventType === MC.S_MOUSEDOWN;\n\n  if (\n    eventType === MC.S_TOUCHMOVE ||\n    eventType === MC.S_WHEEL ||\n    ((eventType === MC.S_CLICK || eventType === MC.S_KEYDOWN) &&\n      isActualGesture) ||\n    (isPointerDown && (event as MouseEvent).buttons === 1)\n  ) {\n    MH.preventDefault(event);\n\n    if (isPointerDown && MH.isHTMLElement(target)) {\n      // Otherwise capturing key events won't work\n      target.focus({ preventScroll: true });\n    }\n  }\n};\n\nconst setGestureCssProps = (\n  target: EventTarget,\n  data: Partial<GestureData>,\n) => {\n  const intent = data.intent;\n\n  if (!MH.isElement(target) || !intent || intent === MC.S_UNKNOWN) {\n    return;\n  }\n\n  const prefix = `${intent}-`;\n\n  if (intent === MC.S_ZOOM) {\n    setNumericStyleProps(\n      target,\n      {\n        deltaZ: data.totalDeltaZ,\n      },\n      {\n        _prefix: prefix,\n        _numDecimal: 2,\n      },\n    ); // don't await here\n  } else {\n    setNumericStyleProps(\n      target,\n      {\n        deltaX: data.totalDeltaX,\n        deltaY: data.totalDeltaY,\n      },\n      {\n        _prefix: prefix,\n      },\n    ); // don't await here\n  }\n};\n"],"mappings":"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","ignoreList":[]}