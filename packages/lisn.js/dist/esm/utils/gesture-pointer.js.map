{"version":3,"file":"gesture-pointer.js","names":["MC","MH","getVectorDirection","getBrowserSupport","getPointerGestureFragment","events","options","isIterableObject","isCancelled","supports","pointerEventClass","_pointer","PointerEvent","MouseEvent","pointerUpType","S_POINTERUP","S_MOUSEUP","filteredEvents","filter","event","eType","type","S_POINTERCANCEL","S_CLICK","isInstanceOf","buttons","isTouchPointerEvent","numEvents","lengthOf","firstEvent","lastEvent","getPointerType","deltaX","clientX","deltaY","clientY","direction","angleDiffThreshold","S_NONE","device","S_POINTER","intent","S_DRAG","deltaZ"],"sources":["../../../src/ts/utils/gesture-pointer.ts"],"sourcesContent":["/**\n * @module Utils\n */\n\nimport * as MC from \"@lisn/globals/minification-constants\";\nimport * as MH from \"@lisn/globals/minification-helpers\";\n\nimport { getVectorDirection } from \"@lisn/utils/directions\";\nimport { getBrowserSupport } from \"@lisn/utils/event\";\nimport { GestureFragment } from \"@lisn/utils/gesture\";\n\n/**\n * Returns a {@link GestureFragment} for the given events. If the browser\n * supports Pointer events, then only \"pointermove\" events will be considered.\n * Otherwise, only \"mousemove\" events will be considered.\n *\n * If there are less than 2 such events in the given list of events, returns\n * `false`.\n *\n * If the gesture is to be considered terminated, e.g. because there is\n * \"pointercancel\" in the list or buttons other than the primary are pressed,\n * returns `null`.\n *\n * Pointer gestures always require the primary button to be pressed and the\n * resulting intent is always \"drag\", and `deltaZ` is always 1.\n *\n * @param {} [options.angleDiffThreshold] See {@link getVectorDirection}\n *\n * @return {} `false` if there are less than 2 \"pointermove\"/\"mousemove\" events\n * in the list, `null` if the gesture is terminated, otherwise a\n * {@link GestureFragment}.\n *\n * @category Gestures\n */\nexport const getPointerGestureFragment = (\n  events: Event | readonly Event[],\n  options?: {\n    angleDiffThreshold?: number;\n  },\n): GestureFragment | null | false => {\n  if (!MH.isIterableObject(events)) {\n    events = [events];\n  }\n\n  let isCancelled = false;\n  const supports = getBrowserSupport();\n\n  // If the browser supports pointer events, then only take those; otherwise\n  // take the mouse events\n  const pointerEventClass = supports._pointer ? PointerEvent : MouseEvent;\n  const pointerUpType = supports._pointer ? MC.S_POINTERUP : MC.S_MOUSEUP;\n\n  const filteredEvents: MouseEvent[] = MH.filter(\n    events,\n    (event): event is MouseEvent => {\n      const eType = event.type;\n      isCancelled = isCancelled || eType === MC.S_POINTERCANCEL;\n      if (eType !== MC.S_CLICK && MH.isInstanceOf(event, pointerEventClass)) {\n        // Only events where the primary button is pressed (unless it's a\n        // pointerup event, in which case no buttons should be pressed) are\n        // considered, otherwise consider it terminated\n        isCancelled =\n          isCancelled ||\n          (eType === pointerUpType && event.buttons !== 0) ||\n          (eType !== pointerUpType && event.buttons !== 1);\n        // we don't handle touch pointer events\n        return !MH.isTouchPointerEvent(event);\n      }\n      return false;\n    },\n  );\n\n  const numEvents = MH.lengthOf(filteredEvents);\n  if (numEvents < 2) {\n    return false; // no enough events\n  }\n\n  if (isCancelled) {\n    return null; // terminated\n  }\n\n  const firstEvent = filteredEvents[0];\n  const lastEvent = filteredEvents[numEvents - 1];\n  if (MH.getPointerType(firstEvent) !== MH.getPointerType(lastEvent)) {\n    return null; // different devices, consider it terminated\n  }\n\n  const deltaX = lastEvent.clientX - firstEvent.clientX;\n  const deltaY = lastEvent.clientY - firstEvent.clientY;\n  const direction = getVectorDirection(\n    [deltaX, deltaY],\n    options?.angleDiffThreshold,\n  );\n\n  return direction === MC.S_NONE\n    ? false\n    : {\n        device: MC.S_POINTER,\n        direction,\n        intent: MC.S_DRAG,\n        deltaX,\n        deltaY,\n        deltaZ: 1,\n      };\n};\n"],"mappings":"AAAA;AACA;AACA;;AAEA,OAAO,KAAKA,EAAE;AACd,OAAO,KAAKC,EAAE;AAEd,SAASC,kBAAkB;AAC3B,SAASC,iBAAiB;AAG1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAMC,yBAAyB,GAAG,SAA5BA,yBAAyBA,CACpCC,MAAgC,EAChCC,OAEC,EACkC;EACnC,IAAI,CAACL,EAAE,CAACM,gBAAgB,CAACF,MAAM,CAAC,EAAE;IAChCA,MAAM,GAAG,CAACA,MAAM,CAAC;EACnB;EAEA,IAAIG,WAAW,GAAG,KAAK;EACvB,IAAMC,QAAQ,GAAGN,iBAAiB,CAAC,CAAC;;EAEpC;EACA;EACA,IAAMO,iBAAiB,GAAGD,QAAQ,CAACE,QAAQ,GAAGC,YAAY,GAAGC,UAAU;EACvE,IAAMC,aAAa,GAAGL,QAAQ,CAACE,QAAQ,GAAGX,EAAE,CAACe,WAAW,GAAGf,EAAE,CAACgB,SAAS;EAEvE,IAAMC,cAA4B,GAAGhB,EAAE,CAACiB,MAAM,CAC5Cb,MAAM,EACN,UAACc,KAAK,EAA0B;IAC9B,IAAMC,KAAK,GAAGD,KAAK,CAACE,IAAI;IACxBb,WAAW,GAAGA,WAAW,IAAIY,KAAK,KAAKpB,EAAE,CAACsB,eAAe;IACzD,IAAIF,KAAK,KAAKpB,EAAE,CAACuB,OAAO,IAAItB,EAAE,CAACuB,YAAY,CAACL,KAAK,EAAET,iBAAiB,CAAC,EAAE;MACrE;MACA;MACA;MACAF,WAAW,GACTA,WAAW,IACVY,KAAK,KAAKN,aAAa,IAAIK,KAAK,CAACM,OAAO,KAAK,CAAE,IAC/CL,KAAK,KAAKN,aAAa,IAAIK,KAAK,CAACM,OAAO,KAAK,CAAE;MAClD;MACA,OAAO,CAACxB,EAAE,CAACyB,mBAAmB,CAACP,KAAK,CAAC;IACvC;IACA,OAAO,KAAK;EACd,CACF,CAAC;EAED,IAAMQ,SAAS,GAAG1B,EAAE,CAAC2B,QAAQ,CAACX,cAAc,CAAC;EAC7C,IAAIU,SAAS,GAAG,CAAC,EAAE;IACjB,OAAO,KAAK,CAAC,CAAC;EAChB;EAEA,IAAInB,WAAW,EAAE;IACf,OAAO,IAAI,CAAC,CAAC;EACf;EAEA,IAAMqB,UAAU,GAAGZ,cAAc,CAAC,CAAC,CAAC;EACpC,IAAMa,SAAS,GAAGb,cAAc,CAACU,SAAS,GAAG,CAAC,CAAC;EAC/C,IAAI1B,EAAE,CAAC8B,cAAc,CAACF,UAAU,CAAC,KAAK5B,EAAE,CAAC8B,cAAc,CAACD,SAAS,CAAC,EAAE;IAClE,OAAO,IAAI,CAAC,CAAC;EACf;EAEA,IAAME,MAAM,GAAGF,SAAS,CAACG,OAAO,GAAGJ,UAAU,CAACI,OAAO;EACrD,IAAMC,MAAM,GAAGJ,SAAS,CAACK,OAAO,GAAGN,UAAU,CAACM,OAAO;EACrD,IAAMC,SAAS,GAAGlC,kBAAkB,CAClC,CAAC8B,MAAM,EAAEE,MAAM,CAAC,EAChB5B,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAE+B,kBACX,CAAC;EAED,OAAOD,SAAS,KAAKpC,EAAE,CAACsC,MAAM,GAC1B,KAAK,GACL;IACEC,MAAM,EAAEvC,EAAE,CAACwC,SAAS;IACpBJ,SAAS,EAATA,SAAS;IACTK,MAAM,EAAEzC,EAAE,CAAC0C,MAAM;IACjBV,MAAM,EAANA,MAAM;IACNE,MAAM,EAANA,MAAM;IACNS,MAAM,EAAE;EACV,CAAC;AACP,CAAC","ignoreList":[]}