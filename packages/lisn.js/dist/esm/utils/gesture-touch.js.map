{"version":3,"file":"gesture-touch.js","names":["MC","MH","getVectorDirection","maxAbs","havingMaxAbs","distanceBetween","areAntiParallel","newXMap","getTouchGestureFragment","events","options","_options$dragHoldTime","_options$dragNumFinge","isIterableObject","moves","getTouchDiff","deltaThreshold","numMoves","lengthOf","holdTime","getHoldTime","canBeDrag","dragHoldTime","dragNumFingers","angleDiffThreshold","deltaX","map","m","deltaY","deltaZ","filter","d","isSignificant","direction","S_NONE","intent","S_UNKNOWN","vectorA","vectorB","startDistance","startX","startY","endDistance","endX","endY","S_IN","S_OUT","S_ZOOM","deltaSign","reverseScroll","isFirst","S_DRAG","S_SCROLL","thisDirection","S_AMBIGUOUS","lastTouchEvent","isTouchEvent","slice","touches","device","S_TOUCH","groupedTouches","event","type","S_TOUCHCANCEL","touch","sGet","identifier","push","touchList","values","nTouches","firstTouch","lastTouch","clientX","clientY","firstStart","findIndex","e","S_TOUCHSTART","firstMove","S_TOUCHMOVE","timeStamp"],"sources":["../../../src/ts/utils/gesture-touch.ts"],"sourcesContent":["/**\n * @module Utils\n */\n\nimport * as MC from \"@lisn/globals/minification-constants\";\nimport * as MH from \"@lisn/globals/minification-helpers\";\n\nimport { Direction, GestureIntent, Vector } from \"@lisn/globals/types\";\n\nimport { getVectorDirection } from \"@lisn/utils/directions\";\n\nimport {\n  maxAbs,\n  havingMaxAbs,\n  distanceBetween,\n  areAntiParallel,\n} from \"@lisn/utils/math\";\nimport { GestureFragment } from \"@lisn/utils/gesture\";\n\nimport { newXMap } from \"@lisn/modules/x-map\";\n\n/**\n * @category Gestures\n */\nexport type TouchDiff = {\n  startX: number;\n  startY: number;\n\n  endX: number;\n  endY: number;\n\n  deltaX: number;\n  deltaY: number;\n\n  isSignificant: boolean;\n};\n\n/**\n * Returns a {@link GestureFragment} for the given events. Only \"touchmove\" events\n * will be considered.\n *\n * If there are less than 2 such events in the given list of events, returns `false`.\n *\n * If the gesture is to be considered terminated, e.g. because there is\n * \"touchcancel\" in the list, returns `null`.\n *\n * Note that by default swipe actions follow the natural direction: swipe up\n * with scroll intent results in direction down and swipe down results in\n * direction up. Drag intent always follows the direction of the gesture.\n *\n * For zoom intents, which necessarily involves exactly two fingers `deltaZ`\n * is based on the relative change in distance between the fingers.\n *\n * @param {} [options.deltaThreshold]\n *                          A change of x or y coordinate less than this is\n *                          considered insignificant, for the purposes of\n *                          determining:\n *                          1) whether the inferred direction is in one of the\n *                             four cardinal ones, or otherwise ambiguous; and\n *                          2) whether more than two fingers have moved and\n *                             therefore whether the direction could be zoom or\n *                             not\n * @param {} [options.angleDiffThreshold] See {@link getVectorDirection}\n * @param {} [options.reverseScroll]\n *                          If set to `true`, will disable natural scroll\n *                          direction.\n * @param {} [options.dragHoldTime]\n *                          If the user presses and holds for at least the\n *                          given amount of milliseconds before moving the\n *                          finger(s), gestures other than pinch will be\n *                          treated as a drag instead of scroll as long as the\n *                          number of fingers touching the screen is\n *                          `options.dragNumFingers`. Default is 500ms.\n * @param {} [options.dragNumFingers]\n *                          The number of fingers that could be considered a\n *                          drag intent. Default is 1.\n *\n * @return {} `false` if there are less than 2 \"touchmove\" events in the list,\n * `null` if the gesture is terminated, otherwise a {@link GestureFragment}.\n *\n * @category Gestures\n */\nexport const getTouchGestureFragment = (\n  events: Event[],\n  options?: {\n    deltaThreshold?: number;\n    angleDiffThreshold?: number;\n    reverseScroll?: boolean;\n    dragHoldTime?: number;\n    dragNumFingers?: number;\n  },\n): GestureFragment | null | false => {\n  if (!MH.isIterableObject(events)) {\n    events = [events];\n  }\n\n  let moves = getTouchDiff(events, options?.deltaThreshold);\n\n  if (!moves) {\n    return null; // terminated\n  }\n\n  let numMoves = MH.lengthOf(moves);\n\n  const holdTime = getHoldTime(events);\n  const canBeDrag =\n    holdTime >= (options?.dragHoldTime ?? 500) &&\n    numMoves === (options?.dragNumFingers ?? 1);\n  const angleDiffThreshold = options?.angleDiffThreshold;\n\n  let deltaX = havingMaxAbs(...moves.map((m) => m.deltaX));\n  let deltaY = havingMaxAbs(...moves.map((m) => m.deltaY));\n  let deltaZ = 1;\n\n  if (numMoves > 2) {\n    // Take only the significant ones\n    moves = MH.filter(moves, (d) => d.isSignificant);\n    numMoves = MH.lengthOf(moves);\n  }\n\n  let direction: Direction = MC.S_NONE;\n  let intent: GestureIntent = MC.S_UNKNOWN;\n  if (numMoves === 2) {\n    // Check if it's a zoom\n    const vectorA: Vector = [moves[0].deltaX, moves[0].deltaY];\n    const vectorB: Vector = [moves[1].deltaX, moves[1].deltaY];\n\n    // If either finger is approx stationary, or if they move in opposite directions,\n    // treat it as zoom.\n    if (\n      !havingMaxAbs(...vectorA) || // finger A still\n      !havingMaxAbs(...vectorB) || // finger B still\n      areAntiParallel(vectorA, vectorB, angleDiffThreshold)\n    ) {\n      // It's a pinch motion => zoom\n      const startDistance = distanceBetween(\n        [moves[0].startX, moves[0].startY],\n        [moves[1].startX, moves[1].startY],\n      );\n\n      const endDistance = distanceBetween(\n        [moves[0].endX, moves[0].endY],\n        [moves[1].endX, moves[1].endY],\n      );\n\n      direction = startDistance < endDistance ? MC.S_IN : MC.S_OUT;\n      deltaZ = endDistance / startDistance;\n      deltaX = deltaY = 0;\n      intent = MC.S_ZOOM;\n    }\n  }\n\n  const deltaSign = canBeDrag || options?.reverseScroll ? 1 : -1;\n  // If scrolling, swap the deltas for natural scroll direction.\n  // Add +0 to force -0 to be +0 since jest doesn't think they're equal\n  deltaX = deltaSign * deltaX + 0;\n  deltaY = deltaSign * deltaY + 0;\n\n  if (direction === MC.S_NONE) {\n    // Wasn't a zoom. Check if all moves are aligned.\n    let isFirst = true;\n\n    for (const m of moves) {\n      // There's at least one significant move, assume scroll or drag intent.\n      intent = canBeDrag ? MC.S_DRAG : MC.S_SCROLL;\n\n      const thisDirection = getVectorDirection(\n        [deltaSign * m.deltaX, deltaSign * m.deltaY],\n        angleDiffThreshold,\n      );\n\n      if (thisDirection === MC.S_NONE) {\n        continue;\n      }\n\n      if (isFirst) {\n        direction = thisDirection;\n      } else if (direction !== thisDirection) {\n        direction = MC.S_AMBIGUOUS;\n        break;\n      }\n\n      isFirst = false;\n    }\n  }\n\n  if (direction === MC.S_NONE) {\n    const lastTouchEvent = events.filter(MH.isTouchEvent).slice(-1)[0];\n    // If all fingers have lifted off, consider it terminated, otherwise wait\n    // for more events.\n    return MH.lengthOf(lastTouchEvent?.touches) ? false : null;\n  }\n\n  return {\n    device: MC.S_TOUCH,\n    direction,\n    intent,\n    deltaX,\n    deltaY,\n    deltaZ,\n  };\n};\n\n/**\n * Returns a description of the changes in each finger between the first and\n * the last relevant TouchEvent in the list.\n *\n * If the gesture is to be considered terminated, e.g. because there is\n * \"touchcancel\" in the list, returns `null`.\n *\n * Note that, `deltaX`/`deltaY` are the end X/Y coordinate minus the start X/Y\n * coordinate. For natural scroll direction you should swap their signs.\n *\n * @param {} deltaThreshold If the change of x and y coordinate are both less\n *                          than this, it is marked as not significant.\n *\n * @category Gestures\n */\nexport const getTouchDiff = (\n  events: Event[],\n  deltaThreshold = 0,\n): TouchDiff[] | null => {\n  // Group each touch point of each event by identifier, so that we can get the\n  // start and end coordinate of each finger\n  const groupedTouches = newXMap<number, Touch[]>((): Touch[] => []);\n\n  for (const event of events) {\n    if (!MH.isTouchEvent(event)) {\n      continue;\n    }\n\n    if (event.type === MC.S_TOUCHCANCEL) {\n      return null; // gesture terminated\n    }\n\n    for (const touch of event.touches) {\n      groupedTouches.sGet(touch.identifier).push(touch);\n    }\n  }\n\n  const moves: TouchDiff[] = [];\n\n  for (const touchList of groupedTouches.values()) {\n    const nTouches = MH.lengthOf(touchList);\n    if (nTouches < 2) {\n      // Only one event had that finger in it, so there's no move for it\n      continue;\n    }\n\n    const firstTouch = touchList[0];\n    const lastTouch = touchList[nTouches - 1];\n    const startX = firstTouch.clientX;\n    const startY = firstTouch.clientY;\n\n    const endX = lastTouch.clientX;\n    const endY = lastTouch.clientY;\n\n    const deltaX = endX - startX;\n    const deltaY = endY - startY;\n\n    const isSignificant = maxAbs(deltaX, deltaY) >= deltaThreshold;\n\n    // Consider it a move in one of the 4 cardinal ones\n    moves.push({\n      startX,\n      startY,\n      endX,\n      endY,\n      deltaX,\n      deltaY,\n      isSignificant,\n    });\n  }\n\n  return moves;\n};\n\n// --------------------\n\nconst getHoldTime = (events: Event[]) => {\n  const firstStart = events.findIndex((e) => e.type === MC.S_TOUCHSTART);\n  const firstMove = events.findIndex((e) => e.type === MC.S_TOUCHMOVE);\n  if (firstStart < 0 || firstMove < 1) {\n    return 0;\n  }\n\n  return events[firstMove].timeStamp - events[firstStart].timeStamp;\n};\n"],"mappings":"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","ignoreList":[]}