{"version":3,"file":"dom-watcher.js","names":["_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","_catch","delegateYield","_toConsumableArray","_arrayWithoutHoles","_iterableToArray","_unsupportedIterableToArray","_nonIterableSpread","Array","from","isArray","_arrayLikeToArray","asyncGeneratorStep","_asyncToGenerator","arguments","apply","_next","_throw","_createForOfIteratorHelper","_n","F","toString","test","_classCallCheck","_defineProperties","_toPropertyKey","key","_createClass","_defineProperty","_toPrimitive","toPrimitive","String","Number","MC","MH","DOM_CATEGORIES_SPACE","getIgnoreMove","clearIgnoreMove","ignoreMove","waitForElement","logError","omitKeys","objToStrKey","validateStrList","wrapCallback","newXMap","debug","DOMWatcher","config","CONSTRUCTOR_KEY","illegalConstructorError","logger","Logger","logAtCreation","buffer","_target","_categoryBitmask","_attributes","newSet","_addedTo","_removedFrom","allCallbacks","newMap","timer","mutationHandler","records","debug9","concat","_iterator","_step","record","target","targetOf","recType","isElement","S_CHILD_LIST","_iterator3","addedNodes","_step3","child","operation","sGet","ADDED_BIT","err","_iterator4","removedNodes","_step4","REMOVED_BIT","S_ATTRIBUTES","attributeName","add","ATTRIBUTE_BIT","sizeOf","setTimer","size","_iterator2","_step2","shouldSkipOperation","debug10","processOperation","clear","observers","_observer","newMutationObserver","_isActive","createCallback","handler","options","_allCallbacks$get","remove","get","_callback","debug5","callback","onRemove","deleteHandler","set","_options","setupOnMutation","_ref","_callee","userOptions","root","childQueue","_i","_arr","element","initOperation","bufferedOperation","diffOperation","_callee$","_context","getOptions","_root","getBody","isRemoved","activateObserver","skipInitial","_selector","takeRecords","querySelectorAll","matches","parentOf","getDiffOperation","invokeCallback","_x","_x2","deleteKey","activeCategories","_iterator5","_step5","entry","deactivateObserver","_iterator6","_step6","categoryBitmask","selector","currentTargets","contains","lengthOf","mutationType","debug3","observe","_subtree","disconnect","requestToSkip","removedFrom","addedTo","requestFrom","requestTo","to","onMutation","offMutation","_allCallbacks$get2","undefined","getConfig","reuse","_instances$get","myConfig","configStrKey","instance","instances","SYMBOL","_config$subtree","subtree","CATEGORIES_BITS","bit","S_ADDED","S_REMOVED","S_ATTRIBUTE","categories","has","_iterator7","_step7","cat","bitmask","isString","usageError","operationA","operationB","attributes","_iterator8","_step8","attr","_iterator9","_step9","currentTarget"],"sources":["../../../src/ts/watchers/dom-watcher.ts"],"sourcesContent":["/**\n * @module Watchers/DOMWatcher\n */\n\nimport * as MC from \"@lisn/globals/minification-constants\";\nimport * as MH from \"@lisn/globals/minification-helpers\";\n\nimport {\n  MutationCategory,\n  CommaSeparatedStr,\n  AtLeastOne,\n} from \"@lisn/globals/types\";\n\nimport { DOM_CATEGORIES_SPACE } from \"@lisn/utils/dom\";\nimport {\n  getIgnoreMove,\n  clearIgnoreMove,\n  ignoreMove,\n} from \"@lisn/utils/dom-alter\";\nimport { waitForElement } from \"@lisn/utils/dom-events\";\nimport { logError } from \"@lisn/utils/log\";\nimport { omitKeys } from \"@lisn/utils/misc\";\nimport { objToStrKey } from \"@lisn/utils/text\";\nimport { validateStrList } from \"@lisn/utils/validation\";\n\nimport {\n  CallbackHandler,\n  Callback,\n  wrapCallback,\n} from \"@lisn/modules/callback\";\nimport { newXMap } from \"@lisn/modules/x-map\";\n\nimport debug from \"@lisn/debug/debug\";\n\n/**\n * {@link DOMWatcher} listens for changes do the DOM tree. It's built on top of\n * {@link https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver | MutationObserver}.\n *\n * It manages registered callbacks globally and reuses MutationObservers for\n * more efficient performance.\n *\n * Each instance of DOMWatcher manages up to two MutationObservers: one\n * for `childList` changes and one for attribute changes, and it disconnects\n * them when there are no active callbacks for the relevant type.\n *\n * `characterData` and changes to base\n * {@link https://developer.mozilla.org/en-US/docs/Web/API/Node | Node}s\n * (non-{@link https://developer.mozilla.org/en-US/docs/Web/API/Element | Element})\n * are not supported.\n */\nexport class DOMWatcher {\n  /**\n   * Call the given handler whenever there's a matching mutation within this\n   * DOMWatcher's {@link DOMWatcherConfig.root | root}.\n   *\n   * If {@link OnMutationOptions.skipInitial | options.skipInitial} is `false`\n   * (default), _and_ {@link OnMutationOptions.selector | options.selector} is\n   * given, _and_ {@link OnMutationOptions.categories | options.categories}\n   * includes \"added\", the handler is also called (almost) immediately with all\n   * existing elements matching the selector under this DOMWatcher's\n   * {@link DOMWatcherConfig.root | root}.\n   *\n   * **IMPORTANT:** The same handler can _not_ be added multiple times, even if\n   * the options differ. If the handler has already been added, it is removed\n   * and re-added with the current options.\n   *\n   * @throws {@link Errors.LisnUsageError | LisnUsageError}\n   *                If the options are not valid.\n   */\n  readonly onMutation: (\n    handler: OnMutationHandler,\n    options?: OnMutationOptions,\n  ) => Promise<void>;\n\n  /**\n   * Removes a previously added handler.\n   */\n  readonly offMutation: (handler: OnMutationHandler) => void;\n\n  /**\n   * Ignore an upcoming moving/adding/removing of an element.\n   *\n   * The operation must complete within the next cycle, by the time\n   * MutationObserver calls us.\n   *\n   * Use this to prevent this instance of DOMWatcher from calling any callbacks\n   * that listen for relevant changes as a result of this operation, to prevent\n   * loops for example.\n   *\n   * **IMPORTANT:**\n   *\n   * Ignoring moving of an element from a parent _inside_ this DOMWatcher's\n   * root to another parent that's _outside_ the root, will work as expected,\n   * even though the \"adding to the new parent\" mutation will not be observed.\n   * This is because the element's current parent at the time of the mutation\n   * callback can be examined.\n   *\n   * However if you want to ignore moving of an element _from a parent outside\n   * this DOMWatcher's root_ you need to specify from: null since the \"removal\n   * from the old parent\" mutation would not be observed and there's no way to\n   * examine it's previous parent at the time the \"adding to the new parent\"\n   * mutation is observed.\n   *\n   * For this reason, setting `options.from` to be an element that's not under\n   * the root is internally treated the same as `options.from: null`.\n   */\n  readonly ignoreMove: (target: Element, options: MoveOptions) => void;\n\n  /**\n   * Creates a new instance of DOMWatcher with the given\n   * {@link DOMWatcherConfig}. It does not save it for future reuse.\n   */\n  static create(config: DOMWatcherConfig = {}) {\n    return new DOMWatcher(getConfig(config), CONSTRUCTOR_KEY);\n  }\n\n  /**\n   * Returns an existing instance of DOMWatcher with the given\n   * {@link DOMWatcherConfig}, or creates a new one.\n   *\n   * **NOTE:** It saves it for future reuse, so don't use this for temporary\n   * short-lived watchers.\n   */\n  static reuse(config: DOMWatcherConfig = {}) {\n    const myConfig = getConfig(config);\n    const configStrKey = objToStrKey(omitKeys(myConfig, { _root: null }));\n\n    const root = myConfig._root === MH.getBody() ? null : myConfig._root;\n    let instance = instances.get(root)?.get(configStrKey);\n    if (!instance) {\n      instance = new DOMWatcher(myConfig, CONSTRUCTOR_KEY);\n      instances.sGet(root).set(configStrKey, instance);\n    }\n\n    return instance;\n  }\n\n  private constructor(\n    config: DOMWatcherConfigInternal,\n    key: typeof CONSTRUCTOR_KEY,\n  ) {\n    if (key !== CONSTRUCTOR_KEY) {\n      throw MH.illegalConstructorError(\"DOMWatcher.create\");\n    }\n\n    const logger = debug\n      ? new debug.Logger({ name: \"DOMWatcher\", logAtCreation: config })\n      : null;\n\n    const buffer = newXMap<Element, MutationOperationInternal>((t) => ({\n      _target: t,\n      _categoryBitmask: 0,\n      _attributes: MH.newSet(),\n      _addedTo: null,\n      _removedFrom: null,\n    }));\n\n    const allCallbacks = MH.newMap<\n      OnMutationHandler,\n      {\n        _callback: OnMutationCallback;\n        _options: OnMutationOptionsInternal;\n      }\n    >();\n\n    // ----------\n\n    let timer: ReturnType<typeof setTimeout> | null = null;\n    const mutationHandler = (records: MutationRecord[]) => {\n      debug: logger?.debug9(`Got ${records.length} new records`, records);\n\n      for (const record of records) {\n        const target = MH.targetOf(record);\n        const recType = record.type;\n\n        /* istanbul ignore next */\n        if (!MH.isElement(target)) {\n          continue;\n        }\n\n        if (recType === MC.S_CHILD_LIST) {\n          for (const child of record.addedNodes) {\n            if (MH.isElement(child)) {\n              const operation = buffer.sGet(child);\n              operation._addedTo = target;\n              operation._categoryBitmask |= ADDED_BIT;\n            }\n          }\n\n          for (const child of record.removedNodes) {\n            if (MH.isElement(child)) {\n              const operation = buffer.sGet(child);\n              operation._removedFrom = target;\n              operation._categoryBitmask |= REMOVED_BIT;\n            }\n          }\n\n          //\n        } else if (recType === MC.S_ATTRIBUTES && record.attributeName) {\n          const operation = buffer.sGet(target);\n          operation._attributes.add(record.attributeName);\n          operation._categoryBitmask |= ATTRIBUTE_BIT;\n        }\n      }\n\n      // Schedule flushing of the buffer asynchronously so that we can combine\n      // the records from the two MutationObservers.\n      if (!timer && MH.sizeOf(buffer)) {\n        timer = MH.setTimer(() => {\n          debug: logger?.debug9(`Processing ${buffer.size} operations`);\n          for (const operation of buffer.values()) {\n            if (shouldSkipOperation(operation)) {\n              debug: logger?.debug10(\"Skipping operation\", operation);\n            } else {\n              processOperation(operation);\n            }\n          }\n\n          buffer.clear();\n          timer = null;\n        }, 0);\n      }\n    };\n\n    const observers: Record<MutationType, MyObserver> = {\n      [MC.S_CHILD_LIST]: {\n        _observer: MH.newMutationObserver(mutationHandler),\n        _isActive: false,\n      },\n      [MC.S_ATTRIBUTES]: {\n        _observer: MH.newMutationObserver(mutationHandler),\n        _isActive: false,\n      },\n    };\n\n    // ----------\n\n    const createCallback = (\n      handler: OnMutationHandler,\n      options: OnMutationOptionsInternal,\n    ): OnMutationCallback => {\n      MH.remove(allCallbacks.get(handler)?._callback);\n\n      debug: logger?.debug5(\"Adding/updating handler\", options);\n      const callback = wrapCallback(handler);\n      callback.onRemove(() => deleteHandler(handler));\n\n      allCallbacks.set(handler, { _callback: callback, _options: options });\n      return callback;\n    };\n\n    // ----------\n\n    const setupOnMutation = async (\n      handler: OnMutationHandler,\n      userOptions: OnMutationOptions | undefined,\n    ) => {\n      const options = getOptions(userOptions || {});\n      const callback = createCallback(handler, options);\n\n      let root = config._root || MH.getBody();\n      if (!root) {\n        root = await waitForElement(MH.getBody);\n      } else {\n        // So that the call is always async\n        await null;\n      }\n\n      if (callback.isRemoved()) {\n        return;\n      }\n\n      if (options._categoryBitmask & (ADDED_BIT | REMOVED_BIT)) {\n        activateObserver(root, MC.S_CHILD_LIST);\n      }\n\n      if (options._categoryBitmask & ATTRIBUTE_BIT) {\n        activateObserver(root, MC.S_ATTRIBUTES);\n      }\n\n      if (\n        userOptions?.skipInitial ||\n        !options._selector ||\n        !(options._categoryBitmask & ADDED_BIT)\n      ) {\n        return;\n      }\n\n      // As some of the matching elements that currently exist in the root may\n      // have just been added and therefore in the MutationObserver's queue, to\n      // avoid calling the handler with those entries twice, we empty its queue\n      // now and process it (which would also invoke the newly added callback).\n      // Then we skip any elements returned in querySelectorAll that were in\n      // the queue.\n\n      const childQueue = observers[MC.S_CHILD_LIST]._observer.takeRecords();\n      mutationHandler(childQueue);\n\n      for (const element of [\n        ...MH.querySelectorAll(root, options._selector),\n        ...(root.matches(options._selector) ? [root] : []),\n      ]) {\n        const initOperation: MutationOperationInternal = {\n          _target: element,\n          _categoryBitmask: ADDED_BIT,\n          _attributes: MH.newSet(),\n          _addedTo: MH.parentOf(element),\n          _removedFrom: null,\n        };\n\n        const bufferedOperation = buffer.get(element);\n        const diffOperation = getDiffOperation(\n          initOperation,\n          bufferedOperation,\n        );\n\n        if (diffOperation) {\n          if (shouldSkipOperation(diffOperation)) {\n            debug: logger?.debug10(\"Skipping operation\", diffOperation);\n          } else {\n            debug: logger?.debug5(\"Calling initially with\", diffOperation);\n            await invokeCallback(callback, diffOperation);\n          }\n        }\n      }\n    };\n\n    // ----------\n\n    const deleteHandler = (handler: OnMutationHandler) => {\n      MH.deleteKey(allCallbacks, handler);\n\n      let activeCategories = 0;\n      for (const entry of allCallbacks.values()) {\n        activeCategories |= entry._options._categoryBitmask;\n      }\n\n      if (!(activeCategories & (ADDED_BIT | REMOVED_BIT))) {\n        deactivateObserver(MC.S_CHILD_LIST);\n      }\n\n      if (!(activeCategories & ATTRIBUTE_BIT)) {\n        deactivateObserver(MC.S_ATTRIBUTES);\n      }\n    };\n\n    // ----------\n\n    const processOperation = (operation: MutationOperationInternal) => {\n      debug: logger?.debug10(\"Processing operation\", operation);\n\n      for (const entry of allCallbacks.values()) {\n        const categoryBitmask = entry._options._categoryBitmask;\n        const target = entry._options._target;\n        const selector = entry._options._selector;\n\n        if (!(operation._categoryBitmask & categoryBitmask)) {\n          debug: logger?.debug10(`Category does not match: ${categoryBitmask}`);\n          continue;\n        }\n\n        const currentTargets = [];\n        if (target) {\n          if (!operation._target.contains(target)) {\n            debug: logger?.debug10(\"Target does not match\", target);\n            continue;\n          }\n\n          currentTargets.push(target);\n        }\n\n        if (selector) {\n          const matches = [...MH.querySelectorAll(operation._target, selector)];\n\n          if (operation._target.matches(selector)) {\n            matches.push(operation._target);\n          }\n\n          if (!MH.lengthOf(matches)) {\n            debug: logger?.debug10(`Selector does not match: ${selector}`);\n            continue;\n          }\n\n          currentTargets.push(...matches);\n        }\n\n        invokeCallback(entry._callback, operation, currentTargets);\n      }\n    };\n\n    // ----------\n\n    const activateObserver = (root: Element, mutationType: MutationType) => {\n      if (!observers[mutationType]._isActive) {\n        debug: logger?.debug3(\n          `Activating mutation observer for '${mutationType}'`,\n        );\n        observers[mutationType]._observer.observe(root, {\n          [mutationType]: true,\n          subtree: config._subtree,\n        });\n        observers[mutationType]._isActive = true;\n      }\n    };\n\n    // ----------\n\n    const deactivateObserver = (mutationType: MutationType) => {\n      if (observers[mutationType]._isActive) {\n        debug: logger?.debug3(\n          `Disconnecting mutation observer for '${mutationType}'`,\n        );\n        observers[mutationType]._observer.disconnect();\n        observers[mutationType]._isActive = false;\n      }\n    };\n\n    // ----------\n\n    const shouldSkipOperation = (\n      operation: MutationOperationInternal,\n    ): boolean => {\n      const target = operation._target;\n      const requestToSkip = getIgnoreMove(target);\n      if (!requestToSkip) {\n        return false;\n      }\n\n      const removedFrom = operation._removedFrom;\n      const addedTo = MH.parentOf(target);\n      const requestFrom = requestToSkip.from;\n      const requestTo = requestToSkip.to;\n\n      const root = config._root || MH.getBody();\n      // If \"from\" is currently outside our root, we may not have seen a\n      // removal operation.\n      if (\n        (removedFrom === requestFrom || !root.contains(requestFrom)) &&\n        addedTo === requestTo\n      ) {\n        clearIgnoreMove(target);\n        return true;\n      }\n\n      return false;\n    };\n\n    // ----------\n\n    this.ignoreMove = ignoreMove;\n\n    // ----------\n\n    this.onMutation = setupOnMutation;\n\n    // ----------\n\n    this.offMutation = (handler) => {\n      debug: logger?.debug5(\"Removing handler\");\n      MH.remove(allCallbacks.get(handler)?._callback);\n    };\n  }\n}\n\n/**\n * @interface\n */\nexport type DOMWatcherConfig = {\n  /**\n   * The root element to observe for changes.\n   *\n   * It cannot be overridden on a per-callback basis.\n   *\n   * @defaultValue document.body\n   */\n  root?: Element | null;\n\n  /**\n   * Whether to observe root's subtree for changes or just direct descendants.\n   *\n   * It cannot be overridden on a per-callback basis.\n   *\n   * @defaultValue true\n   */\n  subtree?: boolean;\n};\n\n/**\n * @interface\n */\nexport type OnMutationOptions = {\n  /**\n   * If this is given, then the handler would only be called for operations\n   * where the target is _either_ the given element or an ancestor of it, i.e.\n   * it {@link https://developer.mozilla.org/en-US/docs/Web/API/Node/contains | Node:contains} it.\n   *\n   * @defaultValue undefined\n   */\n  target?: Element;\n\n  /**\n   * If this is given, then the handler would only be called for operations\n   * where the target matches the given selector _or contains an element\n   * matching the given selector_.\n   *\n   * @defaultValue undefined\n   */\n  selector?: string;\n\n  /**\n   * Specifies a list of {@link MutationCategory}s to target for.\n   *\n   * If not given, then the handler is called for any of the supported\n   * mutations.\n   *\n   * It can be a comma-separated list of category names or an array of such\n   * names.\n   *\n   * @defaultValue undefined\n   */\n  categories?: CommaSeparatedStr<MutationCategory> | MutationCategory[];\n\n  /**\n   * Do not call the handler until there's a future matching mutation.\n   *\n   * By default, if `selector` is given, and `categories` includes `added`, we\n   * call the handler (almost) immediately with all elements matching selector\n   * relative to this DOMWatcher's root.\n   *\n   * The initial operation will contain just the element and\n   * `addedTo: <current parent>`.\n   *\n   * @defaultValue false\n   */\n  skipInitial?: boolean;\n};\n\nexport type MoveOptions = AtLeastOne<{\n  /**\n   * If to is missing or null, it's a removal operation.\n   */\n  to: Element | null;\n\n  /**\n   * If from is missing or null, it's an insertion operation.\n   */\n  from: Element | null;\n}>;\n\nexport type MutationOperation = {\n  /**\n   * The target that was changed.\n   */\n  target: Element;\n\n  /**\n   * The target that the callback was interested in.\n   *\n   * If `selector` is given as part of {@link OnMutationOptions}, then\n   * `currentTarget` will point to the target that matched the selector\n   * starting at the operation's `target` as the root. If the operation's\n   * `target` contains more than one element matching selector, the callback\n   * will be called once for _each_ matching child.\n   *\n   * If `target` is given as part of {@link OnMutationOptions}, then\n   * `currentTarget` will be that element.\n   */\n  currentTarget: Element;\n\n  /**\n   * The list of attributes that were changed in this round.\n   */\n  attributes: Set<string>;\n\n  /**\n   * The element that the target was added to, i.e. it's new parent. It is null\n   * if the target was not moved to a new element _during this round_. It does\n   * not mean that this is its current parent.\n   */\n  addedTo: Element | null;\n\n  /**\n   * The element that the target was removed from, i.e. it's old parent. It is\n   * null if the target was not removed from a previous element _during this\n   * round_. It does not mean it did not previously have a parent, but that its\n   * removal was not observed.\n   */\n  removedFrom: Element | null;\n};\n\n/**\n * The handler is invoked with one argument:\n *\n * - a {@link MutationOperation} for a set of mutations related to a particular\n *   element\n *\n * The handler could be invoked multiple times in each \"round\" (cycle of event\n * loop) if there are mutation operations for more than one element that match\n * the supplied {@link OnMutationOptions}.\n */\nexport type OnMutationHandlerArgs = [MutationOperation];\nexport type OnMutationCallback = Callback<OnMutationHandlerArgs>;\nexport type OnMutationHandler =\n  | CallbackHandler<OnMutationHandlerArgs>\n  | OnMutationCallback;\n\n// ----------------------------------------\n\ntype DOMWatcherConfigInternal = {\n  _root: Element | null;\n  _subtree: boolean;\n};\n\ntype OnMutationOptionsInternal = {\n  _target: Element | null;\n  _selector: string;\n  _categoryBitmask: number;\n};\n\ntype MyObserver = {\n  _observer: MutationObserver;\n  _isActive: boolean;\n};\n\ntype MutationType = \"childList\" | \"attributes\";\n\ntype MutationOperationInternal = {\n  _target: Element;\n  _attributes: Set<string>;\n  _addedTo: Element | null;\n  _removedFrom: Element | null;\n  _categoryBitmask: number;\n};\n\nconst CONSTRUCTOR_KEY: unique symbol = MC.SYMBOL() as typeof CONSTRUCTOR_KEY;\nconst instances = newXMap<Element | null, Map<string, DOMWatcher>>(() =>\n  MH.newMap(),\n);\n\nconst getConfig = (config: DOMWatcherConfig): DOMWatcherConfigInternal => {\n  return {\n    _root: config.root || null,\n    _subtree: config.subtree ?? true,\n  };\n};\n\nconst CATEGORIES_BITS = DOM_CATEGORIES_SPACE.bit;\nconst ADDED_BIT = CATEGORIES_BITS[MC.S_ADDED];\nconst REMOVED_BIT = CATEGORIES_BITS[MC.S_REMOVED];\nconst ATTRIBUTE_BIT = CATEGORIES_BITS[MC.S_ATTRIBUTE];\n\n// ----------------------------------------\n\nconst getOptions = (options: OnMutationOptions): OnMutationOptionsInternal => {\n  let categoryBitmask = 0;\n  const categories = validateStrList(\n    \"categories\",\n    options.categories,\n    DOM_CATEGORIES_SPACE.has,\n  );\n\n  if (categories) {\n    for (const cat of categories) {\n      categoryBitmask |= CATEGORIES_BITS[cat];\n    }\n  } else {\n    categoryBitmask = DOM_CATEGORIES_SPACE.bitmask; // default: all\n  }\n\n  const selector = options.selector || \"\";\n  if (!MH.isString(selector)) {\n    throw MH.usageError(\"'selector' must be a string\");\n  }\n\n  return {\n    _categoryBitmask: categoryBitmask,\n    _target: options.target || null,\n    _selector: options.selector || \"\",\n  };\n};\n\nconst getDiffOperation = (\n  operationA: MutationOperationInternal,\n  operationB: MutationOperationInternal | undefined,\n): MutationOperationInternal | null => {\n  if (!operationB || operationA._target !== operationB._target) {\n    return operationA;\n  }\n\n  const attributes = MH.newSet<string>();\n  for (const attr of operationA._attributes) {\n    if (!operationB._attributes.has(attr)) {\n      attributes.add(attr);\n    }\n  }\n\n  const categoryBitmask =\n    operationA._categoryBitmask ^ operationB._categoryBitmask;\n\n  const addedTo =\n    operationA._addedTo === operationB._addedTo ? null : operationA._addedTo;\n\n  const removedFrom =\n    operationA._removedFrom === operationB._removedFrom\n      ? null\n      : operationA._removedFrom;\n\n  if (!MH.sizeOf(attributes) && !categoryBitmask && !addedTo && !removedFrom) {\n    return null;\n  }\n\n  return {\n    _target: operationA._target,\n    _categoryBitmask: categoryBitmask,\n    _attributes: attributes,\n    _addedTo: addedTo,\n    _removedFrom: removedFrom,\n  };\n};\n\nconst invokeCallback = (\n  callback: OnMutationCallback,\n  operation: MutationOperationInternal,\n  currentTargets: Element[] = [],\n) => {\n  if (!MH.lengthOf(currentTargets)) {\n    currentTargets = [operation._target];\n  }\n\n  for (const currentTarget of currentTargets) {\n    callback\n      .invoke({\n        target: operation._target,\n        currentTarget,\n        attributes: operation._attributes,\n        addedTo: operation._addedTo,\n        removedFrom: operation._removedFrom,\n      })\n      .catch(logError);\n  }\n};\n"],"mappings":";+CACA,qJAAAA,mBAAA,YAAAA,oBAAA,WAAAC,CAAA,SAAAC,CAAA,EAAAD,CAAA,OAAAE,CAAA,GAAAC,MAAA,CAAAC,SAAA,EAAAC,CAAA,GAAAH,CAAA,CAAAI,cAAA,EAAAC,CAAA,GAAAJ,MAAA,CAAAK,cAAA,cAAAP,CAAA,EAAAD,CAAA,EAAAE,CAAA,IAAAD,CAAA,CAAAD,CAAA,IAAAE,CAAA,CAAAO,KAAA,KAAAC,CAAA,wBAAAC,MAAA,GAAAA,MAAA,OAAAC,CAAA,GAAAF,CAAA,CAAAG,QAAA,kBAAAC,CAAA,GAAAJ,CAAA,CAAAK,aAAA,uBAAAC,CAAA,GAAAN,CAAA,CAAAO,WAAA,8BAAAC,OAAAjB,CAAA,EAAAD,CAAA,EAAAE,CAAA,WAAAC,MAAA,CAAAK,cAAA,CAAAP,CAAA,EAAAD,CAAA,IAAAS,KAAA,EAAAP,CAAA,EAAAiB,UAAA,MAAAC,YAAA,MAAAC,QAAA,SAAApB,CAAA,CAAAD,CAAA,WAAAkB,MAAA,mBAAAjB,CAAA,IAAAiB,MAAA,YAAAA,OAAAjB,CAAA,EAAAD,CAAA,EAAAE,CAAA,WAAAD,CAAA,CAAAD,CAAA,IAAAE,CAAA,gBAAAoB,KAAArB,CAAA,EAAAD,CAAA,EAAAE,CAAA,EAAAG,CAAA,QAAAK,CAAA,GAAAV,CAAA,IAAAA,CAAA,CAAAI,SAAA,YAAAmB,SAAA,GAAAvB,CAAA,GAAAuB,SAAA,EAAAX,CAAA,GAAAT,MAAA,CAAAqB,MAAA,CAAAd,CAAA,CAAAN,SAAA,GAAAU,CAAA,OAAAW,OAAA,CAAApB,CAAA,gBAAAE,CAAA,CAAAK,CAAA,eAAAH,KAAA,EAAAiB,gBAAA,CAAAzB,CAAA,EAAAC,CAAA,EAAAY,CAAA,MAAAF,CAAA,aAAAe,SAAA1B,CAAA,EAAAD,CAAA,EAAAE,CAAA,mBAAA0B,IAAA,YAAAC,GAAA,EAAA5B,CAAA,CAAA6B,IAAA,CAAA9B,CAAA,EAAAE,CAAA,cAAAD,CAAA,aAAA2B,IAAA,WAAAC,GAAA,EAAA5B,CAAA,QAAAD,CAAA,CAAAsB,IAAA,GAAAA,IAAA,MAAAS,CAAA,qBAAAC,CAAA,qBAAAC,CAAA,gBAAAC,CAAA,gBAAAC,CAAA,gBAAAZ,UAAA,cAAAa,kBAAA,cAAAC,2BAAA,SAAAC,CAAA,OAAApB,MAAA,CAAAoB,CAAA,EAAA1B,CAAA,qCAAA2B,CAAA,GAAApC,MAAA,CAAAqC,cAAA,EAAAC,CAAA,GAAAF,CAAA,IAAAA,CAAA,CAAAA,CAAA,CAAAG,MAAA,QAAAD,CAAA,IAAAA,CAAA,KAAAvC,CAAA,IAAAG,CAAA,CAAAyB,IAAA,CAAAW,CAAA,EAAA7B,CAAA,MAAA0B,CAAA,GAAAG,CAAA,OAAAE,CAAA,GAAAN,0BAAA,CAAAjC,SAAA,GAAAmB,SAAA,CAAAnB,SAAA,GAAAD,MAAA,CAAAqB,MAAA,CAAAc,CAAA,YAAAM,sBAAA3C,CAAA,gCAAA4C,OAAA,WAAA7C,CAAA,IAAAkB,MAAA,CAAAjB,CAAA,EAAAD,CAAA,YAAAC,CAAA,gBAAA6C,OAAA,CAAA9C,CAAA,EAAAC,CAAA,sBAAA8C,cAAA9C,CAAA,EAAAD,CAAA,aAAAgD,OAAA9C,CAAA,EAAAK,CAAA,EAAAG,CAAA,EAAAE,CAAA,QAAAE,CAAA,GAAAa,QAAA,CAAA1B,CAAA,CAAAC,CAAA,GAAAD,CAAA,EAAAM,CAAA,mBAAAO,CAAA,CAAAc,IAAA,QAAAZ,CAAA,GAAAF,CAAA,CAAAe,GAAA,EAAAE,CAAA,GAAAf,CAAA,CAAAP,KAAA,SAAAsB,CAAA,gBAAAkB,OAAA,CAAAlB,CAAA,KAAA1B,CAAA,CAAAyB,IAAA,CAAAC,CAAA,eAAA/B,CAAA,CAAAkD,OAAA,CAAAnB,CAAA,CAAAoB,OAAA,EAAAC,IAAA,WAAAnD,CAAA,IAAA+C,MAAA,SAAA/C,CAAA,EAAAS,CAAA,EAAAE,CAAA,gBAAAX,CAAA,IAAA+C,MAAA,UAAA/C,CAAA,EAAAS,CAAA,EAAAE,CAAA,QAAAZ,CAAA,CAAAkD,OAAA,CAAAnB,CAAA,EAAAqB,IAAA,WAAAnD,CAAA,IAAAe,CAAA,CAAAP,KAAA,GAAAR,CAAA,EAAAS,CAAA,CAAAM,CAAA,gBAAAf,CAAA,WAAA+C,MAAA,UAAA/C,CAAA,EAAAS,CAAA,EAAAE,CAAA,SAAAA,CAAA,CAAAE,CAAA,CAAAe,GAAA,SAAA3B,CAAA,EAAAK,CAAA,oBAAAE,KAAA,WAAAA,MAAAR,CAAA,EAAAI,CAAA,aAAAgD,2BAAA,eAAArD,CAAA,WAAAA,CAAA,EAAAE,CAAA,IAAA8C,MAAA,CAAA/C,CAAA,EAAAI,CAAA,EAAAL,CAAA,EAAAE,CAAA,gBAAAA,CAAA,GAAAA,CAAA,GAAAA,CAAA,CAAAkD,IAAA,CAAAC,0BAAA,EAAAA,0BAAA,IAAAA,0BAAA,qBAAA3B,iBAAA1B,CAAA,EAAAE,CAAA,EAAAG,CAAA,QAAAE,CAAA,GAAAwB,CAAA,mBAAArB,CAAA,EAAAE,CAAA,QAAAL,CAAA,KAAA0B,CAAA,QAAAqB,KAAA,sCAAA/C,CAAA,KAAA2B,CAAA,oBAAAxB,CAAA,QAAAE,CAAA,WAAAH,KAAA,EAAAR,CAAA,EAAAsD,IAAA,eAAAlD,CAAA,CAAAmD,MAAA,GAAA9C,CAAA,EAAAL,CAAA,CAAAwB,GAAA,GAAAjB,CAAA,UAAAE,CAAA,GAAAT,CAAA,CAAAoD,QAAA,MAAA3C,CAAA,QAAAE,CAAA,GAAA0C,mBAAA,CAAA5C,CAAA,EAAAT,CAAA,OAAAW,CAAA,QAAAA,CAAA,KAAAmB,CAAA,mBAAAnB,CAAA,qBAAAX,CAAA,CAAAmD,MAAA,EAAAnD,CAAA,CAAAsD,IAAA,GAAAtD,CAAA,CAAAuD,KAAA,GAAAvD,CAAA,CAAAwB,GAAA,sBAAAxB,CAAA,CAAAmD,MAAA,QAAAjD,CAAA,KAAAwB,CAAA,QAAAxB,CAAA,GAAA2B,CAAA,EAAA7B,CAAA,CAAAwB,GAAA,EAAAxB,CAAA,CAAAwD,iBAAA,CAAAxD,CAAA,CAAAwB,GAAA,uBAAAxB,CAAA,CAAAmD,MAAA,IAAAnD,CAAA,CAAAyD,MAAA,WAAAzD,CAAA,CAAAwB,GAAA,GAAAtB,CAAA,GAAA0B,CAAA,MAAAK,CAAA,GAAAX,QAAA,CAAA3B,CAAA,EAAAE,CAAA,EAAAG,CAAA,oBAAAiC,CAAA,CAAAV,IAAA,QAAArB,CAAA,GAAAF,CAAA,CAAAkD,IAAA,GAAArB,CAAA,GAAAF,CAAA,EAAAM,CAAA,CAAAT,GAAA,KAAAM,CAAA,qBAAA1B,KAAA,EAAA6B,CAAA,CAAAT,GAAA,EAAA0B,IAAA,EAAAlD,CAAA,CAAAkD,IAAA,kBAAAjB,CAAA,CAAAV,IAAA,KAAArB,CAAA,GAAA2B,CAAA,EAAA7B,CAAA,CAAAmD,MAAA,YAAAnD,CAAA,CAAAwB,GAAA,GAAAS,CAAA,CAAAT,GAAA,mBAAA6B,oBAAA1D,CAAA,EAAAE,CAAA,QAAAG,CAAA,GAAAH,CAAA,CAAAsD,MAAA,EAAAjD,CAAA,GAAAP,CAAA,CAAAa,QAAA,CAAAR,CAAA,OAAAE,CAAA,KAAAN,CAAA,SAAAC,CAAA,CAAAuD,QAAA,qBAAApD,CAAA,IAAAL,CAAA,CAAAa,QAAA,eAAAX,CAAA,CAAAsD,MAAA,aAAAtD,CAAA,CAAA2B,GAAA,GAAA5B,CAAA,EAAAyD,mBAAA,CAAA1D,CAAA,EAAAE,CAAA,eAAAA,CAAA,CAAAsD,MAAA,kBAAAnD,CAAA,KAAAH,CAAA,CAAAsD,MAAA,YAAAtD,CAAA,CAAA2B,GAAA,OAAAkC,SAAA,uCAAA1D,CAAA,iBAAA8B,CAAA,MAAAzB,CAAA,GAAAiB,QAAA,CAAApB,CAAA,EAAAP,CAAA,CAAAa,QAAA,EAAAX,CAAA,CAAA2B,GAAA,mBAAAnB,CAAA,CAAAkB,IAAA,SAAA1B,CAAA,CAAAsD,MAAA,YAAAtD,CAAA,CAAA2B,GAAA,GAAAnB,CAAA,CAAAmB,GAAA,EAAA3B,CAAA,CAAAuD,QAAA,SAAAtB,CAAA,MAAAvB,CAAA,GAAAF,CAAA,CAAAmB,GAAA,SAAAjB,CAAA,GAAAA,CAAA,CAAA2C,IAAA,IAAArD,CAAA,CAAAF,CAAA,CAAAgE,UAAA,IAAApD,CAAA,CAAAH,KAAA,EAAAP,CAAA,CAAA+D,IAAA,GAAAjE,CAAA,CAAAkE,OAAA,eAAAhE,CAAA,CAAAsD,MAAA,KAAAtD,CAAA,CAAAsD,MAAA,WAAAtD,CAAA,CAAA2B,GAAA,GAAA5B,CAAA,GAAAC,CAAA,CAAAuD,QAAA,SAAAtB,CAAA,IAAAvB,CAAA,IAAAV,CAAA,CAAAsD,MAAA,YAAAtD,CAAA,CAAA2B,GAAA,OAAAkC,SAAA,sCAAA7D,CAAA,CAAAuD,QAAA,SAAAtB,CAAA,cAAAgC,aAAAlE,CAAA,QAAAD,CAAA,KAAAoE,MAAA,EAAAnE,CAAA,YAAAA,CAAA,KAAAD,CAAA,CAAAqE,QAAA,GAAApE,CAAA,WAAAA,CAAA,KAAAD,CAAA,CAAAsE,UAAA,GAAArE,CAAA,KAAAD,CAAA,CAAAuE,QAAA,GAAAtE,CAAA,WAAAuE,UAAA,CAAAC,IAAA,CAAAzE,CAAA,cAAA0E,cAAAzE,CAAA,QAAAD,CAAA,GAAAC,CAAA,CAAA0E,UAAA,QAAA3E,CAAA,CAAA4B,IAAA,oBAAA5B,CAAA,CAAA6B,GAAA,EAAA5B,CAAA,CAAA0E,UAAA,GAAA3E,CAAA,aAAAyB,QAAAxB,CAAA,SAAAuE,UAAA,MAAAJ,MAAA,aAAAnE,CAAA,CAAA4C,OAAA,CAAAsB,YAAA,cAAAS,KAAA,iBAAAlC,OAAA1C,CAAA,QAAAA,CAAA,WAAAA,CAAA,QAAAE,CAAA,GAAAF,CAAA,CAAAY,CAAA,OAAAV,CAAA,SAAAA,CAAA,CAAA4B,IAAA,CAAA9B,CAAA,4BAAAA,CAAA,CAAAiE,IAAA,SAAAjE,CAAA,OAAA6E,KAAA,CAAA7E,CAAA,CAAA8E,MAAA,SAAAvE,CAAA,OAAAG,CAAA,YAAAuD,KAAA,aAAA1D,CAAA,GAAAP,CAAA,CAAA8E,MAAA,OAAAzE,CAAA,CAAAyB,IAAA,CAAA9B,CAAA,EAAAO,CAAA,UAAA0D,IAAA,CAAAxD,KAAA,GAAAT,CAAA,CAAAO,CAAA,GAAA0D,IAAA,CAAAV,IAAA,OAAAU,IAAA,SAAAA,IAAA,CAAAxD,KAAA,GAAAR,CAAA,EAAAgE,IAAA,CAAAV,IAAA,OAAAU,IAAA,YAAAvD,CAAA,CAAAuD,IAAA,GAAAvD,CAAA,gBAAAqD,SAAA,CAAAd,OAAA,CAAAjD,CAAA,kCAAAoC,iBAAA,CAAAhC,SAAA,GAAAiC,0BAAA,EAAA9B,CAAA,CAAAoC,CAAA,mBAAAlC,KAAA,EAAA4B,0BAAA,EAAAjB,YAAA,SAAAb,CAAA,CAAA8B,0BAAA,mBAAA5B,KAAA,EAAA2B,iBAAA,EAAAhB,YAAA,SAAAgB,iBAAA,CAAA2C,WAAA,GAAA7D,MAAA,CAAAmB,0BAAA,EAAArB,CAAA,wBAAAhB,CAAA,CAAAgF,mBAAA,aAAA/E,CAAA,QAAAD,CAAA,wBAAAC,CAAA,IAAAA,CAAA,CAAAgF,WAAA,WAAAjF,CAAA,KAAAA,CAAA,KAAAoC,iBAAA,6BAAApC,CAAA,CAAA+E,WAAA,IAAA/E,CAAA,CAAAkF,IAAA,OAAAlF,CAAA,CAAAmF,IAAA,aAAAlF,CAAA,WAAAE,MAAA,CAAAiF,cAAA,GAAAjF,MAAA,CAAAiF,cAAA,CAAAnF,CAAA,EAAAoC,0BAAA,KAAApC,CAAA,CAAAoF,SAAA,GAAAhD,0BAAA,EAAAnB,MAAA,CAAAjB,CAAA,EAAAe,CAAA,yBAAAf,CAAA,CAAAG,SAAA,GAAAD,MAAA,CAAAqB,MAAA,CAAAmB,CAAA,GAAA1C,CAAA,KAAAD,CAAA,CAAAsF,KAAA,aAAArF,CAAA,aAAAkD,OAAA,EAAAlD,CAAA,OAAA2C,qBAAA,CAAAG,aAAA,CAAA3C,SAAA,GAAAc,MAAA,CAAA6B,aAAA,CAAA3C,SAAA,EAAAU,CAAA,iCAAAd,CAAA,CAAA+C,aAAA,GAAAA,aAAA,EAAA/C,CAAA,CAAAuF,KAAA,aAAAtF,CAAA,EAAAC,CAAA,EAAAG,CAAA,EAAAE,CAAA,EAAAG,CAAA,eAAAA,CAAA,KAAAA,CAAA,GAAA8E,OAAA,OAAA5E,CAAA,OAAAmC,aAAA,CAAAzB,IAAA,CAAArB,CAAA,EAAAC,CAAA,EAAAG,CAAA,EAAAE,CAAA,GAAAG,CAAA,UAAAV,CAAA,CAAAgF,mBAAA,CAAA9E,CAAA,IAAAU,CAAA,GAAAA,CAAA,CAAAqD,IAAA,GAAAb,IAAA,WAAAnD,CAAA,WAAAA,CAAA,CAAAsD,IAAA,GAAAtD,CAAA,CAAAQ,KAAA,GAAAG,CAAA,CAAAqD,IAAA,WAAArB,qBAAA,CAAAD,CAAA,GAAAzB,MAAA,CAAAyB,CAAA,EAAA3B,CAAA,gBAAAE,MAAA,CAAAyB,CAAA,EAAA/B,CAAA,iCAAAM,MAAA,CAAAyB,CAAA,6DAAA3C,CAAA,CAAAyF,IAAA,aAAAxF,CAAA,QAAAD,CAAA,GAAAG,MAAA,CAAAF,CAAA,GAAAC,CAAA,gBAAAG,CAAA,IAAAL,CAAA,EAAAE,CAAA,CAAAuE,IAAA,CAAApE,CAAA,UAAAH,CAAA,CAAAwF,OAAA,aAAAzB,KAAA,WAAA/D,CAAA,CAAA4E,MAAA,SAAA7E,CAAA,GAAAC,CAAA,CAAAyF,GAAA,QAAA1F,CAAA,IAAAD,CAAA,SAAAiE,IAAA,CAAAxD,KAAA,GAAAR,CAAA,EAAAgE,IAAA,CAAAV,IAAA,OAAAU,IAAA,WAAAA,IAAA,CAAAV,IAAA,OAAAU,IAAA,QAAAjE,CAAA,CAAA0C,MAAA,GAAAA,MAAA,EAAAjB,OAAA,CAAArB,SAAA,KAAA6E,WAAA,EAAAxD,OAAA,EAAAmD,KAAA,WAAAA,MAAA5E,CAAA,aAAA4F,IAAA,WAAA3B,IAAA,WAAAN,IAAA,QAAAC,KAAA,GAAA3D,CAAA,OAAAsD,IAAA,YAAAE,QAAA,cAAAD,MAAA,gBAAA3B,GAAA,GAAA5B,CAAA,OAAAuE,UAAA,CAAA3B,OAAA,CAAA6B,aAAA,IAAA1E,CAAA,WAAAE,CAAA,kBAAAA,CAAA,CAAA2F,MAAA,OAAAxF,CAAA,CAAAyB,IAAA,OAAA5B,CAAA,MAAA2E,KAAA,EAAA3E,CAAA,CAAA4F,KAAA,cAAA5F,CAAA,IAAAD,CAAA,MAAA8F,IAAA,WAAAA,KAAA,SAAAxC,IAAA,WAAAtD,CAAA,QAAAuE,UAAA,IAAAG,UAAA,kBAAA1E,CAAA,CAAA2B,IAAA,QAAA3B,CAAA,CAAA4B,GAAA,cAAAmE,IAAA,KAAAnC,iBAAA,WAAAA,kBAAA7D,CAAA,aAAAuD,IAAA,QAAAvD,CAAA,MAAAE,CAAA,kBAAA+F,OAAA5F,CAAA,EAAAE,CAAA,WAAAK,CAAA,CAAAgB,IAAA,YAAAhB,CAAA,CAAAiB,GAAA,GAAA7B,CAAA,EAAAE,CAAA,CAAA+D,IAAA,GAAA5D,CAAA,EAAAE,CAAA,KAAAL,CAAA,CAAAsD,MAAA,WAAAtD,CAAA,CAAA2B,GAAA,GAAA5B,CAAA,KAAAM,CAAA,aAAAA,CAAA,QAAAiE,UAAA,CAAAM,MAAA,MAAAvE,CAAA,SAAAA,CAAA,QAAAG,CAAA,QAAA8D,UAAA,CAAAjE,CAAA,GAAAK,CAAA,GAAAF,CAAA,CAAAiE,UAAA,iBAAAjE,CAAA,CAAA0D,MAAA,SAAA6B,MAAA,aAAAvF,CAAA,CAAA0D,MAAA,SAAAwB,IAAA,QAAA9E,CAAA,GAAAT,CAAA,CAAAyB,IAAA,CAAApB,CAAA,eAAAM,CAAA,GAAAX,CAAA,CAAAyB,IAAA,CAAApB,CAAA,qBAAAI,CAAA,IAAAE,CAAA,aAAA4E,IAAA,GAAAlF,CAAA,CAAA2D,QAAA,SAAA4B,MAAA,CAAAvF,CAAA,CAAA2D,QAAA,gBAAAuB,IAAA,GAAAlF,CAAA,CAAA4D,UAAA,SAAA2B,MAAA,CAAAvF,CAAA,CAAA4D,UAAA,cAAAxD,CAAA,aAAA8E,IAAA,GAAAlF,CAAA,CAAA2D,QAAA,SAAA4B,MAAA,CAAAvF,CAAA,CAAA2D,QAAA,qBAAArD,CAAA,QAAAsC,KAAA,qDAAAsC,IAAA,GAAAlF,CAAA,CAAA4D,UAAA,SAAA2B,MAAA,CAAAvF,CAAA,CAAA4D,UAAA,YAAAR,MAAA,WAAAA,OAAA7D,CAAA,EAAAD,CAAA,aAAAE,CAAA,QAAAsE,UAAA,CAAAM,MAAA,MAAA5E,CAAA,SAAAA,CAAA,QAAAK,CAAA,QAAAiE,UAAA,CAAAtE,CAAA,OAAAK,CAAA,CAAA6D,MAAA,SAAAwB,IAAA,IAAAvF,CAAA,CAAAyB,IAAA,CAAAvB,CAAA,wBAAAqF,IAAA,GAAArF,CAAA,CAAA+D,UAAA,QAAA5D,CAAA,GAAAH,CAAA,aAAAG,CAAA,iBAAAT,CAAA,mBAAAA,CAAA,KAAAS,CAAA,CAAA0D,MAAA,IAAApE,CAAA,IAAAA,CAAA,IAAAU,CAAA,CAAA4D,UAAA,KAAA5D,CAAA,cAAAE,CAAA,GAAAF,CAAA,GAAAA,CAAA,CAAAiE,UAAA,cAAA/D,CAAA,CAAAgB,IAAA,GAAA3B,CAAA,EAAAW,CAAA,CAAAiB,GAAA,GAAA7B,CAAA,EAAAU,CAAA,SAAA8C,MAAA,gBAAAS,IAAA,GAAAvD,CAAA,CAAA4D,UAAA,EAAAnC,CAAA,SAAA+D,QAAA,CAAAtF,CAAA,MAAAsF,QAAA,WAAAA,SAAAjG,CAAA,EAAAD,CAAA,oBAAAC,CAAA,CAAA2B,IAAA,QAAA3B,CAAA,CAAA4B,GAAA,qBAAA5B,CAAA,CAAA2B,IAAA,mBAAA3B,CAAA,CAAA2B,IAAA,QAAAqC,IAAA,GAAAhE,CAAA,CAAA4B,GAAA,gBAAA5B,CAAA,CAAA2B,IAAA,SAAAoE,IAAA,QAAAnE,GAAA,GAAA5B,CAAA,CAAA4B,GAAA,OAAA2B,MAAA,kBAAAS,IAAA,yBAAAhE,CAAA,CAAA2B,IAAA,IAAA5B,CAAA,UAAAiE,IAAA,GAAAjE,CAAA,GAAAmC,CAAA,KAAAgE,MAAA,WAAAA,OAAAlG,CAAA,aAAAD,CAAA,QAAAwE,UAAA,CAAAM,MAAA,MAAA9E,CAAA,SAAAA,CAAA,QAAAE,CAAA,QAAAsE,UAAA,CAAAxE,CAAA,OAAAE,CAAA,CAAAoE,UAAA,KAAArE,CAAA,cAAAiG,QAAA,CAAAhG,CAAA,CAAAyE,UAAA,EAAAzE,CAAA,CAAAqE,QAAA,GAAAG,aAAA,CAAAxE,CAAA,GAAAiC,CAAA,yBAAAiE,OAAAnG,CAAA,aAAAD,CAAA,QAAAwE,UAAA,CAAAM,MAAA,MAAA9E,CAAA,SAAAA,CAAA,QAAAE,CAAA,QAAAsE,UAAA,CAAAxE,CAAA,OAAAE,CAAA,CAAAkE,MAAA,KAAAnE,CAAA,QAAAI,CAAA,GAAAH,CAAA,CAAAyE,UAAA,kBAAAtE,CAAA,CAAAuB,IAAA,QAAArB,CAAA,GAAAF,CAAA,CAAAwB,GAAA,EAAA6C,aAAA,CAAAxE,CAAA,YAAAK,CAAA,YAAA+C,KAAA,8BAAA+C,aAAA,WAAAA,cAAArG,CAAA,EAAAE,CAAA,EAAAG,CAAA,gBAAAoD,QAAA,KAAA5C,QAAA,EAAA6B,MAAA,CAAA1C,CAAA,GAAAgE,UAAA,EAAA9D,CAAA,EAAAgE,OAAA,EAAA7D,CAAA,oBAAAmD,MAAA,UAAA3B,GAAA,GAAA5B,CAAA,GAAAkC,CAAA,OAAAnC,CAAA;AAAA,SAAAsG,mBAAApG,CAAA,WAAAqG,kBAAA,CAAArG,CAAA,KAAAsG,gBAAA,CAAAtG,CAAA,KAAAuG,2BAAA,CAAAvG,CAAA,KAAAwG,kBAAA;AAAA,SAAAA,mBAAA,cAAA3C,SAAA;AAAA,SAAAyC,iBAAAtG,CAAA,8BAAAS,MAAA,YAAAT,CAAA,CAAAS,MAAA,CAAAE,QAAA,aAAAX,CAAA,uBAAAyG,KAAA,CAAAC,IAAA,CAAA1G,CAAA;AAAA,SAAAqG,mBAAArG,CAAA,QAAAyG,KAAA,CAAAE,OAAA,CAAA3G,CAAA,UAAA4G,iBAAA,CAAA5G,CAAA;AAAA,SAAA6G,mBAAA1G,CAAA,EAAAJ,CAAA,EAAAD,CAAA,EAAAE,CAAA,EAAAK,CAAA,EAAAK,CAAA,EAAAE,CAAA,cAAAJ,CAAA,GAAAL,CAAA,CAAAO,CAAA,EAAAE,CAAA,GAAAE,CAAA,GAAAN,CAAA,CAAAD,KAAA,WAAAJ,CAAA,gBAAAL,CAAA,CAAAK,CAAA,KAAAK,CAAA,CAAA6C,IAAA,GAAAtD,CAAA,CAAAe,CAAA,IAAAwE,OAAA,CAAAtC,OAAA,CAAAlC,CAAA,EAAAoC,IAAA,CAAAlD,CAAA,EAAAK,CAAA;AAAA,SAAAyG,kBAAA3G,CAAA,6BAAAJ,CAAA,SAAAD,CAAA,GAAAiH,SAAA,aAAAzB,OAAA,WAAAtF,CAAA,EAAAK,CAAA,QAAAK,CAAA,GAAAP,CAAA,CAAA6G,KAAA,CAAAjH,CAAA,EAAAD,CAAA,YAAAmH,MAAA9G,CAAA,IAAA0G,kBAAA,CAAAnG,CAAA,EAAAV,CAAA,EAAAK,CAAA,EAAA4G,KAAA,EAAAC,MAAA,UAAA/G,CAAA,cAAA+G,OAAA/G,CAAA,IAAA0G,kBAAA,CAAAnG,CAAA,EAAAV,CAAA,EAAAK,CAAA,EAAA4G,KAAA,EAAAC,MAAA,WAAA/G,CAAA,KAAA8G,KAAA;AAAA,SAAAE,2BAAAnH,CAAA,EAAAF,CAAA,QAAAC,CAAA,yBAAAU,MAAA,IAAAT,CAAA,CAAAS,MAAA,CAAAE,QAAA,KAAAX,CAAA,qBAAAD,CAAA,QAAA0G,KAAA,CAAAE,OAAA,CAAA3G,CAAA,MAAAD,CAAA,GAAAwG,2BAAA,CAAAvG,CAAA,MAAAF,CAAA,IAAAE,CAAA,uBAAAA,CAAA,CAAA4E,MAAA,IAAA7E,CAAA,KAAAC,CAAA,GAAAD,CAAA,OAAAqH,EAAA,MAAAC,CAAA,YAAAA,EAAA,eAAArF,CAAA,EAAAqF,CAAA,EAAAlH,CAAA,WAAAA,EAAA,WAAAiH,EAAA,IAAApH,CAAA,CAAA4E,MAAA,KAAAvB,IAAA,WAAAA,IAAA,MAAA9C,KAAA,EAAAP,CAAA,CAAAoH,EAAA,UAAAtH,CAAA,WAAAA,EAAAE,CAAA,UAAAA,CAAA,KAAA+B,CAAA,EAAAsF,CAAA,gBAAAxD,SAAA,iJAAAxD,CAAA,EAAAK,CAAA,OAAAI,CAAA,gBAAAkB,CAAA,WAAAA,EAAA,IAAAjC,CAAA,GAAAA,CAAA,CAAA6B,IAAA,CAAA5B,CAAA,MAAAG,CAAA,WAAAA,EAAA,QAAAH,CAAA,GAAAD,CAAA,CAAAgE,IAAA,WAAArD,CAAA,GAAAV,CAAA,CAAAqD,IAAA,EAAArD,CAAA,KAAAF,CAAA,WAAAA,EAAAE,CAAA,IAAAc,CAAA,OAAAT,CAAA,GAAAL,CAAA,KAAA+B,CAAA,WAAAA,EAAA,UAAArB,CAAA,YAAAX,CAAA,cAAAA,CAAA,8BAAAe,CAAA,QAAAT,CAAA;AAAA,SAAAkG,4BAAAvG,CAAA,EAAAU,CAAA,QAAAV,CAAA,2BAAAA,CAAA,SAAA4G,iBAAA,CAAA5G,CAAA,EAAAU,CAAA,OAAAX,CAAA,MAAAuH,QAAA,CAAA1F,IAAA,CAAA5B,CAAA,EAAA4F,KAAA,6BAAA7F,CAAA,IAAAC,CAAA,CAAA+E,WAAA,KAAAhF,CAAA,GAAAC,CAAA,CAAA+E,WAAA,CAAAC,IAAA,aAAAjF,CAAA,cAAAA,CAAA,GAAA0G,KAAA,CAAAC,IAAA,CAAA1G,CAAA,oBAAAD,CAAA,+CAAAwH,IAAA,CAAAxH,CAAA,IAAA6G,iBAAA,CAAA5G,CAAA,EAAAU,CAAA;AAAA,SAAAkG,kBAAA5G,CAAA,EAAAU,CAAA,aAAAA,CAAA,IAAAA,CAAA,GAAAV,CAAA,CAAA4E,MAAA,MAAAlE,CAAA,GAAAV,CAAA,CAAA4E,MAAA,YAAA9E,CAAA,MAAAK,CAAA,GAAAsG,KAAA,CAAA/F,CAAA,GAAAZ,CAAA,GAAAY,CAAA,EAAAZ,CAAA,IAAAK,CAAA,CAAAL,CAAA,IAAAE,CAAA,CAAAF,CAAA,UAAAK,CAAA;AAAA,SAAAqH,gBAAA9G,CAAA,EAAAP,CAAA,UAAAO,CAAA,YAAAP,CAAA,aAAA0D,SAAA;AAAA,SAAA4D,kBAAA3H,CAAA,EAAAE,CAAA,aAAAD,CAAA,MAAAA,CAAA,GAAAC,CAAA,CAAA4E,MAAA,EAAA7E,CAAA,UAAAM,CAAA,GAAAL,CAAA,CAAAD,CAAA,GAAAM,CAAA,CAAAY,UAAA,GAAAZ,CAAA,CAAAY,UAAA,QAAAZ,CAAA,CAAAa,YAAA,kBAAAb,CAAA,KAAAA,CAAA,CAAAc,QAAA,QAAAlB,MAAA,CAAAK,cAAA,CAAAR,CAAA,EAAA4H,cAAA,CAAArH,CAAA,CAAAsH,GAAA,GAAAtH,CAAA;AAAA,SAAAuH,aAAA9H,CAAA,EAAAE,CAAA,EAAAD,CAAA,WAAAC,CAAA,IAAAyH,iBAAA,CAAA3H,CAAA,CAAAI,SAAA,EAAAF,CAAA,GAAAD,CAAA,IAAA0H,iBAAA,CAAA3H,CAAA,EAAAC,CAAA,GAAAE,MAAA,CAAAK,cAAA,CAAAR,CAAA,iBAAAqB,QAAA,SAAArB,CAAA;AAAA,SAAA+H,gBAAA/H,CAAA,EAAAE,CAAA,EAAAD,CAAA,YAAAC,CAAA,GAAA0H,cAAA,CAAA1H,CAAA,MAAAF,CAAA,GAAAG,MAAA,CAAAK,cAAA,CAAAR,CAAA,EAAAE,CAAA,IAAAO,KAAA,EAAAR,CAAA,EAAAkB,UAAA,MAAAC,YAAA,MAAAC,QAAA,UAAArB,CAAA,CAAAE,CAAA,IAAAD,CAAA,EAAAD,CAAA;AAAA,SAAA4H,eAAA3H,CAAA,QAAAS,CAAA,GAAAsH,YAAA,CAAA/H,CAAA,gCAAAgD,OAAA,CAAAvC,CAAA,IAAAA,CAAA,GAAAA,CAAA;AAAA,SAAAsH,aAAA/H,CAAA,EAAAC,CAAA,oBAAA+C,OAAA,CAAAhD,CAAA,MAAAA,CAAA,SAAAA,CAAA,MAAAD,CAAA,GAAAC,CAAA,CAAAU,MAAA,CAAAsH,WAAA,kBAAAjI,CAAA,QAAAU,CAAA,GAAAV,CAAA,CAAA8B,IAAA,CAAA7B,CAAA,EAAAC,CAAA,gCAAA+C,OAAA,CAAAvC,CAAA,UAAAA,CAAA,YAAAqD,SAAA,yEAAA7D,CAAA,GAAAgI,MAAA,GAAAC,MAAA,EAAAlI,CAAA;AADA;AACA;AACA;;AAEA,OAAO,KAAKmI,EAAE;AACd,OAAO,KAAKC,EAAE;AAQd,SAASC,oBAAoB;AAC7B,SACEC,aAAa,EACbC,eAAe,EACfC,UAAU;AAEZ,SAASC,cAAc;AACvB,SAASC,QAAQ;AACjB,SAASC,QAAQ;AACjB,SAASC,WAAW;AACpB,SAASC,eAAe;AAExB,SAGEC,YAAY;AAEd,SAASC,OAAO;AAEhB,OAAOC,KAAK;;AAEZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAaC,UAAU;EAuFrB,SAAAA,WACEC,MAAgC,EAChCtB,GAA2B,EAC3B;IAAAH,eAAA,OAAAwB,UAAA;IAzFF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAjBEnB,eAAA;IAuBA;AACF;AACA;IAFEA,eAAA;IAKA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IA1BEA,eAAA;IA8DE,IAAIF,GAAG,KAAKuB,eAAe,EAAE;MAC3B,MAAMf,EAAE,CAACgB,uBAAuB,CAAC,mBAAmB,CAAC;IACvD;IAEA,IAAMC,MAAM,GAAGL,KAAK,GAChB,IAAIA,KAAK,CAACM,MAAM,CAAC;MAAErE,IAAI,EAAE,YAAY;MAAEsE,aAAa,EAAEL;IAAO,CAAC,CAAC,GAC/D,IAAI;IAER,IAAMM,MAAM,GAAGT,OAAO,CAAqC,UAAC/I,CAAC;MAAA,OAAM;QACjEyJ,OAAO,EAAEzJ,CAAC;QACV0J,gBAAgB,EAAE,CAAC;QACnBC,WAAW,EAAEvB,EAAE,CAACwB,MAAM,CAAC,CAAC;QACxBC,QAAQ,EAAE,IAAI;QACdC,YAAY,EAAE;MAChB,CAAC;IAAA,CAAC,CAAC;IAEH,IAAMC,YAAY,GAAG3B,EAAE,CAAC4B,MAAM,CAM5B,CAAC;;IAEH;;IAEA,IAAIC,KAA2C,GAAG,IAAI;IACtD,IAAMC,eAAe,GAAG,SAAlBA,eAAeA,CAAIC,OAAyB,EAAK;MACrDnB,KAAK,EAAEK,MAAM,aAANA,MAAM,eAANA,MAAM,CAAEe,MAAM,QAAAC,MAAA,CAAQF,OAAO,CAACtF,MAAM,mBAAgBsF,OAAO,CAAC;MAAC,IAAAG,SAAA,GAAAlD,0BAAA,CAE/C+C,OAAO;QAAAI,KAAA;MAAA;QAA5B,KAAAD,SAAA,CAAArI,CAAA,MAAAsI,KAAA,GAAAD,SAAA,CAAAlK,CAAA,IAAAkD,IAAA,GAA8B;UAAA,IAAnBkH,MAAM,GAAAD,KAAA,CAAA/J,KAAA;UACf,IAAMiK,MAAM,GAAGrC,EAAE,CAACsC,QAAQ,CAACF,MAAM,CAAC;UAClC,IAAMG,OAAO,GAAGH,MAAM,CAAC7I,IAAI;;UAE3B;UACA,IAAI,CAACyG,EAAE,CAACwC,SAAS,CAACH,MAAM,CAAC,EAAE;YACzB;UACF;UAEA,IAAIE,OAAO,KAAKxC,EAAE,CAAC0C,YAAY,EAAE;YAAA,IAAAC,UAAA,GAAA1D,0BAAA,CACXoD,MAAM,CAACO,UAAU;cAAAC,MAAA;YAAA;cAArC,KAAAF,UAAA,CAAA7I,CAAA,MAAA+I,MAAA,GAAAF,UAAA,CAAA1K,CAAA,IAAAkD,IAAA,GAAuC;gBAAA,IAA5B2H,KAAK,GAAAD,MAAA,CAAAxK,KAAA;gBACd,IAAI4H,EAAE,CAACwC,SAAS,CAACK,KAAK,CAAC,EAAE;kBACvB,IAAMC,SAAS,GAAG1B,MAAM,CAAC2B,IAAI,CAACF,KAAK,CAAC;kBACpCC,SAAS,CAACrB,QAAQ,GAAGY,MAAM;kBAC3BS,SAAS,CAACxB,gBAAgB,IAAI0B,SAAS;gBACzC;cACF;YAAC,SAAAC,GAAA;cAAAP,UAAA,CAAA/K,CAAA,CAAAsL,GAAA;YAAA;cAAAP,UAAA,CAAA9I,CAAA;YAAA;YAAA,IAAAsJ,UAAA,GAAAlE,0BAAA,CAEmBoD,MAAM,CAACe,YAAY;cAAAC,MAAA;YAAA;cAAvC,KAAAF,UAAA,CAAArJ,CAAA,MAAAuJ,MAAA,GAAAF,UAAA,CAAAlL,CAAA,IAAAkD,IAAA,GAAyC;gBAAA,IAA9B2H,MAAK,GAAAO,MAAA,CAAAhL,KAAA;gBACd,IAAI4H,EAAE,CAACwC,SAAS,CAACK,MAAK,CAAC,EAAE;kBACvB,IAAMC,UAAS,GAAG1B,MAAM,CAAC2B,IAAI,CAACF,MAAK,CAAC;kBACpCC,UAAS,CAACpB,YAAY,GAAGW,MAAM;kBAC/BS,UAAS,CAACxB,gBAAgB,IAAI+B,WAAW;gBAC3C;cACF;;cAEA;YAAA,SAAAJ,GAAA;cAAAC,UAAA,CAAAvL,CAAA,CAAAsL,GAAA;YAAA;cAAAC,UAAA,CAAAtJ,CAAA;YAAA;UACF,CAAC,MAAM,IAAI2I,OAAO,KAAKxC,EAAE,CAACuD,YAAY,IAAIlB,MAAM,CAACmB,aAAa,EAAE;YAC9D,IAAMT,WAAS,GAAG1B,MAAM,CAAC2B,IAAI,CAACV,MAAM,CAAC;YACrCS,WAAS,CAACvB,WAAW,CAACiC,GAAG,CAACpB,MAAM,CAACmB,aAAa,CAAC;YAC/CT,WAAS,CAACxB,gBAAgB,IAAImC,aAAa;UAC7C;QACF;;QAEA;QACA;MAAA,SAAAR,GAAA;QAAAf,SAAA,CAAAvK,CAAA,CAAAsL,GAAA;MAAA;QAAAf,SAAA,CAAAtI,CAAA;MAAA;MACA,IAAI,CAACiI,KAAK,IAAI7B,EAAE,CAAC0D,MAAM,CAACtC,MAAM,CAAC,EAAE;QAC/BS,KAAK,GAAG7B,EAAE,CAAC2D,QAAQ,CAAC,YAAM;UACxB/C,KAAK,EAAEK,MAAM,aAANA,MAAM,eAANA,MAAM,CAAEe,MAAM,eAAAC,MAAA,CAAeb,MAAM,CAACwC,IAAI,gBAAa,CAAC;UAAC,IAAAC,UAAA,GAAA7E,0BAAA,CACtCoC,MAAM,CAAC/G,MAAM,CAAC,CAAC;YAAAyJ,MAAA;UAAA;YAAvC,KAAAD,UAAA,CAAAhK,CAAA,MAAAiK,MAAA,GAAAD,UAAA,CAAA7L,CAAA,IAAAkD,IAAA,GAAyC;cAAA,IAA9B4H,SAAS,GAAAgB,MAAA,CAAA1L,KAAA;cAClB,IAAI2L,mBAAmB,CAACjB,SAAS,CAAC,EAAE;gBAClClC,KAAK,EAAEK,MAAM,aAANA,MAAM,eAANA,MAAM,CAAE+C,OAAO,CAAC,oBAAoB,EAAElB,SAAS,CAAC;cACzD,CAAC,MAAM;gBACLmB,gBAAgB,CAACnB,SAAS,CAAC;cAC7B;YACF;UAAC,SAAAG,GAAA;YAAAY,UAAA,CAAAlM,CAAA,CAAAsL,GAAA;UAAA;YAAAY,UAAA,CAAAjK,CAAA;UAAA;UAEDwH,MAAM,CAAC8C,KAAK,CAAC,CAAC;UACdrC,KAAK,GAAG,IAAI;QACd,CAAC,EAAE,CAAC,CAAC;MACP;IACF,CAAC;IAED,IAAMsC,SAA2C,GAAAzE,eAAA,CAAAA,eAAA,KAC9CK,EAAE,CAAC0C,YAAY,EAAG;MACjB2B,SAAS,EAAEpE,EAAE,CAACqE,mBAAmB,CAACvC,eAAe,CAAC;MAClDwC,SAAS,EAAE;IACb,CAAC,GACAvE,EAAE,CAACuD,YAAY,EAAG;MACjBc,SAAS,EAAEpE,EAAE,CAACqE,mBAAmB,CAACvC,eAAe,CAAC;MAClDwC,SAAS,EAAE;IACb,CAAC,CACF;;IAED;;IAEA,IAAMC,cAAc,GAAG,SAAjBA,cAAcA,CAClBC,OAA0B,EAC1BC,OAAkC,EACX;MAAA,IAAAC,iBAAA;MACvB1E,EAAE,CAAC2E,MAAM,EAAAD,iBAAA,GAAC/C,YAAY,CAACiD,GAAG,CAACJ,OAAO,CAAC,cAAAE,iBAAA,uBAAzBA,iBAAA,CAA2BG,SAAS,CAAC;MAE/CjE,KAAK,EAAEK,MAAM,aAANA,MAAM,eAANA,MAAM,CAAE6D,MAAM,CAAC,yBAAyB,EAAEL,OAAO,CAAC;MACzD,IAAMM,QAAQ,GAAGrE,YAAY,CAAC8D,OAAO,CAAC;MACtCO,QAAQ,CAACC,QAAQ,CAAC;QAAA,OAAMC,aAAa,CAACT,OAAO,CAAC;MAAA,EAAC;MAE/C7C,YAAY,CAACuD,GAAG,CAACV,OAAO,EAAE;QAAEK,SAAS,EAAEE,QAAQ;QAAEI,QAAQ,EAAEV;MAAQ,CAAC,CAAC;MACrE,OAAOM,QAAQ;IACjB,CAAC;;IAED;;IAEA,IAAMK,eAAe;MAAA,IAAAC,IAAA,GAAA1G,iBAAA,cAAAjH,mBAAA,GAAAoF,IAAA,CAAG,SAAAwI,QACtBd,OAA0B,EAC1Be,WAA0C;QAAA,IAAAd,OAAA,EAAAM,QAAA,EAAAS,IAAA,EAAAC,UAAA,EAAAC,EAAA,EAAAC,IAAA,EAAAC,OAAA,EAAAC,aAAA,EAAAC,iBAAA,EAAAC,aAAA;QAAA,OAAArO,mBAAA,GAAAuB,IAAA,UAAA+M,SAAAC,QAAA;UAAA,kBAAAA,QAAA,CAAA1I,IAAA,GAAA0I,QAAA,CAAArK,IAAA;YAAA;cAEpC6I,OAAO,GAAGyB,UAAU,CAACX,WAAW,IAAI,CAAC,CAAC,CAAC;cACvCR,QAAQ,GAAGR,cAAc,CAACC,OAAO,EAAEC,OAAO,CAAC;cAE7Ce,IAAI,GAAG1E,MAAM,CAACqF,KAAK,IAAInG,EAAE,CAACoG,OAAO,CAAC,CAAC;cAAA,IAClCZ,IAAI;gBAAAS,QAAA,CAAArK,IAAA;gBAAA;cAAA;cAAAqK,QAAA,CAAArK,IAAA;cAAA,OACMyE,cAAc,CAACL,EAAE,CAACoG,OAAO,CAAC;YAAA;cAAvCZ,IAAI,GAAAS,QAAA,CAAA3K,IAAA;cAAA2K,QAAA,CAAArK,IAAA;cAAA;YAAA;cAAAqK,QAAA,CAAArK,IAAA;cAAA,OAGE,IAAI;YAAA;cAAA,KAGRmJ,QAAQ,CAACsB,SAAS,CAAC,CAAC;gBAAAJ,QAAA,CAAArK,IAAA;gBAAA;cAAA;cAAA,OAAAqK,QAAA,CAAAxK,MAAA;YAAA;cAIxB,IAAIgJ,OAAO,CAACnD,gBAAgB,IAAI0B,SAAS,GAAGK,WAAW,CAAC,EAAE;gBACxDiD,gBAAgB,CAACd,IAAI,EAAEzF,EAAE,CAAC0C,YAAY,CAAC;cACzC;cAEA,IAAIgC,OAAO,CAACnD,gBAAgB,GAAGmC,aAAa,EAAE;gBAC5C6C,gBAAgB,CAACd,IAAI,EAAEzF,EAAE,CAACuD,YAAY,CAAC;cACzC;cAAC,MAGCiC,WAAW,aAAXA,WAAW,eAAXA,WAAW,CAAEgB,WAAW,IACxB,CAAC9B,OAAO,CAAC+B,SAAS,IAClB,EAAE/B,OAAO,CAACnD,gBAAgB,GAAG0B,SAAS,CAAC;gBAAAiD,QAAA,CAAArK,IAAA;gBAAA;cAAA;cAAA,OAAAqK,QAAA,CAAAxK,MAAA;YAAA;cAKzC;cACA;cACA;cACA;cACA;cACA;cAEMgK,UAAU,GAAGtB,SAAS,CAACpE,EAAE,CAAC0C,YAAY,CAAC,CAAC2B,SAAS,CAACqC,WAAW,CAAC,CAAC;cACrE3E,eAAe,CAAC2D,UAAU,CAAC;cAACC,EAAA,MAAAC,IAAA,MAAA1D,MAAA,CAAAhE,kBAAA,CAGvB+B,EAAE,CAAC0G,gBAAgB,CAAClB,IAAI,EAAEf,OAAO,CAAC+B,SAAS,CAAC,GAAAvI,kBAAA,CAC3CuH,IAAI,CAACmB,OAAO,CAAClC,OAAO,CAAC+B,SAAS,CAAC,GAAG,CAAChB,IAAI,CAAC,GAAG,EAAE;YAAA;cAAA,MAAAE,EAAA,GAAAC,IAAA,CAAAlJ,MAAA;gBAAAwJ,QAAA,CAAArK,IAAA;gBAAA;cAAA;cAFxCgK,OAAO,GAAAD,IAAA,CAAAD,EAAA;cAIVG,aAAwC,GAAG;gBAC/CxE,OAAO,EAAEuE,OAAO;gBAChBtE,gBAAgB,EAAE0B,SAAS;gBAC3BzB,WAAW,EAAEvB,EAAE,CAACwB,MAAM,CAAC,CAAC;gBACxBC,QAAQ,EAAEzB,EAAE,CAAC4G,QAAQ,CAAChB,OAAO,CAAC;gBAC9BlE,YAAY,EAAE;cAChB,CAAC;cAEKoE,iBAAiB,GAAG1E,MAAM,CAACwD,GAAG,CAACgB,OAAO,CAAC;cACvCG,aAAa,GAAGc,gBAAgB,CACpChB,aAAa,EACbC,iBACF,CAAC;cAAA,KAEGC,aAAa;gBAAAE,QAAA,CAAArK,IAAA;gBAAA;cAAA;cAAA,KACXmI,mBAAmB,CAACgC,aAAa,CAAC;gBAAAE,QAAA,CAAArK,IAAA;gBAAA;cAAA;cACpCgF,KAAK,EAAEK,MAAM,aAANA,MAAM,eAANA,MAAM,CAAE+C,OAAO,CAAC,oBAAoB,EAAE+B,aAAa,CAAC;cAACE,QAAA,CAAArK,IAAA;cAAA;YAAA;cAE5DgF,KAAK,EAAEK,MAAM,aAANA,MAAM,eAANA,MAAM,CAAE6D,MAAM,CAAC,wBAAwB,EAAEiB,aAAa,CAAC;cAACE,QAAA,CAAArK,IAAA;cAAA,OACzDkL,cAAc,CAAC/B,QAAQ,EAAEgB,aAAa,CAAC;YAAA;cAAAL,EAAA;cAAAO,QAAA,CAAArK,IAAA;cAAA;YAAA;YAAA;cAAA,OAAAqK,QAAA,CAAAvI,IAAA;UAAA;QAAA,GAAA4H,OAAA;MAAA,CAIpD;MAAA,gBAxEKF,eAAeA,CAAA2B,EAAA,EAAAC,GAAA;QAAA,OAAA3B,IAAA,CAAAxG,KAAA,OAAAD,SAAA;MAAA;IAAA,GAwEpB;;IAED;;IAEA,IAAMqG,aAAa,GAAG,SAAhBA,aAAaA,CAAIT,OAA0B,EAAK;MACpDxE,EAAE,CAACiH,SAAS,CAACtF,YAAY,EAAE6C,OAAO,CAAC;MAEnC,IAAI0C,gBAAgB,GAAG,CAAC;MAAC,IAAAC,UAAA,GAAAnI,0BAAA,CACL2C,YAAY,CAACtH,MAAM,CAAC,CAAC;QAAA+M,MAAA;MAAA;QAAzC,KAAAD,UAAA,CAAAtN,CAAA,MAAAuN,MAAA,GAAAD,UAAA,CAAAnP,CAAA,IAAAkD,IAAA,GAA2C;UAAA,IAAhCmM,KAAK,GAAAD,MAAA,CAAAhP,KAAA;UACd8O,gBAAgB,IAAIG,KAAK,CAAClC,QAAQ,CAAC7D,gBAAgB;QACrD;MAAC,SAAA2B,GAAA;QAAAkE,UAAA,CAAAxP,CAAA,CAAAsL,GAAA;MAAA;QAAAkE,UAAA,CAAAvN,CAAA;MAAA;MAED,IAAI,EAAEsN,gBAAgB,IAAIlE,SAAS,GAAGK,WAAW,CAAC,CAAC,EAAE;QACnDiE,kBAAkB,CAACvH,EAAE,CAAC0C,YAAY,CAAC;MACrC;MAEA,IAAI,EAAEyE,gBAAgB,GAAGzD,aAAa,CAAC,EAAE;QACvC6D,kBAAkB,CAACvH,EAAE,CAACuD,YAAY,CAAC;MACrC;IACF,CAAC;;IAED;;IAEA,IAAMW,gBAAgB,GAAG,SAAnBA,gBAAgBA,CAAInB,SAAoC,EAAK;MACjElC,KAAK,EAAEK,MAAM,aAANA,MAAM,eAANA,MAAM,CAAE+C,OAAO,CAAC,sBAAsB,EAAElB,SAAS,CAAC;MAAC,IAAAyE,UAAA,GAAAvI,0BAAA,CAEtC2C,YAAY,CAACtH,MAAM,CAAC,CAAC;QAAAmN,MAAA;MAAA;QAAzC,KAAAD,UAAA,CAAA1N,CAAA,MAAA2N,MAAA,GAAAD,UAAA,CAAAvP,CAAA,IAAAkD,IAAA,GAA2C;UAAA,IAAhCmM,KAAK,GAAAG,MAAA,CAAApP,KAAA;UACd,IAAMqP,eAAe,GAAGJ,KAAK,CAAClC,QAAQ,CAAC7D,gBAAgB;UACvD,IAAMe,MAAM,GAAGgF,KAAK,CAAClC,QAAQ,CAAC9D,OAAO;UACrC,IAAMqG,QAAQ,GAAGL,KAAK,CAAClC,QAAQ,CAACqB,SAAS;UAEzC,IAAI,EAAE1D,SAAS,CAACxB,gBAAgB,GAAGmG,eAAe,CAAC,EAAE;YACnD7G,KAAK,EAAEK,MAAM,aAANA,MAAM,eAANA,MAAM,CAAE+C,OAAO,6BAAA/B,MAAA,CAA6BwF,eAAe,CAAE,CAAC;YACrE;UACF;UAEA,IAAME,cAAc,GAAG,EAAE;UACzB,IAAItF,MAAM,EAAE;YACV,IAAI,CAACS,SAAS,CAACzB,OAAO,CAACuG,QAAQ,CAACvF,MAAM,CAAC,EAAE;cACvCzB,KAAK,EAAEK,MAAM,aAANA,MAAM,eAANA,MAAM,CAAE+C,OAAO,CAAC,uBAAuB,EAAE3B,MAAM,CAAC;cACvD;YACF;YAEAsF,cAAc,CAACvL,IAAI,CAACiG,MAAM,CAAC;UAC7B;UAEA,IAAIqF,QAAQ,EAAE;YACZ,IAAMf,OAAO,GAAA1I,kBAAA,CAAO+B,EAAE,CAAC0G,gBAAgB,CAAC5D,SAAS,CAACzB,OAAO,EAAEqG,QAAQ,CAAC,CAAC;YAErE,IAAI5E,SAAS,CAACzB,OAAO,CAACsF,OAAO,CAACe,QAAQ,CAAC,EAAE;cACvCf,OAAO,CAACvK,IAAI,CAAC0G,SAAS,CAACzB,OAAO,CAAC;YACjC;YAEA,IAAI,CAACrB,EAAE,CAAC6H,QAAQ,CAAClB,OAAO,CAAC,EAAE;cACzB/F,KAAK,EAAEK,MAAM,aAANA,MAAM,eAANA,MAAM,CAAE+C,OAAO,6BAAA/B,MAAA,CAA6ByF,QAAQ,CAAE,CAAC;cAC9D;YACF;YAEAC,cAAc,CAACvL,IAAI,CAAAyC,KAAA,CAAnB8I,cAAc,EAAA1J,kBAAA,CAAS0I,OAAO,EAAC;UACjC;UAEAG,cAAc,CAACO,KAAK,CAACxC,SAAS,EAAE/B,SAAS,EAAE6E,cAAc,CAAC;QAC5D;MAAC,SAAA1E,GAAA;QAAAsE,UAAA,CAAA5P,CAAA,CAAAsL,GAAA;MAAA;QAAAsE,UAAA,CAAA3N,CAAA;MAAA;IACH,CAAC;;IAED;;IAEA,IAAM0M,gBAAgB,GAAG,SAAnBA,gBAAgBA,CAAId,IAAa,EAAEsC,YAA0B,EAAK;MACtE,IAAI,CAAC3D,SAAS,CAAC2D,YAAY,CAAC,CAACxD,SAAS,EAAE;QACtC1D,KAAK,EAAEK,MAAM,aAANA,MAAM,eAANA,MAAM,CAAE8G,MAAM,sCAAA9F,MAAA,CACkB6F,YAAY,MACnD,CAAC;QACD3D,SAAS,CAAC2D,YAAY,CAAC,CAAC1D,SAAS,CAAC4D,OAAO,CAACxC,IAAI,EAAA9F,eAAA,CAAAA,eAAA,KAC3CoI,YAAY,EAAG,IAAI,cACXhH,MAAM,CAACmH,QAAQ,CACzB,CAAC;QACF9D,SAAS,CAAC2D,YAAY,CAAC,CAACxD,SAAS,GAAG,IAAI;MAC1C;IACF,CAAC;;IAED;;IAEA,IAAMgD,kBAAkB,GAAG,SAArBA,kBAAkBA,CAAIQ,YAA0B,EAAK;MACzD,IAAI3D,SAAS,CAAC2D,YAAY,CAAC,CAACxD,SAAS,EAAE;QACrC1D,KAAK,EAAEK,MAAM,aAANA,MAAM,eAANA,MAAM,CAAE8G,MAAM,yCAAA9F,MAAA,CACqB6F,YAAY,MACtD,CAAC;QACD3D,SAAS,CAAC2D,YAAY,CAAC,CAAC1D,SAAS,CAAC8D,UAAU,CAAC,CAAC;QAC9C/D,SAAS,CAAC2D,YAAY,CAAC,CAACxD,SAAS,GAAG,KAAK;MAC3C;IACF,CAAC;;IAED;;IAEA,IAAMP,mBAAmB,GAAG,SAAtBA,mBAAmBA,CACvBjB,SAAoC,EACxB;MACZ,IAAMT,MAAM,GAAGS,SAAS,CAACzB,OAAO;MAChC,IAAM8G,aAAa,GAAGjI,aAAa,CAACmC,MAAM,CAAC;MAC3C,IAAI,CAAC8F,aAAa,EAAE;QAClB,OAAO,KAAK;MACd;MAEA,IAAMC,WAAW,GAAGtF,SAAS,CAACpB,YAAY;MAC1C,IAAM2G,OAAO,GAAGrI,EAAE,CAAC4G,QAAQ,CAACvE,MAAM,CAAC;MACnC,IAAMiG,WAAW,GAAGH,aAAa,CAAC5J,IAAI;MACtC,IAAMgK,SAAS,GAAGJ,aAAa,CAACK,EAAE;MAElC,IAAMhD,IAAI,GAAG1E,MAAM,CAACqF,KAAK,IAAInG,EAAE,CAACoG,OAAO,CAAC,CAAC;MACzC;MACA;MACA,IACE,CAACgC,WAAW,KAAKE,WAAW,IAAI,CAAC9C,IAAI,CAACoC,QAAQ,CAACU,WAAW,CAAC,KAC3DD,OAAO,KAAKE,SAAS,EACrB;QACApI,eAAe,CAACkC,MAAM,CAAC;QACvB,OAAO,IAAI;MACb;MAEA,OAAO,KAAK;IACd,CAAC;;IAED;;IAEA,IAAI,CAACjC,UAAU,GAAGA,UAAU;;IAE5B;;IAEA,IAAI,CAACqI,UAAU,GAAGrD,eAAe;;IAEjC;;IAEA,IAAI,CAACsD,WAAW,GAAG,UAAClE,OAAO,EAAK;MAAA,IAAAmE,kBAAA;MAC9B/H,KAAK,EAAEK,MAAM,aAANA,MAAM,eAANA,MAAM,CAAE6D,MAAM,CAAC,kBAAkB,CAAC;MACzC9E,EAAE,CAAC2E,MAAM,EAAAgE,kBAAA,GAAChH,YAAY,CAACiD,GAAG,CAACJ,OAAO,CAAC,cAAAmE,kBAAA,uBAAzBA,kBAAA,CAA2B9D,SAAS,CAAC;IACjD,CAAC;EACH;EAAC,OAAApF,YAAA,CAAAoB,UAAA;IAAArB,GAAA;IAAApH,KAAA;IAjWD;AACF;AACA;AACA;IACE,SAAOe,MAAMA,CAAA,EAAgC;MAAA,IAA/B2H,MAAwB,GAAAlC,SAAA,CAAAnC,MAAA,QAAAmC,SAAA,QAAAgK,SAAA,GAAAhK,SAAA,MAAG,CAAC,CAAC;MACzC,OAAO,IAAIiC,UAAU,CAACgI,SAAS,CAAC/H,MAAM,CAAC,EAAEC,eAAe,CAAC;IAC3D;;IAEA;AACF;AACA;AACA;AACA;AACA;AACA;EANE;IAAAvB,GAAA;IAAApH,KAAA,EAOA,SAAO0Q,KAAKA,CAAA,EAAgC;MAAA,IAAAC,cAAA;MAAA,IAA/BjI,MAAwB,GAAAlC,SAAA,CAAAnC,MAAA,QAAAmC,SAAA,QAAAgK,SAAA,GAAAhK,SAAA,MAAG,CAAC,CAAC;MACxC,IAAMoK,QAAQ,GAAGH,SAAS,CAAC/H,MAAM,CAAC;MAClC,IAAMmI,YAAY,GAAGzI,WAAW,CAACD,QAAQ,CAACyI,QAAQ,EAAE;QAAE7C,KAAK,EAAE;MAAK,CAAC,CAAC,CAAC;MAErE,IAAMX,IAAI,GAAGwD,QAAQ,CAAC7C,KAAK,KAAKnG,EAAE,CAACoG,OAAO,CAAC,CAAC,GAAG,IAAI,GAAG4C,QAAQ,CAAC7C,KAAK;MACpE,IAAI+C,QAAQ,IAAAH,cAAA,GAAGI,SAAS,CAACvE,GAAG,CAACY,IAAI,CAAC,cAAAuD,cAAA,uBAAnBA,cAAA,CAAqBnE,GAAG,CAACqE,YAAY,CAAC;MACrD,IAAI,CAACC,QAAQ,EAAE;QACbA,QAAQ,GAAG,IAAIrI,UAAU,CAACmI,QAAQ,EAAEjI,eAAe,CAAC;QACpDoI,SAAS,CAACpG,IAAI,CAACyC,IAAI,CAAC,CAACN,GAAG,CAAC+D,YAAY,EAAEC,QAAQ,CAAC;MAClD;MAEA,OAAOA,QAAQ;IACjB;EAAC;AAAA;;AAyUH;AACA;AACA;;AAqBA;AACA;AACA;;AAqGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAOA;;AA4BA,IAAMnI,eAA8B,GAAGhB,EAAE,CAACqJ,MAAM,CAAC,CAA2B;AAC5E,IAAMD,SAAS,GAAGxI,OAAO,CAA0C;EAAA,OACjEX,EAAE,CAAC4B,MAAM,CAAC,CAAC;AAAA,CACb,CAAC;AAED,IAAMiH,SAAS,GAAG,SAAZA,SAASA,CAAI/H,MAAwB,EAA+B;EAAA,IAAAuI,eAAA;EACxE,OAAO;IACLlD,KAAK,EAAErF,MAAM,CAAC0E,IAAI,IAAI,IAAI;IAC1ByC,QAAQ,GAAAoB,eAAA,GAAEvI,MAAM,CAACwI,OAAO,cAAAD,eAAA,cAAAA,eAAA,GAAI;EAC9B,CAAC;AACH,CAAC;AAED,IAAME,eAAe,GAAGtJ,oBAAoB,CAACuJ,GAAG;AAChD,IAAMxG,SAAS,GAAGuG,eAAe,CAACxJ,EAAE,CAAC0J,OAAO,CAAC;AAC7C,IAAMpG,WAAW,GAAGkG,eAAe,CAACxJ,EAAE,CAAC2J,SAAS,CAAC;AACjD,IAAMjG,aAAa,GAAG8F,eAAe,CAACxJ,EAAE,CAAC4J,WAAW,CAAC;;AAErD;;AAEA,IAAMzD,UAAU,GAAG,SAAbA,UAAUA,CAAIzB,OAA0B,EAAgC;EAC5E,IAAIgD,eAAe,GAAG,CAAC;EACvB,IAAMmC,UAAU,GAAGnJ,eAAe,CAChC,YAAY,EACZgE,OAAO,CAACmF,UAAU,EAClB3J,oBAAoB,CAAC4J,GACvB,CAAC;EAED,IAAID,UAAU,EAAE;IAAA,IAAAE,UAAA,GAAA9K,0BAAA,CACI4K,UAAU;MAAAG,MAAA;IAAA;MAA5B,KAAAD,UAAA,CAAAjQ,CAAA,MAAAkQ,MAAA,GAAAD,UAAA,CAAA9R,CAAA,IAAAkD,IAAA,GAA8B;QAAA,IAAnB8O,GAAG,GAAAD,MAAA,CAAA3R,KAAA;QACZqP,eAAe,IAAI8B,eAAe,CAACS,GAAG,CAAC;MACzC;IAAC,SAAA/G,GAAA;MAAA6G,UAAA,CAAAnS,CAAA,CAAAsL,GAAA;IAAA;MAAA6G,UAAA,CAAAlQ,CAAA;IAAA;EACH,CAAC,MAAM;IACL6N,eAAe,GAAGxH,oBAAoB,CAACgK,OAAO,CAAC,CAAC;EAClD;EAEA,IAAMvC,QAAQ,GAAGjD,OAAO,CAACiD,QAAQ,IAAI,EAAE;EACvC,IAAI,CAAC1H,EAAE,CAACkK,QAAQ,CAACxC,QAAQ,CAAC,EAAE;IAC1B,MAAM1H,EAAE,CAACmK,UAAU,CAAC,6BAA6B,CAAC;EACpD;EAEA,OAAO;IACL7I,gBAAgB,EAAEmG,eAAe;IACjCpG,OAAO,EAAEoD,OAAO,CAACpC,MAAM,IAAI,IAAI;IAC/BmE,SAAS,EAAE/B,OAAO,CAACiD,QAAQ,IAAI;EACjC,CAAC;AACH,CAAC;AAED,IAAMb,gBAAgB,GAAG,SAAnBA,gBAAgBA,CACpBuD,UAAqC,EACrCC,UAAiD,EACZ;EACrC,IAAI,CAACA,UAAU,IAAID,UAAU,CAAC/I,OAAO,KAAKgJ,UAAU,CAAChJ,OAAO,EAAE;IAC5D,OAAO+I,UAAU;EACnB;EAEA,IAAME,UAAU,GAAGtK,EAAE,CAACwB,MAAM,CAAS,CAAC;EAAC,IAAA+I,UAAA,GAAAvL,0BAAA,CACpBoL,UAAU,CAAC7I,WAAW;IAAAiJ,MAAA;EAAA;IAAzC,KAAAD,UAAA,CAAA1Q,CAAA,MAAA2Q,MAAA,GAAAD,UAAA,CAAAvS,CAAA,IAAAkD,IAAA,GAA2C;MAAA,IAAhCuP,IAAI,GAAAD,MAAA,CAAApS,KAAA;MACb,IAAI,CAACiS,UAAU,CAAC9I,WAAW,CAACsI,GAAG,CAACY,IAAI,CAAC,EAAE;QACrCH,UAAU,CAAC9G,GAAG,CAACiH,IAAI,CAAC;MACtB;IACF;EAAC,SAAAxH,GAAA;IAAAsH,UAAA,CAAA5S,CAAA,CAAAsL,GAAA;EAAA;IAAAsH,UAAA,CAAA3Q,CAAA;EAAA;EAED,IAAM6N,eAAe,GACnB2C,UAAU,CAAC9I,gBAAgB,GAAG+I,UAAU,CAAC/I,gBAAgB;EAE3D,IAAM+G,OAAO,GACX+B,UAAU,CAAC3I,QAAQ,KAAK4I,UAAU,CAAC5I,QAAQ,GAAG,IAAI,GAAG2I,UAAU,CAAC3I,QAAQ;EAE1E,IAAM2G,WAAW,GACfgC,UAAU,CAAC1I,YAAY,KAAK2I,UAAU,CAAC3I,YAAY,GAC/C,IAAI,GACJ0I,UAAU,CAAC1I,YAAY;EAE7B,IAAI,CAAC1B,EAAE,CAAC0D,MAAM,CAAC4G,UAAU,CAAC,IAAI,CAAC7C,eAAe,IAAI,CAACY,OAAO,IAAI,CAACD,WAAW,EAAE;IAC1E,OAAO,IAAI;EACb;EAEA,OAAO;IACL/G,OAAO,EAAE+I,UAAU,CAAC/I,OAAO;IAC3BC,gBAAgB,EAAEmG,eAAe;IACjClG,WAAW,EAAE+I,UAAU;IACvB7I,QAAQ,EAAE4G,OAAO;IACjB3G,YAAY,EAAE0G;EAChB,CAAC;AACH,CAAC;AAED,IAAMtB,cAAc,GAAG,SAAjBA,cAAcA,CAClB/B,QAA4B,EAC5BjC,SAAoC,EAEjC;EAAA,IADH6E,cAAyB,GAAA/I,SAAA,CAAAnC,MAAA,QAAAmC,SAAA,QAAAgK,SAAA,GAAAhK,SAAA,MAAG,EAAE;EAE9B,IAAI,CAACoB,EAAE,CAAC6H,QAAQ,CAACF,cAAc,CAAC,EAAE;IAChCA,cAAc,GAAG,CAAC7E,SAAS,CAACzB,OAAO,CAAC;EACtC;EAAC,IAAAqJ,UAAA,GAAA1L,0BAAA,CAE2B2I,cAAc;IAAAgD,MAAA;EAAA;IAA1C,KAAAD,UAAA,CAAA7Q,CAAA,MAAA8Q,MAAA,GAAAD,UAAA,CAAA1S,CAAA,IAAAkD,IAAA,GAA4C;MAAA,IAAjC0P,aAAa,GAAAD,MAAA,CAAAvS,KAAA;MACtB2M,QAAQ,CACLpK,MAAM,CAAC;QACN0H,MAAM,EAAES,SAAS,CAACzB,OAAO;QACzBuJ,aAAa,EAAbA,aAAa;QACbN,UAAU,EAAExH,SAAS,CAACvB,WAAW;QACjC8G,OAAO,EAAEvF,SAAS,CAACrB,QAAQ;QAC3B2G,WAAW,EAAEtF,SAAS,CAACpB;MACzB,CAAC,CAAC,SACI,CAACpB,QAAQ,CAAC;IACpB;EAAC,SAAA2C,GAAA;IAAAyH,UAAA,CAAA/S,CAAA,CAAAsL,GAAA;EAAA;IAAAyH,UAAA,CAAA9Q,CAAA;EAAA;AACH,CAAC","ignoreList":[]}