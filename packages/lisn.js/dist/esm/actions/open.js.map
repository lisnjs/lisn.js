{"version":3,"file":"open.js","names":["MC","Openable","fetchUniqueWidget","registerAction","Open","element","_classCallCheck","_defineProperty","open","widget","close","toggle","widgetPromise","then","undo","S_TOGGLE","_createClass","key","value","register"],"sources":["../../../src/ts/actions/open.ts"],"sourcesContent":["/**\n * @module Actions\n *\n * @categoryDescription Controlling openables\n * {@link Open} opens or closes the {@link Openable} widget setup for the given\n * element.\n */\n\nimport * as MC from \"@lisn/globals/minification-constants\";\n\nimport { Openable } from \"@lisn/widgets/openable\";\nimport { fetchUniqueWidget } from \"@lisn/widgets/widget\";\n\nimport { Action, registerAction } from \"@lisn/actions/action\";\n\n/**\n * Opens or closes the {@link Openable} widget setup for the given element.\n *\n * -------\n *\n * To use with auto-widgets (HTML API) as part of a trigger specification:\n * - Action name: \"open\".\n * - Accepted string arguments: none\n * - Accepted options: none\n *\n * @example\n * ```html\n * <div class=\"lisn-modal\" data-lisn-on-view=\"@open +reference=top:50%\"></div>\n * ```\n *\n * @category Controlling openables\n */\nexport class Open implements Action {\n  /**\n   * Opens the Openable widget setup for the element.\n   */\n  readonly do: () => Promise<void>;\n\n  /**\n   * Closes the Openable widget setup for the element.\n   */\n  readonly undo: () => Promise<void>;\n\n  /**\n   * Toggles the Openable widget setup for the element.\n   */\n  readonly toggle: () => Promise<void>;\n\n  static register() {\n    registerAction(\"open\", (element) => new Open(element));\n  }\n\n  constructor(element: Element) {\n    const open = (widget: Openable | null) => widget?.open();\n    const close = (widget: Openable | null) => widget?.close();\n    const toggle = (widget: Openable | null) => widget?.toggle();\n\n    const widgetPromise = fetchUniqueWidget(\"openable\", element, Openable);\n\n    this.do = () => widgetPromise.then(open);\n    this.undo = () => widgetPromise.then(close);\n    this[MC.S_TOGGLE] = () => widgetPromise.then(toggle);\n  }\n}\n"],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,KAAKA,EAAE;AAEd,SAASC,QAAQ;AACjB,SAASC,iBAAiB;AAE1B,SAAiBC,cAAc;;AAE/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAaC,IAAI;EAoBf,SAAAA,KAAYC,OAAgB,EAAE;IAAAC,eAAA,OAAAF,IAAA;IAnB9B;AACF;AACA;IAFEG,eAAA;IAKA;AACF;AACA;IAFEA,eAAA;IAKA;AACF;AACA;IAFEA,eAAA;IAUE,IAAMC,IAAI,GAAG,SAAPA,IAAIA,CAAIC,MAAuB;MAAA,OAAKA,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAED,IAAI,CAAC,CAAC;IAAA;IACxD,IAAME,KAAK,GAAG,SAARA,KAAKA,CAAID,MAAuB;MAAA,OAAKA,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEC,KAAK,CAAC,CAAC;IAAA;IAC1D,IAAMC,MAAM,GAAG,SAATA,MAAMA,CAAIF,MAAuB;MAAA,OAAKA,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEE,MAAM,CAAC,CAAC;IAAA;IAE5D,IAAMC,aAAa,GAAGV,iBAAiB,CAAC,UAAU,EAAEG,OAAO,EAAEJ,QAAQ,CAAC;IAEtE,IAAI,MAAG,GAAG;MAAA,OAAMW,aAAa,CAACC,IAAI,CAACL,IAAI,CAAC;IAAA;IACxC,IAAI,CAACM,IAAI,GAAG;MAAA,OAAMF,aAAa,CAACC,IAAI,CAACH,KAAK,CAAC;IAAA;IAC3C,IAAI,CAACV,EAAE,CAACe,QAAQ,CAAC,GAAG;MAAA,OAAMH,aAAa,CAACC,IAAI,CAACF,MAAM,CAAC;IAAA;EACtD;EAAC,OAAAK,YAAA,CAAAZ,IAAA;IAAAa,GAAA;IAAAC,KAAA,EAdD,SAAOC,QAAQA,CAAA,EAAG;MAChBhB,cAAc,CAAC,MAAM,EAAE,UAACE,OAAO;QAAA,OAAK,IAAID,IAAI,CAACC,OAAO,CAAC;MAAA,EAAC;IACxD;EAAC;AAAA","ignoreList":[]}