{"version":3,"file":"gesture-watcher.cjs","names":["MC","_interopRequireWildcard","require","MH","_cssAlter","_directions","_event2","_tasks","_gesture","_gestureKey","_gesturePointer","_gestureTouch","_gestureWheel","_log","_math","_text","_validation","_callback2","_xMap","_debug","_interopRequireDefault","e","__esModule","_getRequireWildcardCache","WeakMap","r","t","_typeof","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","o","Symbol","iterator","constructor","prototype","_regeneratorRuntime","value","c","asyncIterator","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","name","mark","setPrototypeOf","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","_catch","delegateYield","_createForOfIteratorHelper","Array","isArray","_unsupportedIterableToArray","_n","F","_arrayLikeToArray","toString","from","test","asyncGeneratorStep","_asyncToGenerator","arguments","apply","_next","_throw","_classCallCheck","_defineProperties","_toPropertyKey","key","_createClass","_defineProperty","_toPrimitive","toPrimitive","String","Number","GestureWatcher","exports","config","_this","CONSTRUCTOR_KEY","illegalConstructorError","logger","debug","Logger","logAtCreation","allCallbacks","newXWeakMap","newMap","allListeners","createCallback","target","handler","options","_allCallbacks$get","remove","_callback","debug5","_getCallbackAndWrappe","getCallbackAndWrapper","_wrapper","onRemove","deleteHandler","sGet","_options","setupOnGesture","_ref","_callee","userOptions","_iterator","_step","_allListeners$get","device","listeners","_callee$","_context","getOptions","_devices","DEVICES","debug4","concat","setupListeners","_nCallbacks","_preventDefault","_nPreventDefault","err","_x","_x2","_x3","deleteKey","prune","_iterator2","_step2","_allListeners$get2","_remove","invokeCallbacks","event","_allListeners$get3","_allCallbacks$get2","preventDefault","isTerminated","_iterator3","_step3","intents","_intents","hasAddedTabIndex","hasPreventedSelect","S_KEY","isElement","getTabIndex","setTabIndex","S_TOUCH","addClasses","PREFIX_NO_TOUCH_ACTION","includes","S_DRAG","preventSelect","addOrRemoveListeners","action","listener","eventTypes","addEventListenerTo","removeEventListenerFrom","_iterator4","_step4","eventType","debug8","passive","capture","addInitialListener","initialListener","initiatingEvents","removeInitialListener","addOngoingListener","processEvent","ongoingEvents","removeOngoingListener","unsetTabIndex","removeClasses","undoPreventSelect","trackGesture","element","setGestureCssProps","_iterator5","INTENTS","_step5","intent","totalDeltaX","totalDeltaY","totalDeltaZ","noTrackGesture","_iterator6","_step6","offGesture","onGesture","_allCallbacks$get3","undefined","getConfig","reuse","myConfig","configStrKey","objToStrKey","instance","instances","SYMBOL","_config$preventDefaul","_config$naturalTouchS","_config$touchDragHold","_config$touchDragNumF","_debounceWindow","toNonNegNum","S_DEBOUNCE_WINDOW","_deltaThreshold","deltaThreshold","_angleDiffThreshold","toPosNum","angleDiffThreshold","_naturalTouchScroll","naturalTouchScroll","_touchDragHoldTime","touchDragHoldTime","_touchDragNumFingers","touchDragNumFingers","S_KEYDOWN","pointer","S_POINTERDOWN","S_CLICK","touch","S_TOUCHSTART","wheel","S_WHEEL","S_POINTERUP","S_POINTERMOVE","S_POINTERCANCEL","S_TOUCHEND","S_TOUCHMOVE","S_TOUCHCANCEL","fragmentGetters","getKeyGestureFragment","S_POINTER","getPointerGestureFragment","getTouchGestureFragment","getWheelGestureFragment","_options$minTotalDelt","_options$maxTotalDelt","_options$minTotalDelt2","_options$maxTotalDelt2","_options$minTotalDelt3","_options$maxTotalDelt3","_options$preventDefau","_options$naturalTouch","_options$touchDragHol","_options$touchDragNum","debounceWindow","validateStrList","devices","isValidInputDevice","directions","isValidDirection","isValidIntent","_minTotalDeltaX","minTotalDeltaX","_maxTotalDeltaX","maxTotalDeltaX","_minTotalDeltaY","minTotalDeltaY","_maxTotalDeltaY","maxTotalDeltaY","_minTotalDeltaZ","minTotalDeltaZ","_maxTotalDeltaZ","maxTotalDeltaZ","preventNextClick","reverseScroll","dragHoldTime","dragNumFingers","eventQueue","id","randId","callback","wrapCallback","debouncedWrapper","getDebouncedHandler","fragment","eventQueueCopy","_eventQueueCopy","_eventQueueCopy$","isRemoved","deltaX","deltaY","deltaZ","round","maxAbs","debug7","debug9","clearEventQueue","newTotalDeltaX","toNumWithBounds","min","max","newTotalDeltaY","newTotalDeltaZ","addDeltaZ","direction","time","lengthOf","timeStamp","data","S_NONE","logError","wrapper","map","preventDefaultActionFor","setTimer","queue","keepLastEvent","splice","isActualGesture","currentTarget","isPointerDown","S_MOUSEDOWN","buttons","isHTMLElement","focus","preventScroll","S_UNKNOWN","prefix","S_ZOOM","setNumericStyleProps","_prefix","_numDecimal"],"sources":["../../../src/ts/watchers/gesture-watcher.ts"],"sourcesContent":["/**\n * @module Watchers/GestureWatcher\n */\n\nimport * as MC from \"@lisn/globals/minification-constants\";\nimport * as MH from \"@lisn/globals/minification-helpers\";\n\nimport {\n  Direction,\n  GestureIntent,\n  GestureDevice,\n  CommaSeparatedStr,\n} from \"@lisn/globals/types\";\n\nimport {\n  addClasses,\n  removeClasses,\n  setNumericStyleProps,\n} from \"@lisn/utils/css-alter\";\nimport { isValidDirection } from \"@lisn/utils/directions\";\nimport {\n  addEventListenerTo,\n  removeEventListenerFrom,\n  preventSelect,\n  undoPreventSelect,\n} from \"@lisn/utils/event\";\nimport { getDebouncedHandler } from \"@lisn/utils/tasks\";\n\nimport { addDeltaZ } from \"@lisn/utils/gesture\";\n\nimport {\n  isValidInputDevice,\n  isValidIntent,\n  GestureFragment,\n  DEVICES,\n  INTENTS,\n} from \"@lisn/utils/gesture\";\nimport { getKeyGestureFragment } from \"@lisn/utils/gesture-key\";\nimport { getPointerGestureFragment } from \"@lisn/utils/gesture-pointer\";\nimport { getTouchGestureFragment } from \"@lisn/utils/gesture-touch\";\nimport { getWheelGestureFragment } from \"@lisn/utils/gesture-wheel\";\nimport { logError } from \"@lisn/utils/log\";\nimport {\n  maxAbs,\n  toNonNegNum,\n  toPosNum,\n  toNumWithBounds,\n} from \"@lisn/utils/math\";\nimport { randId, objToStrKey } from \"@lisn/utils/text\";\nimport { validateStrList } from \"@lisn/utils/validation\";\n\nimport {\n  CallbackHandler,\n  Callback,\n  wrapCallback,\n} from \"@lisn/modules/callback\";\nimport { newXWeakMap } from \"@lisn/modules/x-map\";\n\nimport { LoggerInterface } from \"@lisn/debug/types\";\nimport debug from \"@lisn/debug/debug\";\n\n/**\n * {@link GestureWatcher} listens for user gestures resulting from wheel,\n * pointer, touch or key input events.\n *\n * It supports scroll, zoom or drag type gestures.\n *\n * It manages registered callbacks globally and reuses event listeners for more\n * efficient performance.\n */\nexport class GestureWatcher {\n  /**\n   * Call the given handler whenever the user performs a gesture on the target\n   * matching the given options.\n   *\n   * **IMPORTANT:** The same handler can _not_ be added multiple times for the\n   * same event target, even if the options differ. If the handler has already\n   * been added for this target, either using {@link onGesture} or\n   * {@link trackGesture}, then it will be removed and re-added with the\n   * current options.\n   *\n   * @throws {@link Errors.LisnUsageError | LisnUsageError}\n   *                If the options are invalid.\n   */\n  readonly onGesture: (\n    target: EventTarget,\n    handler: OnGestureHandler,\n    options?: OnGestureOptions,\n  ) => Promise<void>;\n\n  /**\n   * Removes a previously added handler.\n   */\n  readonly offGesture: (target: EventTarget, handler: OnGestureHandler) => void;\n\n  /**\n   * This is the same as {@link onGesture} except that if `handler` is not\n   * given, then it defaults to an internal handler that updates a set of CSS\n   * variables on the target's style:\n   *\n   *   - `--lisn-js--<Intent>-delta-x`\n   *   - `--lisn-js--<Intent>-delta-y`\n   *   - `--lisn-js--<Intent>-delta-z`\n   *\n   * where and `<Intent>` is one of {@link GestureIntent} and the delta X, Y\n   * and Z are the _total summed up_ `deltaX`, `deltaY` and `deltaZ` since the\n   * callback was added, summed over all devices used (key, touch, etc).\n   *\n   * **IMPORTANT:** The same handler can _not_ be added multiple times for the\n   * same target, even if the options differ. If the handler has already been\n   * added for this target, either using {@link trackGesture} or using\n   * {@link onGesture}, then it will be removed and re-added with the current\n   * options.\n   *\n   * @throws {@link Errors.LisnUsageError | LisnUsageError}\n   *                If the options are invalid.\n   */\n  readonly trackGesture: (\n    element: Element,\n    handler?: OnGestureHandler | null,\n    options?: OnGestureOptions,\n  ) => Promise<void>;\n\n  /**\n   * Removes a previously added handler for {@link trackGesture}.\n   */\n  readonly noTrackGesture: (\n    element: Element,\n    handler?: OnGestureHandler | null,\n  ) => void;\n\n  /**\n   * Creates a new instance of GestureWatcher with the given\n   * {@link GestureWatcherConfig}. It does not save it for future reuse.\n   */\n  static create(config: GestureWatcherConfig = {}) {\n    return new GestureWatcher(getConfig(config), CONSTRUCTOR_KEY);\n  }\n\n  /**\n   * Returns an existing instance of GestureWatcher with the given\n   * {@link GestureWatcherConfig}, or creates a new one.\n   *\n   * **NOTE:** It saves it for future reuse, so don't use this for temporary\n   * short-lived watchers.\n   */\n  static reuse(config: GestureWatcherConfig = {}) {\n    const myConfig = getConfig(config);\n    const configStrKey = objToStrKey(myConfig);\n\n    let instance = instances.get(configStrKey);\n    if (!instance) {\n      instance = new GestureWatcher(myConfig, CONSTRUCTOR_KEY);\n      instances.set(configStrKey, instance);\n    }\n\n    return instance;\n  }\n\n  private constructor(\n    config: GestureWatcherConfigInternal,\n    key: typeof CONSTRUCTOR_KEY,\n  ) {\n    if (key !== CONSTRUCTOR_KEY) {\n      throw MH.illegalConstructorError(\"GestureWatcher.create\");\n    }\n\n    const logger = debug\n      ? new debug.Logger({ name: \"GestureWatcher\", logAtCreation: config })\n      : null;\n\n    const allCallbacks = newXWeakMap<\n      EventTarget,\n      Map<\n        OnGestureHandler,\n        {\n          _callback: OnGestureCallback;\n          _wrapper: OnGestureHandlerWrapper;\n          _options: OnGestureOptionsInternal;\n        }\n      >\n    >(() => MH.newMap());\n\n    // For each target and event type, add only 1 global listener that will then\n    // manage the event queues and callbacks.\n    const allListeners = newXWeakMap<\n      EventTarget,\n      Map<GestureDevice, DeviceListeners>\n    >(() => MH.newMap());\n\n    // ----------\n\n    const createCallback = (\n      target: EventTarget,\n      handler: OnGestureHandler,\n      options: OnGestureOptionsInternal,\n    ): OnGestureCallback => {\n      MH.remove(allCallbacks.get(target)?.get(handler)?._callback);\n\n      debug: logger?.debug5(\"Adding/updating handler for\", options);\n      const { _callback, _wrapper } = getCallbackAndWrapper(\n        handler,\n        options,\n        logger,\n      );\n\n      _callback.onRemove(() => deleteHandler(target, handler, options));\n\n      allCallbacks.sGet(target).set(handler, {\n        _callback,\n        _wrapper,\n        _options: options,\n      });\n\n      return _callback;\n    };\n\n    // ----------\n\n    // async for consistency with other watchers and future compatibility in\n    // case of change needed\n    const setupOnGesture = async (\n      target: EventTarget,\n      handler: OnGestureHandler,\n      userOptions: OnGestureOptions | undefined,\n    ) => {\n      const options = getOptions(config, userOptions || {});\n      createCallback(target, handler, options);\n\n      for (const device of options._devices || DEVICES) {\n        let listeners = allListeners.get(target)?.get(device);\n        if (listeners) {\n          debug: logger?.debug4(\n            `Listeners already added for ${device}`,\n            target,\n            options,\n          );\n        } else {\n          debug: logger?.debug4(\n            `Adding listeners for ${device}`,\n            target,\n            options,\n          );\n\n          listeners = setupListeners(target, device, options);\n          allListeners.sGet(target).set(device, listeners);\n        }\n\n        listeners._nCallbacks++;\n        if (options._preventDefault) {\n          listeners._nPreventDefault++;\n        }\n      }\n    };\n\n    // ----------\n\n    const deleteHandler = (\n      target: EventTarget,\n      handler: OnGestureHandler,\n      options: OnGestureOptionsInternal,\n    ) => {\n      MH.deleteKey(allCallbacks.get(target), handler);\n      allCallbacks.prune(target);\n\n      for (const device of options._devices || DEVICES) {\n        const listeners = allListeners.get(target)?.get(device);\n        if (listeners) {\n          listeners._nCallbacks--;\n          if (options._preventDefault) {\n            listeners._nPreventDefault--;\n          }\n\n          if (!listeners._nCallbacks) {\n            debug: logger?.debug4(\n              `No more callbacks for target and device ${device}; removing listeners`,\n              target,\n            );\n\n            MH.deleteKey(allListeners.get(target), device);\n            listeners._remove();\n          }\n        }\n      }\n    };\n\n    // ----------\n\n    const invokeCallbacks = (\n      target: EventTarget,\n      device: GestureDevice,\n      event: Event,\n    ): boolean /* true if terminated */ => {\n      const preventDefault =\n        (allListeners.get(target)?.get(device)?._nPreventDefault || 0) > 0;\n\n      let isTerminated = false;\n      for (const { _wrapper } of allCallbacks.get(target)?.values() || []) {\n        isTerminated =\n          _wrapper(target, device, event, preventDefault) || isTerminated;\n      }\n\n      return isTerminated;\n    };\n\n    // ----------\n\n    const setupListeners = (\n      target: EventTarget,\n      device: GestureDevice,\n      options: OnGestureOptionsInternal,\n    ): DeviceListeners => {\n      const intents = options._intents;\n      let hasAddedTabIndex = false;\n      let hasPreventedSelect = false;\n\n      if (\n        device === MC.S_KEY &&\n        MH.isElement(target) &&\n        !MH.getTabIndex(target)\n      ) {\n        hasAddedTabIndex = true;\n        // enable element to receive keydown events\n        MH.setTabIndex(target);\n      } else if (MH.isElement(target) && device === MC.S_TOUCH) {\n        if (options._preventDefault) {\n          addClasses(target, MC.PREFIX_NO_TOUCH_ACTION);\n        }\n\n        if (!intents || MH.includes(intents, MC.S_DRAG)) {\n          hasPreventedSelect = true;\n          preventSelect(target);\n        }\n      }\n\n      const addOrRemoveListeners = (\n        action: \"add\" | \"remove\",\n        listener: EventListener,\n        eventTypes: readonly (keyof GlobalEventHandlersEventMap)[],\n      ) => {\n        const method =\n          action === \"add\" ? addEventListenerTo : removeEventListenerFrom;\n        for (const eventType of eventTypes) {\n          debug: logger?.debug8(`${action} listener for ${eventType}`, target);\n          method(target, eventType, listener, {\n            passive: false,\n            capture: true,\n          });\n        }\n      };\n\n      const addInitialListener = () =>\n        addOrRemoveListeners(\"add\", initialListener, initiatingEvents[device]);\n\n      const removeInitialListener = () =>\n        addOrRemoveListeners(\n          \"remove\",\n          initialListener,\n          initiatingEvents[device],\n        );\n\n      const addOngoingListener = () =>\n        addOrRemoveListeners(\"add\", processEvent, ongoingEvents[device]);\n\n      const removeOngoingListener = () =>\n        addOrRemoveListeners(\"remove\", processEvent, ongoingEvents[device]);\n\n      const initialListener = (event: Event) => {\n        processEvent(event);\n        removeInitialListener();\n        addOngoingListener();\n      };\n\n      const processEvent = (event: Event) => {\n        const isTerminated = invokeCallbacks(target, device, event);\n        if (isTerminated) {\n          removeOngoingListener();\n          addInitialListener();\n        }\n      };\n\n      addInitialListener();\n\n      return {\n        _nCallbacks: 0,\n        _nPreventDefault: 0,\n        _remove: () => {\n          if (MH.isElement(target)) {\n            if (hasAddedTabIndex) {\n              MH.unsetTabIndex(target);\n            }\n\n            removeClasses(target, MC.PREFIX_NO_TOUCH_ACTION);\n\n            if (hasPreventedSelect) {\n              undoPreventSelect(target);\n            }\n          }\n\n          removeOngoingListener();\n          removeInitialListener();\n        },\n      };\n    };\n\n    // ----------\n\n    this.trackGesture = (element, handler?, options?) => {\n      if (!handler) {\n        handler = setGestureCssProps;\n        // initial values\n        for (const intent of INTENTS) {\n          setGestureCssProps(element, {\n            intent,\n            totalDeltaX: 0,\n            totalDeltaY: 0,\n            totalDeltaZ: 1,\n          });\n        }\n      }\n\n      return setupOnGesture(element, handler, options);\n    };\n\n    // ----------\n\n    this.noTrackGesture = (element, handler?) => {\n      if (!handler) {\n        handler = setGestureCssProps;\n\n        // delete the properties\n        for (const intent of INTENTS) {\n          setGestureCssProps(element, { intent });\n        }\n      }\n\n      this.offGesture(element, handler);\n    };\n\n    // ----------\n\n    this.onGesture = setupOnGesture;\n\n    // ----------\n\n    this.offGesture = (target, handler) => {\n      debug: logger?.debug5(\"Removing handler\");\n      MH.remove(allCallbacks.get(target)?.get(handler)?._callback);\n    };\n  }\n}\n\n/**\n * @interface\n */\nexport type GestureWatcherConfig = {\n  /**\n   * The default value for\n   * {@link OnGestureOptions.preventDefault | preventDefault} in calls to\n   * {@link GestureWatcher.onGesture}.\n   *\n   * @defaultValue true\n   */\n  preventDefault?: boolean;\n\n  /**\n   * The default value for\n   * {@link OnGestureOptions.debounceWindow | debounceWindow} in calls to\n   * {@link GestureWatcher.onGesture}.\n   *\n   * @defaultValue 150\n   */\n  debounceWindow?: number;\n\n  /**\n   * The default value for\n   * {@link OnGestureOptions.deltaThreshold | deltaThreshold} in calls to\n   * {@link GestureWatcher.onGesture}.\n   *\n   * @defaultValue 5\n   */\n  deltaThreshold?: number;\n\n  /**\n   * The default value for\n   * {@link OnGestureOptions.angleDiffThreshold | angleDiffThreshold} in calls to\n   * {@link GestureWatcher.onGesture}.\n   *\n   * It does not make much sense to set this to 0.\n   *\n   * The value is in _degrees_, not radians.\n   *\n   * @defaultValue 35\n   */\n  angleDiffThreshold?: number;\n\n  /**\n   * The default value for\n   * {@link OnGestureOptions.naturalTouchScroll | naturalTouchScroll} in calls to\n   * {@link GestureWatcher.onGesture}.\n   *\n   * @defaultValue true\n   */\n  naturalTouchScroll?: boolean;\n\n  /**\n   * The default value for\n   * {@link OnGestureOptions.touchDragHoldTime | touchDragHoldTime} in calls to\n   * {@link GestureWatcher.onGesture}.\n   *\n   * @defaultValue 500\n   */\n  touchDragHoldTime?: number;\n\n  /**\n   * The default value for\n   * {@link OnGestureOptions.touchDragNumFingers | touchDragNumFingers} in calls to\n   * {@link GestureWatcher.onGesture}.\n   *\n   * @defaultValue 1\n   */\n  touchDragNumFingers?: number;\n};\n\n/**\n * @interface\n */\nexport type OnGestureOptions = {\n  /**\n   * One or more device types to listen for. If not specified, then all devices\n   * are enabled.\n   *\n   * It can be a comma-separated list of {@link GestureDevice}s or an array of\n   * such devices.\n   *\n   * @defaultValue undefined\n   */\n  devices?: CommaSeparatedStr<GestureDevice> | GestureDevice[];\n\n  /**\n   * If given, callback will only be called if the gesture's direction is one\n   * of the given ones.\n   *\n   * It can be a comma-separated list of {@link Direction}s or an array of such\n   * directions.\n   *\n   * @defaultValue undefined\n   */\n  directions?: CommaSeparatedStr<Direction> | Direction[];\n\n  /**\n   * If given, callback will only be called if the gesture's intent is one\n   * of the given ones.\n   *\n   * It can be a comma-separated list of {@link GestureIntent}s or an\n   * array of such intents.\n   *\n   * @defaultValue undefined\n   */\n  intents?: CommaSeparatedStr<GestureIntent> | GestureIntent[];\n\n  /**\n   * Set minimum total delta X. Further reductions in delta X below this value\n   * will be ignored.\n   *\n   * The value is in pixels and can be negative.\n   *\n   * @defaultValue undefined\n   */\n  minTotalDeltaX?: number;\n\n  /**\n   * Set maximum total delta X. Further increase in delta X above this value\n   * will be ignored.\n   *\n   * The value is in pixels.\n   *\n   * @defaultValue undefined\n   */\n  maxTotalDeltaX?: number;\n\n  /**\n   * Set minimum total delta Y. Further reductions in delta Y below this value\n   * will be ignored.\n   *\n   * The value is in pixels and can be negative.\n   *\n   * @defaultValue undefined\n   */\n  minTotalDeltaY?: number;\n\n  /**\n   * Set maximum total delta Y. Further increase in delta Y above this value\n   * will be ignored.\n   *\n   * The value is in pixels.\n   *\n   * @defaultValue undefined\n   */\n  maxTotalDeltaY?: number;\n\n  /**\n   * Set minimum total delta Z. Further reductions in delta Z below this value\n   * will be ignored.\n   *\n   * The value is in percentage zoom, relative to 1, and can be less than 1 but\n   * must be > 0.1 which is a hard minimum.\n   *\n   * @defaultValue undefined\n   */\n  minTotalDeltaZ?: number;\n\n  /**\n   * Set maximum total delta Z. Further increase in delta Z above this value\n   * will be ignored.\n   *\n   * The value is in percentage zoom, relative to 1, and must be positive.\n   *\n   * @defaultValue undefined\n   */\n  maxTotalDeltaZ?: number;\n\n  /**\n   * If true, the events of the gesture, e.g. relevant key presses or touch\n   * moves, etc, will have their default action prevented.\n   *\n   * **IMPORTANT:** For pointer gestures, then pointer/mouse down and click\n   * will be prevented.\n   *\n   * @defaultValue {@link GestureWatcherConfig.preventDefault}\n   */\n  preventDefault?: boolean;\n\n  /**\n   * If given, callback will be called at most once every `debounceWindow`\n   * milliseconds.\n   *\n   * Note that if both `debounceWindow` and `deltaThreshold` are set, _both_\n   * must be exceeded before callback is called.\n   *\n   * @defaultValue {@link GestureWatcherConfig.debounceWindow}\n   */\n  debounceWindow?: number;\n\n  /**\n   * Callback will only be called when the gesture's accumulated delta, since\n   * the last time callback was called, exceeds `deltaThreshold`.\n   *\n   * At least one of the three deltas (X, Y or Z) must exceed this number (in\n   * absolute value). Note that when comparing `deltaZ`, it is multiplied by\n   * 100 since it represents fractions of 1 (100%). So supplying\n   * `deltaThreshold` of 10 means is equivalent to the following condition:\n   *\n   * ```\n   * abs(deltaX) >= 10 || abs(deltaY) >= 10 ||  abs(1 - deltaZ) >= 0.1\n   * ```\n   *\n   * Accumulation of the delta ends if the gesture is terminated, for example,\n   * in case of touch gestures, by a \"touchcancel\" event of by the final finger\n   * lifting off..\n   *\n   * Note that if both `debounceWindow` and `deltaThreshold` are set, _both_\n   * must be exceeded before callback is called.\n   *\n   * @defaultValue {@link GestureWatcherConfig.deltaThreshold}\n   */\n  deltaThreshold?: number;\n\n  /**\n   * See {@link Utils.getVectorDirection | getVectorDirection}.\n   *\n   * @defaultValue {@link GestureWatcherConfig.angleDiffThreshold}\n   */\n  angleDiffThreshold?: number;\n\n  /**\n   * Whether touch scroll gestures follow the natural direction: swipe up\n   * with scroll intent results in direction down and swipe down results in\n   * direction up.\n   *\n   * @defaultValue {@link GestureWatcherConfig.naturalTouchScroll}\n   */\n  naturalTouchScroll?: boolean;\n\n  /**\n   * If the user presses and holds on a touchscreen for at least the given\n   * amount of milliseconds before moving the finger(s), touch gestures other\n   * than pinch will be treated as a drag intent instead of scroll as long as\n   * the number of fingers touching the screen is {@link touchDragNumFingers}.\n   *\n   * Set to 0 in order to treat _all_ non-pinch touch gestures as drag.\n   *\n   * Set to a negative number in order to treat _all_ non-pinch touch gestures\n   * as scroll.\n   *\n   * @defaultValue {@link GestureWatcherConfig.touchDragHoldTime}\n   */\n  touchDragHoldTime?: number;\n\n  /**\n   * The number of fingers that could be considered a drag intent for touch\n   * gestures.\n   *\n   * @defaultValue {@link GestureWatcherConfig.touchDragHoldTime}\n   */\n  touchDragNumFingers?: number;\n};\n\n/**\n * The handler is invoked with two arguments:\n *\n * - the event target that was passed to the {@link GestureWatcher.onGesture}\n *   call (equivalent to\n *   {@link https://developer.mozilla.org/en-US/docs/Web/API/Event/currentTarget | Event:currentTarget}).\n * - the {@link GestureData} that describes the gesture's progression since the\n *   last time the callback was called and since the callback was added.\n */\nexport type OnGestureHandlerArgs = [EventTarget, GestureData, Event[]];\nexport type OnGestureCallback = Callback<OnGestureHandlerArgs>;\nexport type OnGestureHandler =\n  | CallbackHandler<OnGestureHandlerArgs>\n  | OnGestureCallback;\n\nexport type GestureData = {\n  device: GestureDevice;\n  direction: Direction;\n  intent: GestureIntent;\n\n  /**\n   * Delta in the horizontal direction since the start of the gesture.\n   */\n  deltaX: number;\n\n  /**\n   * Delta in the vertical direction since the start of the gesture.\n   */\n  deltaY: number;\n\n  /**\n   * Relative fractional zoom in or out for zoom intents since the start of\n   * the gesture.\n   *\n   * For zoom in, `deltaZ` is always > 1, and for zoom out it is < 1.\n   *\n   * For non-zoom gestures it is 1.\n   */\n  deltaZ: number;\n\n  /**\n   * The time in milliseconds it took for the gesture. This will be the\n   * difference in timestamps between the first and last event that composed\n   * the gesture. For key and wheel gestures this could be 0, since 1 event is\n   * sufficient for them.\n   */\n  time: number;\n\n  /**\n   * Delta in the horizontal direction since the callback was added.\n   */\n  totalDeltaX: number;\n\n  /**\n   * Delta in the vertical direction since the callback was added.\n   */\n  totalDeltaY: number;\n\n  /**\n   * Percentage (relative) zoom in or out for zoom intents since the callback\n   * was added.\n   */\n  totalDeltaZ: number;\n};\n\n// ----------------------------------------\n\ntype GestureWatcherConfigInternal = {\n  _preventDefault: boolean;\n  _debounceWindow: number;\n  _deltaThreshold: number;\n  _angleDiffThreshold: number;\n  _naturalTouchScroll: boolean;\n  _touchDragHoldTime: number;\n  _touchDragNumFingers: number;\n};\n\ntype OnGestureOptionsInternal = {\n  _devices: GestureDevice[] | null;\n  _directions: Direction[] | null;\n  _intents: GestureIntent[] | null;\n  _minTotalDeltaX: number | null;\n  _maxTotalDeltaX: number | null;\n  _minTotalDeltaY: number | null;\n  _maxTotalDeltaY: number | null;\n  _minTotalDeltaZ: number | null;\n  _maxTotalDeltaZ: number | null;\n  _preventDefault: boolean;\n  _debounceWindow: number;\n  _deltaThreshold: number;\n  _angleDiffThreshold: number;\n  _naturalTouchScroll: boolean;\n  _touchDragHoldTime: number;\n  _touchDragNumFingers: number;\n};\n\ntype OnGestureHandlerWrapper = (\n  _target: EventTarget,\n  _device: GestureDevice,\n  _event: Event,\n  _preventDefault: boolean,\n) => boolean;\n\n// Specific to a combination of target + device\ntype DeviceListeners = {\n  _nCallbacks: number; // total number of callbacks\n  _nPreventDefault: number; // total number wanting to prevent default action\n  _remove: () => void;\n};\n\nconst CONSTRUCTOR_KEY: unique symbol = MC.SYMBOL() as typeof CONSTRUCTOR_KEY;\nconst instances = MH.newMap<string, GestureWatcher>();\n\nconst getConfig = (\n  config: GestureWatcherConfig,\n): GestureWatcherConfigInternal => {\n  return {\n    _preventDefault: config.preventDefault ?? true,\n    _debounceWindow: toNonNegNum(config[MC.S_DEBOUNCE_WINDOW], 150),\n    _deltaThreshold: toNonNegNum(config.deltaThreshold, 5),\n    _angleDiffThreshold: toPosNum(config.angleDiffThreshold, 35),\n    _naturalTouchScroll: config.naturalTouchScroll ?? true,\n    _touchDragHoldTime: config.touchDragHoldTime ?? 500,\n    _touchDragNumFingers: config.touchDragNumFingers ?? 1,\n  };\n};\n\nconst initiatingEvents: {\n  [D in GestureDevice]: readonly (keyof GlobalEventHandlersEventMap)[];\n} = {\n  key: [MC.S_KEYDOWN],\n  // If the browser doesn't support pointer events, then\n  // addEventListenerTo will transform it into mousedown\n  //\n  // We need to listen for click, since that occurs after a pointerup (i.e.\n  // after a gesure is terminated and the ongoing listeners removed), but it\n  // needs to have its default action prevented.\n  pointer: [MC.S_POINTERDOWN, MC.S_CLICK],\n  touch: [MC.S_TOUCHSTART],\n  wheel: [MC.S_WHEEL],\n} as const;\n\nconst ongoingEvents: {\n  [D in GestureDevice]: readonly (keyof GlobalEventHandlersEventMap)[];\n} = {\n  key: [MC.S_KEYDOWN],\n  pointer: [\n    // If the browser doesn't support point events, then\n    // addEventListenerTo will transform them into mouse*\n    MC.S_POINTERDOWN,\n    MC.S_POINTERUP, // would terminate\n    MC.S_POINTERMOVE,\n    MC.S_POINTERCANCEL, // would terminate\n    MC.S_CLICK, // would terminate; can be default-prevented\n  ],\n  touch: [MC.S_TOUCHSTART, MC.S_TOUCHEND, MC.S_TOUCHMOVE, MC.S_TOUCHCANCEL],\n  wheel: [MC.S_WHEEL],\n} as const;\n\nconst fragmentGetters: {\n  [D in GestureDevice]: (\n    events: Event[],\n    options: {\n      deltaThreshold?: number;\n      angleDiffThreshold?: number;\n      reverseScroll?: boolean;\n      dragHoldTime?: number;\n      dragNumFingers?: number;\n    },\n  ) => GestureFragment | null | false;\n} = {\n  [MC.S_KEY]: getKeyGestureFragment,\n  [MC.S_POINTER]: getPointerGestureFragment,\n  [MC.S_TOUCH]: getTouchGestureFragment,\n  [MC.S_WHEEL]: getWheelGestureFragment,\n};\n\nconst getOptions = (\n  config: GestureWatcherConfigInternal,\n  options: OnGestureOptions,\n): OnGestureOptionsInternal => {\n  const debounceWindow = toNonNegNum(\n    options[MC.S_DEBOUNCE_WINDOW],\n    config._debounceWindow, // watcher is never debounced, so apply default here\n  );\n  const deltaThreshold = toNonNegNum(\n    options.deltaThreshold,\n    config._deltaThreshold,\n  );\n\n  return {\n    _devices:\n      validateStrList(\"devices\", options.devices, isValidInputDevice) || null,\n    _directions:\n      validateStrList(\"directions\", options.directions, isValidDirection) ||\n      null,\n    _intents:\n      validateStrList(\"intents\", options.intents, isValidIntent) || null,\n    _minTotalDeltaX: options.minTotalDeltaX ?? null,\n    _maxTotalDeltaX: options.maxTotalDeltaX ?? null,\n    _minTotalDeltaY: options.minTotalDeltaY ?? null,\n    _maxTotalDeltaY: options.maxTotalDeltaY ?? null,\n    _minTotalDeltaZ: options.minTotalDeltaZ ?? null,\n    _maxTotalDeltaZ: options.maxTotalDeltaZ ?? null,\n    _preventDefault: options.preventDefault ?? config._preventDefault,\n    _debounceWindow: debounceWindow,\n    _deltaThreshold: deltaThreshold,\n    _angleDiffThreshold: toNonNegNum(\n      options.angleDiffThreshold,\n      config._angleDiffThreshold,\n    ),\n    _naturalTouchScroll:\n      options.naturalTouchScroll ?? config._naturalTouchScroll,\n    _touchDragHoldTime: options.touchDragHoldTime ?? config._touchDragHoldTime,\n    _touchDragNumFingers:\n      options.touchDragNumFingers ?? config._touchDragNumFingers,\n  };\n};\n\n// Since each callback needs to accumulate events during its debounce window\n// and until its threshold is exceeded, we use a wrapper around the\n// user-supplied handler to do that.\nconst getCallbackAndWrapper = (\n  handler: OnGestureHandler,\n  options: OnGestureOptionsInternal,\n  logger: LoggerInterface | null,\n): { _callback: OnGestureCallback; _wrapper: OnGestureHandlerWrapper } => {\n  let totalDeltaX = 0,\n    totalDeltaY = 0,\n    totalDeltaZ = 1;\n  // When there's a pointer down, drag then pointerup, since we prevent\n  // pointerdown default action, this results in a click event shortly\n  // afterwards even when there's been a movement of the mouse. We detect that\n  // and prevent this click.\n  let preventNextClick = false;\n\n  const directions = options._directions;\n  const intents = options._intents;\n  const minTotalDeltaX = options._minTotalDeltaX;\n  const maxTotalDeltaX = options._maxTotalDeltaX;\n  const minTotalDeltaY = options._minTotalDeltaY;\n  const maxTotalDeltaY = options._maxTotalDeltaY;\n  const minTotalDeltaZ = options._minTotalDeltaZ;\n  const maxTotalDeltaZ = options._maxTotalDeltaZ;\n  const deltaThreshold = options._deltaThreshold;\n  const angleDiffThreshold = options._angleDiffThreshold;\n  const reverseScroll = !options._naturalTouchScroll;\n  const dragHoldTime = options._touchDragHoldTime;\n  const dragNumFingers = options._touchDragNumFingers;\n\n  // The event queue is cleared when the threshold is exceeded AND the debounce\n  // window has passed. It's not necessary for the actual handler to be called\n  // then (e.g. if the direction or intent doesn't match, it won't be).\n  const eventQueue: Event[] = [];\n  const id = randId();\n\n  // Since handler could be a function or a callback (not callable), we wrap it\n  // so that in case it's already a callback, its removal will result in\n  // deleteHandler getting called. It is not debounced itself, instead there's\n  // a debounced wrapper that invokes it.\n  const callback = wrapCallback(handler);\n\n  // The debounced callback wrapper is what is debounced.\n  // It accumulates total deltas and checks if the conditions (of threshold,\n  // direction and intent) are satisfied before calling the real handler.\n  //\n  // Most importantly, since it is only called when the debounce window has\n  // expired it can clear the event queue if the threshold is also exceeded.\n  const debouncedWrapper = getDebouncedHandler(\n    options._debounceWindow,\n    (\n      target: EventTarget,\n      fragment: GestureFragment,\n      eventQueueCopy: Event[],\n    ) => {\n      if (callback.isRemoved()) {\n        return;\n      }\n\n      const deltaX = fragment.deltaX;\n      const deltaY = fragment.deltaY;\n      const deltaZ = fragment.deltaZ;\n      const device = fragment.device;\n\n      if (\n        MH.round(maxAbs(deltaX, deltaY, (1 - deltaZ) * 100)) < deltaThreshold\n      ) {\n        debug: logger?.debug7(\n          `[${id}] Delta threshold not exceeded for callback`,\n        );\n        return;\n      }\n\n      debug: logger?.debug9(`[${id}] Done summing events for ${device}`);\n      clearEventQueue(device, eventQueue);\n\n      const newTotalDeltaX = toNumWithBounds(totalDeltaX + deltaX, {\n        min: minTotalDeltaX,\n        max: maxTotalDeltaX,\n      });\n\n      const newTotalDeltaY = toNumWithBounds(totalDeltaY + deltaY, {\n        min: minTotalDeltaY,\n        max: maxTotalDeltaY,\n      });\n\n      const newTotalDeltaZ = toNumWithBounds(addDeltaZ(totalDeltaZ, deltaZ), {\n        min: minTotalDeltaZ,\n        max: maxTotalDeltaZ,\n      });\n\n      if (\n        newTotalDeltaX === totalDeltaX &&\n        newTotalDeltaY === totalDeltaY &&\n        newTotalDeltaZ === totalDeltaZ\n      ) {\n        return;\n      }\n\n      totalDeltaX = newTotalDeltaX;\n      totalDeltaY = newTotalDeltaY;\n      totalDeltaZ = newTotalDeltaZ;\n\n      const direction = fragment.direction;\n      const intent = fragment.intent;\n      const time =\n        eventQueueCopy[MH.lengthOf(eventQueueCopy) - 1]?.timeStamp -\n          eventQueueCopy[0]?.timeStamp || 0;\n\n      const data = {\n        device,\n        direction,\n        intent,\n        deltaX,\n        deltaY,\n        deltaZ,\n        time,\n        totalDeltaX,\n        totalDeltaY,\n        totalDeltaZ,\n      };\n\n      if (\n        direction !== MC.S_NONE &&\n        (!directions || MH.includes(directions, direction)) &&\n        (!intents || MH.includes(intents, intent))\n      ) {\n        callback.invoke(target, data, eventQueueCopy).catch(logError);\n      } else {\n        debug: logger?.debug7(\n          `[${id}] Directions or intents not matching for callback`,\n        );\n      }\n    },\n  );\n\n  // This wrapper is NOT debounced and adds the events to the queue, prevents\n  // default action if needed, and indicates whether the gesture is terminated.\n  const wrapper = (\n    target: EventTarget,\n    device: GestureDevice,\n    event: Event,\n    preventDefault: boolean,\n  ) => {\n    eventQueue.push(event);\n\n    const fragment = fragmentGetters[device](eventQueue, {\n      angleDiffThreshold,\n      deltaThreshold,\n      reverseScroll,\n      dragHoldTime,\n      dragNumFingers,\n    });\n\n    debug: logger?.debug8(\n      `[${id}] Got fragment for ${device} (${event.type})`,\n      fragment,\n      [...eventQueue].map((e) => e.type),\n    );\n\n    if (preventDefault) {\n      preventDefaultActionFor(\n        event,\n        !!fragment || (event.type === MC.S_CLICK && preventNextClick),\n      );\n    }\n\n    if (fragment === false) {\n      // not enough events in the queue, pass\n      debug: logger?.debug9(`[${id}] Not enough events for gesture ${device}`);\n      return false;\n    } else if (fragment === null) {\n      // consider the gesture terminated\n      clearEventQueue(device, eventQueue);\n      debug: logger?.debug9(`[${id}] Gesture for ${device} terminated`);\n      return true;\n    }\n\n    if (device === MC.S_POINTER) {\n      // If we're here, there's been a drag, expect a click immediately\n      // afterwards and prevent default action.\n      preventNextClick = true;\n      MH.setTimer(() => {\n        preventNextClick = false;\n      }, 10);\n    }\n\n    debouncedWrapper(\n      target,\n      fragment,\n      [...eventQueue], // copy\n    );\n\n    return false;\n  };\n\n  return { _callback: callback, _wrapper: wrapper };\n};\n\nconst clearEventQueue = (device: GestureDevice, queue: Event[]) => {\n  const keepLastEvent = device === MC.S_POINTER || device === MC.S_TOUCH;\n  queue.splice(0, MH.lengthOf(queue) - (keepLastEvent ? 1 : 0));\n};\n\nconst preventDefaultActionFor = (event: Event, isActualGesture: boolean) => {\n  const target = event.currentTarget;\n  const eventType = event.type;\n  const isPointerDown =\n    eventType === MC.S_POINTERDOWN || eventType === MC.S_MOUSEDOWN;\n\n  if (\n    eventType === MC.S_TOUCHMOVE ||\n    eventType === MC.S_WHEEL ||\n    ((eventType === MC.S_CLICK || eventType === MC.S_KEYDOWN) &&\n      isActualGesture) ||\n    (isPointerDown && (event as MouseEvent).buttons === 1)\n  ) {\n    MH.preventDefault(event);\n\n    if (isPointerDown && MH.isHTMLElement(target)) {\n      // Otherwise capturing key events won't work\n      target.focus({ preventScroll: true });\n    }\n  }\n};\n\nconst setGestureCssProps = (\n  target: EventTarget,\n  data: Partial<GestureData>,\n) => {\n  const intent = data.intent;\n\n  if (!MH.isElement(target) || !intent || intent === MC.S_UNKNOWN) {\n    return;\n  }\n\n  const prefix = `${intent}-`;\n\n  if (intent === MC.S_ZOOM) {\n    setNumericStyleProps(\n      target,\n      {\n        deltaZ: data.totalDeltaZ,\n      },\n      {\n        _prefix: prefix,\n        _numDecimal: 2,\n      },\n    ); // don't await here\n  } else {\n    setNumericStyleProps(\n      target,\n      {\n        deltaX: data.totalDeltaX,\n        deltaY: data.totalDeltaY,\n      },\n      {\n        _prefix: prefix,\n      },\n    ); // don't await here\n  }\n};\n"],"mappings":"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","ignoreList":[]}