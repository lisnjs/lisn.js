{"version":3,"file":"pointer-trigger.cjs","names":["MC","_interopRequireWildcard","require","MH","_domSearch","_misc","_validation","_pointerWatcher","_trigger","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","_typeof","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","o","Symbol","iterator","constructor","prototype","_classCallCheck","TypeError","_defineProperties","length","enumerable","configurable","writable","_toPropertyKey","key","_createClass","_callSuper","_getPrototypeOf","_possibleConstructorReturn","_isNativeReflectConstruct","Reflect","construct","apply","_assertThisInitialized","ReferenceError","Boolean","valueOf","setPrototypeOf","getPrototypeOf","bind","_inherits","create","value","_setPrototypeOf","_defineProperty","_toPrimitive","toPrimitive","String","Number","ClickTrigger","exports","_Trigger","element","actions","_this","config","arguments","undefined","getConfig","copyObject","setupWatcher","S_CLICK","register","registerTrigger","args","newConfigValidator","Trigger","PressTrigger","_Trigger2","_this2","S_PRESS","HoverTrigger","_Trigger3","_this3","S_HOVER","target","_ref","isLiteralString","waitForReferenceElement","preventDefault","validateBoolean","preventSelect","widget","action","lengthOf","targetOf","startHandler","endHandler","S_TOGGLE","run","reverse","PointerWatcher","reuse","onPointer","merge","omitKeys"],"sources":["../../../src/ts/triggers/pointer-trigger.ts"],"sourcesContent":["/**\n * @module Triggers\n *\n * @categoryDescription Pointer\n * {@link ClickTrigger} allows you to run actions when a user clicks a target\n * element (first time and every other time, i.e. odd number of click), and\n * undo them when a user clicks the target element again (or every even number\n * of clicks). It always acts as a toggle.\n *\n * {@link PressTrigger} allows you to run actions when the user presses and\n * holds a pointing device (or their finger) on a target element, and undo\n * those actions when they release their pointing device or lift their finger\n * off.\n *\n * {@link HoverTrigger} allows you to run actions when the user hovers overs\n * a target element, and undo those actions when their pointing device moves\n * off the target. On touch devices it acts just like {@link PressTrigger}.\n */\n\nimport * as MC from \"@lisn/globals/minification-constants\";\nimport * as MH from \"@lisn/globals/minification-helpers\";\n\nimport { waitForReferenceElement } from \"@lisn/utils/dom-search\";\nimport { omitKeys } from \"@lisn/utils/misc\";\nimport { validateBoolean } from \"@lisn/utils/validation\";\n\nimport {\n  PointerWatcher,\n  OnPointerHandler,\n} from \"@lisn/watchers/pointer-watcher\";\n\nimport { Action } from \"@lisn/actions/action\";\n\nimport {\n  registerTrigger,\n  Trigger,\n  TriggerConfig,\n} from \"@lisn/triggers/trigger\";\n\nimport { WidgetConfigValidatorFunc } from \"@lisn/widgets/widget\";\n\n/**\n * {@link ClickTrigger} allows you to run actions when a user clicks a target\n * element (first time and every other time, i.e. odd number of click), and\n * undo them when a user clicks the target element again (or every even number\n * of clicks). It always acts as a toggle.\n *\n * -------\n *\n * To use with auto-widgets (HTML API), see {@link registerTrigger} for the\n * specification.\n *\n * - Arguments: none\n * - Additional trigger options: none\n *   - `target`: A string element specification.\n *     See {@link Utils.getReferenceElement | getReferenceElement}.\n *   - `prevent-default`: A boolean.\n *   - `prevent-select`: A boolean.\n *\n * @example\n * Add classes `active` and `toggled-on` when the user clicks the element\n * (first time and every other time, i.e. odd number of click), remove them\n * when clicked again (or even number of click);\n *\n * ```html\n * <div data-lisn-on-click=\"@add-class=active,toggled-on\"></div>\n * ```\n *\n * @example\n * As above, but using a CSS class instead of data attribute:\n *\n * ```html\n * <div class=\"lisn-on-click--@add-class=active,toggled-on\"></div>\n * ```\n *\n * @example\n * Play the animations on the element 1000ms after the first time the user\n * clicks it.\n *\n * ```html\n * <div data-lisn-on-click=\"@animate +once +delay=1000\"></div>\n * ```\n *\n * @example\n * Add class `visited` the first time the user clicks the element, and\n * play or reverse the animations on the element 1000ms each time the\n * user clicks it.\n *\n * ```html\n * <div data-lisn-on-click=\"@add-class=visited +once ;\n *                          @animate +delay=1000\"\n * ></div>\n * ```\n *\n * @example\n * When the user clicks the next element with class `box` then add classes `c1`\n * and `c2` to the element (that the trigger is defined on) and enable trigger\n * `my-trigger` defined on this same element; undo all of that on even number\n * of clicks on the reference box element.\n *\n * ```html\n * <div data-lisn-on-click=\"@add-class=c1,c2 @enable=my-trigger +target=next.box\"\n *      data-lisn-on-run=\"@show +id=my-trigger\"\n * ></div>\n * <div class=\"box\"></div>\n * ```\n *\n * @example\n * As above, but using `data-lisn-ref` attribute instead of class selector.\n *\n * ```html\n * <div data-lisn-on-click=\"@add-class=c1,c2 @enable=my-trigger +target=next-box\"\n *      data-lisn-on-run=\"@show +id=my-trigger\"\n * ></div>\n * <div data-lisn-ref=\"box\"></div>\n * ```\n *\n * @category Pointer\n */\nexport class ClickTrigger extends Trigger {\n  readonly getConfig: () => PointerTriggerConfig;\n\n  static register() {\n    registerTrigger(\n      MC.S_CLICK,\n      (element, args, actions, config) =>\n        new ClickTrigger(element, actions, config),\n      newConfigValidator,\n    );\n  }\n\n  /**\n   * If no actions are supplied, nothing is done.\n   *\n   * @throws {@link Errors.LisnUsageError | LisnUsageError}\n   *                If the config is invalid.\n   */\n  constructor(\n    element: Element,\n    actions: Action[],\n    config: PointerTriggerConfig = {},\n  ) {\n    super(element, actions, config);\n    this.getConfig = () => MH.copyObject(config);\n\n    setupWatcher(this, element, actions, config, MC.S_CLICK);\n  }\n}\n\n/**\n * {@link PressTrigger} allows you to run actions when the user presses and\n * holds a pointing device (or their finger) on a target element, and undo\n * those actions when they release their pointing device or lift their finger\n * off.\n *\n * -------\n *\n * To use with auto-widgets (HTML API), see {@link registerTrigger} for the\n * specification.\n *\n * - Arguments: none\n * - Additional trigger options: none\n *   - `target`: A string element specification.\n *     See {@link Utils.getReferenceElement | getReferenceElement}.\n *   - `prevent-default`: boolean\n *   - `prevent-select`: boolean\n *\n * @example\n * Add classes `active` and `pressed` when the user presses and holds (with\n * mouse, finger or any pointer) the element, remove them when they release\n * the mouse.\n *\n * ```html\n * <div data-lisn-on-press=\"@add-class=active,pressed\"></div>\n * ```\n *\n * @example\n * As above, but using a CSS class instead of data attribute:\n *\n * ```html\n * <div class=\"lisn-on-press--@add-class=active,pressed\"></div>\n * ```\n *\n * @example\n * Play the animations on the element 1000ms after the first time the user\n * presses on the element it.\n *\n * ```html\n * <div data-lisn-on-press=\"@animate +once +delay=1000\"></div>\n * ```\n *\n * @example\n * Add class `pressed` the first time the user presses on the element, and\n * play the animations on the element while the user is pressing on the element\n * with a delay of 100ms, reverse the animations as soon as the user releases\n * the mouse.\n *\n * ```html\n * <div data-lisn-on-click=\"@add-class=pressed +once ;\n *                          @animate +do-delay=100\"\n * ></div>\n * ```\n *\n * @example\n * When the user presses and holds the next element with class `box` then add\n * classes `c1` and `c2` to the element (that the trigger is defined on) and\n * enable trigger `my-trigger` defined on this same element; undo all of that\n * when they release the mouse (or lift their finger/pointer device) from the\n * reference box element.\n *\n * ```html\n * <div data-lisn-on-press=\"@add-class=c1,c2 @enable=my-trigger +target=next.box\"\n *      data-lisn-on-run=\"@show +id=my-trigger\"\n * ></div>\n * <div class=\"box\"></div>\n * ```\n *\n * @example\n * As above, but using `data-lisn-ref` attribute instead of class selector.\n *\n * ```html\n * <div data-lisn-on-press=\"@add-class=c1,c2 @enable=my-trigger +target=next-box\"\n *      data-lisn-on-run=\"@show +id=my-trigger\"\n * ></div>\n * <div data-lisn-ref=\"box\"></div>\n * ```\n *\n * @category Pointer\n */\nexport class PressTrigger extends Trigger {\n  readonly getConfig: () => PointerTriggerConfig;\n\n  static register() {\n    registerTrigger(\n      MC.S_PRESS,\n      (element, args, actions, config) =>\n        new PressTrigger(element, actions, config),\n      newConfigValidator,\n    );\n  }\n\n  /**\n   * If no actions are supplied, nothing is done.\n   *\n   * @throws {@link Errors.LisnUsageError | LisnUsageError}\n   *                If the config is invalid.\n   */\n  constructor(\n    element: Element,\n    actions: Action[],\n    config: PointerTriggerConfig = {},\n  ) {\n    super(element, actions, config);\n    this.getConfig = () => MH.copyObject(config);\n\n    setupWatcher(this, element, actions, config, MC.S_PRESS);\n  }\n}\n\n/**\n * {@link HoverTrigger} allows you to run actions when the user hovers overs\n * a target element, and undo those actions when their pointing device moves\n * off the target. On touch devices it acts just like {@link PressTrigger}.\n *\n * -------\n *\n * To use with auto-widgets (HTML API), see {@link registerTrigger} for the\n * specification.\n *\n * - Arguments: none\n * - Additional trigger options: none\n *   - `target`: A string element specification.\n *     See {@link Utils.getReferenceElement | getReferenceElement}.\n *   - `prevent-default`: boolean\n *   - `prevent-select`: boolean\n *\n * @example\n * Add classes `active` and `hovered` when the user hovers over the element,\n * remove them otherwise.\n *\n * ```html\n * <div data-lisn-on-hover=\"@add-class=active,hovered\"></div>\n * ```\n *\n * @example\n * As above, but using a CSS class instead of data attribute:\n *\n * ```html\n * <div class=\"lisn-on-press--@add-class=active,hovered\"></div>\n * ```\n *\n * @example\n * Play the animations on the element 1000ms after the first time the user\n * hovers over the element it.\n *\n * ```html\n * <div data-lisn-on-hover=\"@animate +once +delay=1000\"></div>\n * ```\n *\n * @example\n * Add class `hovered` the first time the user hovers over the element, and\n * play the animations on the element while the user is hovering over the\n * element with a delay of 100ms, reverse the animations as soon as the user\n * mouse leaves the element.\n *\n * ```html\n * <div data-lisn-on-click=\"@add-class=hovered +once ;\n *                          @animate +do-delay=100\"\n * ></div>\n * ```\n *\n * @example\n * When the user hovers over the next element with class `box` then add classes\n * `c1` and `c2` to the element (that the trigger is defined on) and enable\n * trigger `my-trigger` defined on this same element; undo all of that when\n * their pointing device (or finger) moves off the reference element.\n *\n * ```html\n * <div data-lisn-on-hover=\"@add-class=c1,c2 @enable=my-trigger +target=next.box\"\n *      data-lisn-on-run=\"@show +id=my-trigger\"\n * ></div>\n * <div class=\"box\"></div>\n * ```\n *\n * @example\n * As above, but using `data-lisn-ref` attribute instead of class selector.\n *\n * ```html\n * <div data-lisn-on-hover=\"@add-class=c1,c2 @enable=my-trigger +target=next-box\"\n *      data-lisn-on-run=\"@show +id=my-trigger\"\n * ></div>\n * <div data-lisn-ref=\"box\"></div>\n * ```\n *\n * @category Pointer\n */\nexport class HoverTrigger extends Trigger {\n  readonly getConfig: () => PointerTriggerConfig;\n\n  static register() {\n    registerTrigger(\n      MC.S_HOVER,\n      (element, args, actions, config) =>\n        new HoverTrigger(element, actions, config),\n      newConfigValidator,\n    );\n  }\n\n  /**\n   * If no actions are supplied, nothing is done.\n   *\n   * @throws {@link Errors.LisnUsageError | LisnUsageError}\n   *                If the config is invalid.\n   */\n  constructor(\n    element: Element,\n    actions: Action[],\n    config: PointerTriggerConfig = {},\n  ) {\n    super(element, actions, config);\n    this.getConfig = () => MH.copyObject(config);\n\n    setupWatcher(this, element, actions, config, MC.S_HOVER);\n  }\n}\n\n/**\n * @category Pointer\n * @interface\n */\nexport type PointerTriggerConfig = TriggerConfig & {\n  /**\n   * The target to use for the hover action.\n   *\n   * @defaultValue The element on which the {@link Trigger} is defined\n   */\n  target?: Element;\n\n  /**\n   * See {@link Watchers/PointerWatcher.OnPointerOptions | OnPointerOptions}.\n   *\n   * @defaultValue {@link PointerWatcher} default, false\n   */\n  preventDefault?: boolean;\n\n  /**\n   * See {@link Watchers/PointerWatcher.OnPointerOptions | OnPointerOptions}.\n   *\n   * @defaultValue {@link PointerWatcher} default, true\n   */\n  preventSelect?: boolean;\n};\n\n// --------------------\n\nconst newConfigValidator: WidgetConfigValidatorFunc<PointerTriggerConfig> = (\n  element,\n) => {\n  return {\n    target: (key, value) =>\n      (MH.isLiteralString(value)\n        ? waitForReferenceElement(value, element)\n        : null) ?? undefined,\n    preventDefault: validateBoolean,\n    preventSelect: validateBoolean,\n  };\n};\n\nconst setupWatcher = (\n  widget: ClickTrigger | HoverTrigger | PressTrigger,\n  element: Element,\n  actions: Action[],\n  config: PointerTriggerConfig,\n  action: \"click\" | \"hover\" | \"press\",\n) => {\n  if (!MH.lengthOf(actions)) {\n    return;\n  }\n\n  const target = MH.targetOf(config) || element;\n\n  // For clicks use the trigger's own toggle function so that it remembers ITS\n  // state rather than the odd/even clicks. Otherwise if the trigger is\n  // disabled, then clicking will \"swap\" the state.\n  let startHandler: OnPointerHandler;\n  let endHandler: OnPointerHandler;\n  if (action === MC.S_CLICK) {\n    startHandler = endHandler = widget[MC.S_TOGGLE];\n  } else {\n    startHandler = widget.run;\n    endHandler = widget.reverse;\n  }\n\n  PointerWatcher.reuse().onPointer(\n    target,\n    startHandler,\n    endHandler,\n    MH.merge(\n      {\n        actions: action,\n      },\n      omitKeys(config, { target: null }),\n    ),\n  );\n};\n"],"mappings":"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","ignoreList":[]}