{"version":3,"file":"x-map.cjs","names":["MC","_interopRequireWildcard","require","MH","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","_typeof","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","o","Symbol","iterator","constructor","prototype","_callSuper","_getPrototypeOf","_possibleConstructorReturn","_isNativeReflectConstruct","Reflect","construct","apply","TypeError","_assertThisInitialized","ReferenceError","Boolean","valueOf","setPrototypeOf","getPrototypeOf","bind","_inherits","create","value","writable","configurable","_setPrototypeOf","_toConsumableArray","_arrayWithoutHoles","_iterableToArray","_unsupportedIterableToArray","_nonIterableSpread","_arrayLikeToArray","toString","slice","name","Array","from","test","isArray","length","_defineProperties","enumerable","_toPropertyKey","key","_createClass","_classCallCheck","_defineProperty","_toPrimitive","toPrimitive","String","Number","newXMap","exports","getDefaultV","XMap","newXMapGetter","newXWeakMap","XWeakMap","newXWeakMapGetter","XMapBase","root","deleteKey","sGet","result","undefined","prune","sk","_len","arguments","rest","_key","lengthOf","concat","isIterableObject","size","_XMapBase2","_this","newMap","clear","entries","keys","values","SYMBOL","_XMapBase3","newWeakMap"],"sources":["../../../src/ts/modules/x-map.ts"],"sourcesContent":["/**\n * @module Modules/XMap\n */\n\nimport * as MC from \"@lisn/globals/minification-constants\";\nimport * as MH from \"@lisn/globals/minification-helpers\";\n\nimport { MapBase } from \"@lisn/globals/types\";\n\nexport type DefaultValueGetter<K, V> = (key: K) => V;\nexport type IteratorCallback<K, V> = (\n  value: V,\n  key: K,\n  map: XMap<K, V>,\n) => void;\n\n/**\n * For minification optimization\n *\n * @ignore\n * @internal\n */\nexport const newXMap = <K, V>(getDefaultV: DefaultValueGetter<K, V>) =>\n  new XMap(getDefaultV);\n\n/**\n * For minification optimization. Exposed through {@link XMap.newXMapGetter}.\n *\n * @ignore\n * @internal\n */\nexport const newXMapGetter =\n  <K, V>(getDefaultV: DefaultValueGetter<K, V>) =>\n  () =>\n    newXMap(getDefaultV);\n\n/**\n * For minification optimization\n *\n * @ignore\n * @internal\n */\nexport const newXWeakMap = <K extends WeakKey, V>(\n  getDefaultV: DefaultValueGetter<K, V>,\n) => new XWeakMap(getDefaultV);\n\n/**\n * For minification optimization. Exposed through {@link XMap.newXWeakMapGetter}.\n *\n * @ignore\n * @internal\n */\nexport const newXWeakMapGetter =\n  <K extends WeakKey, V>(getDefaultV: DefaultValueGetter<K, V>) =>\n  () =>\n    newXWeakMap(getDefaultV);\n\nexport abstract class XMapBase<K, V> {\n  /**\n   * Returns the value at the given key in the {@link XMap} or {@link XWeakMap}.\n   */\n  readonly get: (key: K) => V | undefined;\n\n  /**\n   * Like {@link get} except that if the key is not found in the map, then it\n   * will set and return a default value by calling `getDefaultV` passed to the\n   * constructor.\n   */\n  readonly sGet: (key: K) => V;\n\n  /**\n   * Sets a value at the given key in the {@link XMap} or {@link XWeakMap}.\n   */\n  readonly set: (key: K, value: V) => void;\n\n  /**\n   * Deletes a value at the given key in the {@link XMap} or {@link XWeakMap}.\n   */\n  readonly delete: (key: K) => void;\n\n  /**\n   * Deletes empty keys in the {@link XMap} or {@link XWeakMap} starting at the\n   * final nested path and checking the level above after deletion.\n   *\n   * A key is considered empty if it's value is undefined or it's an empty Map,\n   * Set, Array, etc (anything with size or length property equal to 0).\n   */\n  readonly prune: (sk: K, ...rest: unknown[]) => void;\n\n  /**\n   * Returns true if the {@link XMap} or {@link XWeakMap} contains the given key.\n   */\n  readonly has: (key: K) => boolean;\n\n  protected constructor(\n    root: MapBase<K, V>,\n    getDefaultV: DefaultValueGetter<K, V>,\n  ) {\n    this.get = (key) => root.get(key);\n    this.set = (key, value) => root.set(key, value);\n    this.delete = (key) => MH.deleteKey(root, key);\n    this.has = (key) => root.has(key);\n\n    this.sGet = (key) => {\n      let result = root.get(key);\n      if (result === undefined) {\n        result = getDefaultV(key);\n        root.set(key, result);\n      }\n      return result;\n    };\n\n    this.prune = (sk, ...rest) => {\n      const value = root.get(sk);\n      if (value instanceof XMapBase && MH.lengthOf(rest)) {\n        value.prune(rest[0], ...rest.slice(1));\n      }\n\n      if (\n        value === undefined ||\n        (MH.isIterableObject(value) &&\n          !(\n            (\"size\" in value && value.size) ||\n            (\"length\" in value && value.length)\n          ))\n      ) {\n        MH.deleteKey(root, sk);\n      }\n    };\n  }\n}\n\n/**\n * {@link XMap} is like\n * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map | Map},\n * except that it supports automatically creating missing entries with\n * {@link sGet} according to a default value getter function.\n *\n * @typeParam K  The type of the keys the map holds.\n * @typeParam V  The type of the values the map holds.\n */\nexport class XMap<K, V> extends XMapBase<K, V> implements Iterable<[K, V]> {\n  /**\n   * Returns the number of entries in the {@link XMap}.\n   */\n  readonly size!: number;\n\n  /**\n   * Deletes all entries in the {@link XMap}.\n   */\n  readonly clear: () => void;\n\n  /**\n   * Returns an iterator over the {@link XMap} entries.\n   */\n  readonly entries: () => MapIterator<[K, V]>;\n\n  /**\n   * Returns an iterator over the {@link XMap} keys.\n   */\n  readonly keys: () => MapIterator<K>;\n\n  /**\n   * Returns an iterator over the {@link XMap} values.\n   */\n  readonly values: () => MapIterator<V>;\n\n  readonly [Symbol.iterator]!: () => IterableIterator<[K, V]>;\n\n  /**\n   * Returns a function that when called returns a new {@link XMap}.\n   *\n   * You can pass this to the constructor of an {@link XMap} or an\n   * {@link XWeakMap}, whose values are {@link XMap}s.\n   */\n  static readonly newXMapGetter = newXMapGetter;\n\n  /**\n   * @param {} getDefaultV  This function is called each time\n   *                        {@link sGet} is called with a non-existent\n   *                        key and must return a value that is then set for\n   *                        that key and returned.\n   */\n  constructor(getDefaultV: DefaultValueGetter<K, V>) {\n    const root = MH.newMap<K, V>();\n    super(root, getDefaultV);\n\n    MH.defineProperty(this, \"size\", { get: () => root.size });\n    this.clear = () => root.clear();\n    this.entries = () => root.entries();\n    this.keys = () => root.keys();\n    this.values = () => root.values();\n    this[MC.SYMBOL.iterator] = () => root[MC.SYMBOL.iterator]();\n  }\n}\n\n/**\n * {@link XWeakMap} is like\n * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap | WeakMap},\n * except that it supports automatically creating missing entries with\n * with {@link sGet} according to a default value getter function.\n *\n * @typeParam K  The type of the keys the map holds.\n * @typeParam V  The type of the values the map holds.\n */\nexport class XWeakMap<K extends WeakKey, V> extends XMapBase<K, V> {\n  /**\n   * Returns a function that when called returns a new {@link XWeakMap}.\n   *\n   * You can pass this to the constructor of an {@link XMap} or an\n   * {@link XWeakMap}, whose values are {@link XWeakMap}s.\n   */\n  static readonly newXWeakMapGetter = newXWeakMapGetter;\n\n  /**\n   * @param {} getDefaultV  This function is called each time\n   *                        {@link sGet} is called with a non-existent\n   *                        key and must return a value that is then set for\n   *                        that key and returned.\n   */\n  constructor(getDefaultV: DefaultValueGetter<K, V>) {\n    const root = MH.newWeakMap<K, V>();\n    super(root, getDefaultV);\n  }\n}\n"],"mappings":"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","ignoreList":[]}