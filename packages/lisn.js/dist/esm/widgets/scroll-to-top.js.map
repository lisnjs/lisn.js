{"version":3,"file":"scroll-to-top.js","names":["MC","MH","showElement","hideElement","displayElement","undisplayElement","disableInitialTransition","addClasses","removeClasses","setData","delData","moveElement","insertArrow","waitForElement","addEventListenerTo","removeEventListenerFrom","validateString","isValidScrollOffset","ScrollWatcher","ViewWatcher","Widget","registerWidget","ScrollToTop","get","element","mainWidget","instance","DUMMY_ID","isInstanceOf","register","WIDGET_NAME","config","configValidator","enableMain","button","createButton","widget","onDestroy","getBody","then","body","isDestroyed","to","constructor","_ScrollToTop$get","destroyPromise","destroy","id","scrollWatcher","reuse","viewWatcher","offset","S_TOP","prefixCssVar","position","S_RIGHT","clickListener","scrollTo","top","arrow","S_UP","showIt","hideIt","promiseResolve","PREFIX_ROOT","PREFIX_PLACE","S_CLICK","onView","views","S_AT","S_BELOW","S_ABOVE","onDisable","onEnable","offView","PREFIXED_NAME","prefixName","key","value","v","S_LEFT"],"sources":["../../../src/ts/widgets/scroll-to-top.ts"],"sourcesContent":["/**\n * @module Widgets\n */\n\nimport * as MC from \"@lisn/globals/minification-constants\";\nimport * as MH from \"@lisn/globals/minification-helpers\";\n\nimport { ScrollOffset } from \"@lisn/globals/types\";\n\nimport {\n  showElement,\n  hideElement,\n  displayElement,\n  undisplayElement,\n  disableInitialTransition,\n  addClasses,\n  removeClasses,\n  setData,\n  delData,\n} from \"@lisn/utils/css-alter\";\nimport { moveElement, insertArrow } from \"@lisn/utils/dom-alter\";\nimport { waitForElement } from \"@lisn/utils/dom-events\";\nimport { addEventListenerTo, removeEventListenerFrom } from \"@lisn/utils/event\";\nimport { validateString } from \"@lisn/utils/validation\";\nimport { isValidScrollOffset } from \"@lisn/utils/views\";\n\nimport { ScrollWatcher } from \"@lisn/watchers/scroll-watcher\";\nimport { ViewWatcher } from \"@lisn/watchers/view-watcher\";\n\nimport {\n  Widget,\n  WidgetConfigValidatorObject,\n  registerWidget,\n} from \"@lisn/widgets/widget\";\n\n/**\n * Configures the given element as a {@link ScrollToTop} widget.\n *\n * The ScrollToTop widget adds a scroll-to-top button in the lower right corder\n * of the screen (can be changed to bottom left) which scrolls smoothly (and\n * more slowly than the native scroll) back to the top.\n *\n * The button is only shown when the scroll offset from the top is more than a\n * given configurable amount.\n *\n * **NOTE:** Currently the widget only supports fixed positioned button that\n * scrolls the main scrolling element (see\n * {@link Settings.settings.mainScrollableElementSelector | settings.mainScrollableElementSelector}).\n *\n * **IMPORTANT:** You should not instantiate more than one {@link ScrollToTop}\n * widget on a given element. Use {@link ScrollToTop.get} to get an existing\n * instance if any. If there is already a widget instance, it will be destroyed!\n *\n * -----\n *\n * You can use the following dynamic attributes or CSS properties in your\n * stylesheet:\n *\n * The following dynamic attributes are set on the element:\n * - `data-lisn-place`: `\"left\"` or `\"right\"`\n *\n * -----\n *\n * To use with auto-widgets (HTML API) (see\n * {@link Settings.settings.autoWidgets | settings.autoWidgets}), the following\n * CSS classes or data attributes are recognized:\n * - `lisn-scroll-to-top` class or `data-lisn-scroll-to-top` attribute set on\n *   the element that constitutes the widget. The element should be empty.\n *\n * See below examples for what values you can use set for the data attributes\n * in order to modify the configuration of the automatically created widget.\n *\n * @example\n * This will create a scroll-to-top button using the JavaScript API.\n *\n * This will work even if\n * {@link Settings.settings.autoWidgets | settings.autoWidgets}) is false.\n *\n * ```html\n * <!-- LISN should be loaded beforehand -->\n * <script>\n *   LISN.widgets.ScrollToTop.enableMain({\n *     position: \"left\",\n *     offset: \"top: 300vh\"\n *   });\n * </script>\n * ```\n *\n * You can customise the offset show/hide trigger via CSS as well as long as\n * {@link ScrollToTopConfig.offset} is left at its default value which uses\n * this CSS property:\n *\n * ```html\n * <style type=\"text/css\" media=\"screen\">\n *   :root {\n *     --lisn-scroll-to-top--offset: 300vh;\n *   }\n * </style>\n * ```\n *\n * @example\n * This will create a scroll-to-top button for the main scrolling element\n * using an existing element for the button with default\n * {@link ScrollToTopConfig}.\n *\n * ```html\n * <div class=\"lisn-scroll-to-top\"></div>\n * ```\n *\n * @example\n * As above but with custom settings.\n *\n * ```html\n * <div data-lisn-scroll-to-top=\"position=left | offset=top:300vh\"></div>\n * ```\n */\nexport class ScrollToTop extends Widget {\n  /**\n   * If element is omitted, returns the instance created by {@link enableMain}\n   * if any.\n   */\n  static get(element?: Element): ScrollToTop | null {\n    if (!element) {\n      return mainWidget;\n    }\n\n    const instance = super.get(element, DUMMY_ID);\n    if (MH.isInstanceOf(instance, ScrollToTop)) {\n      return instance;\n    }\n    return null;\n  }\n\n  static register() {\n    registerWidget(\n      WIDGET_NAME,\n      (element, config) => {\n        if (!ScrollToTop.get(element)) {\n          return new ScrollToTop(element, config);\n        }\n        return null;\n      },\n      configValidator,\n    );\n  }\n\n  /**\n   * Creates a new button element, inserts it into the document body and\n   * configures it as a {@link ScrollToTop}.\n   */\n  static enableMain(config?: ScrollToTopConfig) {\n    const button = MH.createButton(\"Back to top\");\n    const widget = new ScrollToTop(button, config);\n    widget.onDestroy(() => {\n      if (mainWidget === widget) {\n        mainWidget = null;\n      }\n      return moveElement(button);\n    });\n\n    waitForElement(MH.getBody).then((body) => {\n      if (!widget.isDestroyed()) {\n        moveElement(button, { to: body });\n      }\n    });\n\n    mainWidget = widget;\n    return widget;\n  }\n\n  constructor(element: Element, config?: ScrollToTopConfig) {\n    const destroyPromise = ScrollToTop.get(element)?.destroy();\n    super(element, { id: DUMMY_ID });\n\n    const scrollWatcher = ScrollWatcher.reuse();\n    const viewWatcher = ViewWatcher.reuse();\n\n    const offset: ScrollOffset =\n      config?.offset ||\n      `${MC.S_TOP}: var(${MH.prefixCssVar(\"scroll-to-top--offset\")}, 200vh)`;\n    const position: \"left\" | \"right\" = config?.position || MC.S_RIGHT;\n\n    const clickListener = () => scrollWatcher.scrollTo({ top: 0 });\n\n    const arrow = insertArrow(element, MC.S_UP);\n\n    const showIt = () => {\n      showElement(element);\n    };\n\n    const hideIt = () => {\n      hideElement(element);\n    };\n\n    // SETUP ------------------------------\n\n    (destroyPromise || MH.promiseResolve()).then(() => {\n      if (this.isDestroyed()) {\n        return;\n      }\n\n      disableInitialTransition(element);\n      addClasses(element, PREFIX_ROOT);\n      setData(element, MC.PREFIX_PLACE, position);\n\n      hideIt(); // initial\n\n      addEventListenerTo(element, MC.S_CLICK, clickListener);\n\n      viewWatcher.onView(offset, showIt, {\n        views: [MC.S_AT, MC.S_BELOW],\n      });\n\n      viewWatcher.onView(offset, hideIt, {\n        views: [MC.S_ABOVE],\n      });\n\n      this.onDisable(() => {\n        undisplayElement(element);\n      });\n\n      this.onEnable(() => {\n        displayElement(element);\n      });\n\n      this.onDestroy(async () => {\n        removeEventListenerFrom(element, MC.S_CLICK, clickListener);\n\n        await delData(element, MC.PREFIX_PLACE);\n        await moveElement(arrow); // remove\n        await removeClasses(element, PREFIX_ROOT);\n\n        await displayElement(element); // revert undisplay by onDisable\n        viewWatcher.offView(offset, showIt);\n        viewWatcher.offView(offset, hideIt);\n      });\n    });\n  }\n}\n\n/**\n * @interface\n */\nexport type ScrollToTopConfig = {\n  /**\n   * The button will be shown when the scroll top offset of the page is below\n   * the given value, and hidden otherwise. Accepts a colon-separated key:value\n   * string where the key is \"top\" or \"bottom\" (or if your page scrolls\n   * horizontally, then use \"left\" or \"right\"), and the value can be any valid\n   * CSS length specification, e.g. \"top: 200vh\" or \"top: var(--offset, 50%)\".\n   *\n   * Alternatively, you set the `--lisn-scroll-to-top--offset` CSS variable on\n   * the document root, which is used by the default value.\n   *\n   * @defaultValue \"top: var(--lisn-scroll-to-top--offset, 200vh)\"\n   */\n  offset?: ScrollOffset;\n\n  /**\n   * The horizontal position of the scroll-to-top button.\n   *\n   * @defaultValue \"right\"\n   */\n  position?: \"left\" | \"right\";\n};\n\n// --------------------\n\nconst WIDGET_NAME = \"scroll-to-top\";\nconst PREFIXED_NAME = MH.prefixName(WIDGET_NAME);\nconst PREFIX_ROOT = `${PREFIXED_NAME}__root`;\n// Only one ScrollToTop widget per element is allowed, but Widget requires a\n// non-blank ID.\n// In fact, it doesn't make much sense to have more than 1 scroll-to-top button\n// on the whole page, but we support it, hence use a class rather than a DOM ID.\nconst DUMMY_ID = PREFIXED_NAME;\nlet mainWidget: ScrollToTop | null = null;\n\nconst configValidator: WidgetConfigValidatorObject<ScrollToTopConfig> = {\n  offset: (key, value) => validateString(key, value, isValidScrollOffset),\n  position: (key, value) =>\n    validateString(key, value, (v) => v === MC.S_LEFT || v === MC.S_RIGHT),\n};\n"],"mappings":"AAAA;AACA;AACA;;AAEA,OAAO,KAAKA,EAAE;AACd,OAAO,KAAKC,EAAE;AAId,SACEC,WAAW,EACXC,WAAW,EACXC,cAAc,EACdC,gBAAgB,EAChBC,wBAAwB,EACxBC,UAAU,EACVC,aAAa,EACbC,OAAO,EACPC,OAAO;AAET,SAASC,WAAW,EAAEC,WAAW;AACjC,SAASC,cAAc;AACvB,SAASC,kBAAkB,EAAEC,uBAAuB;AACpD,SAASC,cAAc;AACvB,SAASC,mBAAmB;AAE5B,SAASC,aAAa;AACtB,SAASC,WAAW;AAEpB,SACEC,MAAM,EAENC,cAAc;;AAGhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,WAAW,SAASF,MAAM,CAAC;EACtC;AACF;AACA;AACA;EACE,OAAOG,GAAGA,CAACC,OAAiB,EAAsB;IAChD,IAAI,CAACA,OAAO,EAAE;MACZ,OAAOC,UAAU;IACnB;IAEA,MAAMC,QAAQ,GAAG,KAAK,CAACH,GAAG,CAACC,OAAO,EAAEG,QAAQ,CAAC;IAC7C,IAAI1B,EAAE,CAAC2B,YAAY,CAACF,QAAQ,EAAEJ,WAAW,CAAC,EAAE;MAC1C,OAAOI,QAAQ;IACjB;IACA,OAAO,IAAI;EACb;EAEA,OAAOG,QAAQA,CAAA,EAAG;IAChBR,cAAc,CACZS,WAAW,EACX,CAACN,OAAO,EAAEO,MAAM,KAAK;MACnB,IAAI,CAACT,WAAW,CAACC,GAAG,CAACC,OAAO,CAAC,EAAE;QAC7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","ignoreList":[]}