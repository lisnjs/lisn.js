{"version":3,"file":"animations.js","names":["MC","MH","addClassesNow","removeClassesNow","getData","waitForMeasureTime","waitForMutateTime","iterateAnimations","element","webAnimationCallback","legacyCallback","realtime","prefixName","animation","getAnimations","resetCssAnimationsNow","PREFIX_ANIMATE_DISABLE","S_CLIENT_WIDTH"],"sources":["../../../src/ts/utils/animations.ts"],"sourcesContent":["/**\n * @module Utils\n */\n\nimport * as MC from \"@lisn/globals/minification-constants\";\nimport * as MH from \"@lisn/globals/minification-helpers\";\n\nimport {\n  addClassesNow,\n  removeClassesNow,\n  getData,\n} from \"@lisn/utils/css-alter\";\nimport {\n  waitForMeasureTime,\n  waitForMutateTime,\n} from \"@lisn/utils/dom-optimize\";\n\n/**\n * @param webAnimationCallback This function is called for each\n *                             {@link https://developer.mozilla.org/en-US/docs/Web/API/Animation | Animation}\n *                             on the element. It {@link waitForMeasureTime}\n *                             before reading the animations.\n * @param legacyCallback       This function is called if the browser does not\n *                             support the Web Animations API. It is called\n *                             after {@link waitForMutateTime} so it can safely\n *                             modify styles.\n * @param realtime             If true, then it does not\n *                             {@link waitForMeasureTime} or\n *                             {@link waitForMutateTime} and runs\n *                             synchronously.\n *\n * @category Animations\n */\nexport const iterateAnimations = async (\n  element: Element,\n  webAnimationCallback: (animation: Animation) => void,\n  legacyCallback: (element: Element) => void,\n  realtime = false,\n) => {\n  /* istanbul ignore next */ // jsdom doesn't support Web Animations\n  if (\n    \"getAnimations\" in element &&\n    getData(element, MH.prefixName(\"test-legacy\")) === null\n  ) {\n    if (!realtime) {\n      await waitForMeasureTime();\n    }\n\n    for (const animation of element.getAnimations()) {\n      webAnimationCallback(animation);\n    }\n\n    // Old browsers, no Animation API\n  } else {\n    if (!realtime) {\n      await waitForMutateTime();\n    }\n\n    legacyCallback(element);\n  }\n};\n\n/**\n * @ignore\n * @internal\n */\nexport const resetCssAnimationsNow = (element: Element) => {\n  addClassesNow(element, MC.PREFIX_ANIMATE_DISABLE); // cause it to reset\n  // If we remove the disable class immediately, then it will not have the\n  // effect to reset the animation, since the browser won't see any change in\n  // the classList at the start of the frame. So we ideally need to remove the\n  // disable class after the next paint. However, depending on the animation,\n  // and its state, disabling animation and waiting for the next animation\n  // frame may cause a visible glitch, so we need to force layout now.\n  /* eslint-disable-next-line @typescript-eslint/no-unused-expressions */\n  element[MC.S_CLIENT_WIDTH]; // forces layout\n\n  removeClassesNow(element, MC.PREFIX_ANIMATE_DISABLE);\n};\n"],"mappings":"AAAA;AACA;AACA;;AAEA,OAAO,KAAKA,EAAE;AACd,OAAO,KAAKC,EAAE;AAEd,SACEC,aAAa,EACbC,gBAAgB,EAChBC,OAAO;AAET,SACEC,kBAAkB,EAClBC,iBAAiB;;AAGnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,iBAAiB,GAAG,MAAAA,CAC/BC,OAAgB,EAChBC,oBAAoD,EACpDC,cAA0C,EAC1CC,QAAQ,GAAG,KAAK,KACb;EACH,2BAA2B;EAC3B,IACE,eAAe,IAAIH,OAAO,IAC1BJ,OAAO,CAACI,OAAO,EAAEP,EAAE,CAACW,UAAU,CAAC,aAAa,CAAC,CAAC,KAAK,IAAI,EACvD;IACA,IAAI,CAACD,QAAQ,EAAE;MACb,MAAMN,kBAAkB,CAAC,CAAC;IAC5B;IAEA,KAAK,MAAMQ,SAAS,IAAIL,OAAO,CAACM,aAAa,CAAC,CAAC,EAAE;MAC/CL,oBAAoB,CAACI,SAAS,CAAC;IACjC;;IAEA;EACF,CAAC,MAAM;IACL,IAAI,CAACF,QAAQ,EAAE;MACb,MAAML,iBAAiB,CAAC,CAAC;IAC3B;IAEAI,cAAc,CAACF,OAAO,CAAC;EACzB;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMO,qBAAqB,GAAIP,OAAgB,IAAK;EACzDN,aAAa,CAACM,OAAO,EAAER,EAAE,CAACgB,sBAAsB,CAAC,CAAC,CAAC;EACnD;EACA;EACA;EACA;EACA;EACA;EACA;EACAR,OAAO,CAACR,EAAE,CAACiB,cAAc,CAAC,CAAC,CAAC;;EAE5Bd,gBAAgB,CAACK,OAAO,EAAER,EAAE,CAACgB,sBAAsB,CAAC;AACtD,CAAC","ignoreList":[]}