{"version":3,"file":"local-console.js","names":["MH","joinAsString","LocalConsole","constructor","_defineProperty","debug","isiOS","iOSlog","isJest","jestLog","consoleDebug","log","consoleLog","info","consoleInfo","warn","consoleWarn","error","consoleError","includes","userAgent","args"],"sources":["../../../src/ts/debug/local-console.ts"],"sourcesContent":["/**\n * @module Debugging\n */\n\nimport * as MH from \"@lisn/globals/minification-helpers\";\n\nimport { LogFunction } from \"@lisn/globals/types\";\n\nimport { joinAsString } from \"@lisn/utils/text\";\n\nimport { LevelName, ConsoleInterface } from \"@lisn/debug/types\";\n\n/**\n * Logs to the local browser console. On iOS devices it uses `console.info` for\n * all levels because of a bug in WebKit whereby other log levels don't show in\n * some remote debuggers. Also, iOS console only supports a single argument, so\n * it joins the given arguments as a single string.\n *\n * @category Logging\n */\nexport class LocalConsole implements ConsoleInterface {\n  readonly debug: LogFunction;\n  readonly log: LogFunction;\n  readonly info: LogFunction;\n  readonly warn: LogFunction;\n  readonly error: LogFunction;\n\n  constructor() {\n    this.debug = isiOS ? iOSlog : isJest ? jestLog.debug : MH.consoleDebug;\n    this.log = isiOS ? iOSlog : isJest ? jestLog.log : MH.consoleLog;\n    this.info = isiOS ? iOSlog : isJest ? jestLog.info : MH.consoleInfo;\n    this.warn = isiOS ? iOSlog : isJest ? jestLog.warn : MH.consoleWarn;\n    this.error = isiOS ? iOSlog : isJest ? jestLog.error : MH.consoleError;\n  }\n}\n\n// ------------------------------\n\nconst isiOS = MH.includes(MH.userAgent, \"iPhone OS\");\nconst iOSlog: LogFunction = (...args) =>\n  MH.consoleInfo(joinAsString(\" \", ...args));\n\nconst isJest = MH.includes(MH.userAgent, \" jsdom/\");\nconst jestLog: Record<LevelName, LogFunction> = {\n  debug: (...args) => MH.consoleDebug(joinAsString(\" \", ...args)),\n  log: (...args) => MH.consoleLog(joinAsString(\" \", ...args)),\n  info: (...args) => MH.consoleInfo(joinAsString(\" \", ...args)),\n  warn: (...args) => MH.consoleWarn(joinAsString(\" \", ...args)),\n  error: (...args) => MH.consoleError(joinAsString(\" \", ...args)),\n};\n"],"mappings":";;;AAAA;AACA;AACA;;AAEA,OAAO,KAAKA,EAAE;AAId,SAASC,YAAY;AAIrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,YAAY,CAA6B;EAOpDC,WAAWA,CAAA,EAAG;IAAAC,eAAA;IAAAA,eAAA;IAAAA,eAAA;IAAAA,eAAA;IAAAA,eAAA;IACZ,IAAI,CAACC,KAAK,GAAGC,KAAK,GAAGC,MAAM,GAAGC,MAAM,GAAGC,OAAO,CAACJ,KAAK,GAAGL,EAAE,CAACU,YAAY;IACtE,IAAI,CAACC,GAAG,GAAGL,KAAK,GAAGC,MAAM,GAAGC,MAAM,GAAGC,OAAO,CAACE,GAAG,GAAGX,EAAE,CAACY,UAAU;IAChE,IAAI,CAACC,IAAI,GAAGP,KAAK,GAAGC,MAAM,GAAGC,MAAM,GAAGC,OAAO,CAACI,IAAI,GAAGb,EAAE,CAACc,WAAW;IACnE,IAAI,CAACC,IAAI,GAAGT,KAAK,GAAGC,MAAM,GAAGC,MAAM,GAAGC,OAAO,CAACM,IAAI,GAAGf,EAAE,CAACgB,WAAW;IACnE,IAAI,CAACC,KAAK,GAAGX,KAAK,GAAGC,MAAM,GAAGC,MAAM,GAAGC,OAAO,CAACQ,KAAK,GAAGjB,EAAE,CAACkB,YAAY;EACxE;AACF;;AAEA;;AAEA,MAAMZ,KAAK,GAAGN,EAAE,CAACmB,QAAQ,CAACnB,EAAE,CAACoB,SAAS,EAAE,WAAW,CAAC;AACpD,MAAMb,MAAmB,GAAGA,CAAC,GAAGc,IAAI,KAClCrB,EAAE,CAACc,WAAW,CAACb,YAAY,CAAC,GAAG,EAAE,GAAGoB,IAAI,CAAC,CAAC;AAE5C,MAAMb,MAAM,GAAGR,EAAE,CAACmB,QAAQ,CAACnB,EAAE,CAACoB,SAAS,EAAE,SAAS,CAAC;AACnD,MAAMX,OAAuC,GAAG;EAC9CJ,KAAK,EAAEA,CAAC,GAAGgB,IAAI,KAAKrB,EAAE,CAACU,YAAY,CAACT,YAAY,CAAC,GAAG,EAAE,GAAGoB,IAAI,CAAC,CAAC;EAC/DV,GAAG,EAAEA,CAAC,GAAGU,IAAI,KAAKrB,EAAE,CAACY,UAAU,CAACX,YAAY,CAAC,GAAG,EAAE,GAAGoB,IAAI,CAAC,CAAC;EAC3DR,IAAI,EAAEA,CAAC,GAAGQ,IAAI,KAAKrB,EAAE,CAACc,WAAW,CAACb,YAAY,CAAC,GAAG,EAAE,GAAGoB,IAAI,CAAC,CAAC;EAC7DN,IAAI,EAAEA,CAAC,GAAGM,IAAI,KAAKrB,EAAE,CAACgB,WAAW,CAACf,YAAY,CAAC,GAAG,EAAE,GAAGoB,IAAI,CAAC,CAAC;EAC7DJ,KAAK,EAAEA,CAAC,GAAGI,IAAI,KAAKrB,EAAE,CAACkB,YAAY,CAACjB,YAAY,CAAC,GAAG,EAAE,GAAGoB,IAAI,CAAC;AAChE,CAAC","ignoreList":[]}