{"version":3,"file":"pointer-trigger.js","names":["MC","MH","waitForReferenceElement","omitKeys","validateBoolean","PointerWatcher","registerTrigger","Trigger","ClickTrigger","register","S_CLICK","element","args","actions","config","newConfigValidator","constructor","_defineProperty","getConfig","copyObject","setupWatcher","PressTrigger","S_PRESS","HoverTrigger","S_HOVER","target","key","value","_ref","isLiteralString","undefined","preventDefault","preventSelect","widget","action","lengthOf","targetOf","startHandler","endHandler","S_TOGGLE","run","reverse","reuse","onPointer","merge"],"sources":["../../../src/ts/triggers/pointer-trigger.ts"],"sourcesContent":["/**\n * @module Triggers\n *\n * @categoryDescription Pointer\n * {@link ClickTrigger} allows you to run actions when a user clicks a target\n * element (first time and every other time, i.e. odd number of click), and undo\n * those actions when a user clicks the target element again (or every even\n * number of clicks). It always acts as a toggle.\n *\n * {@link PressTrigger} allows you to run actions when the user presses and\n * holds a pointing device (or their finger) on a target element, and undo those\n * actions when they release their pointing device or lift their finger off.\n *\n * {@link HoverTrigger} allows you to run actions when the user hovers overs a\n * target element, and undo those actions when their pointing device moves off\n * the target. On touch devices it acts just like {@link PressTrigger}.\n */\n\nimport * as MC from \"@lisn/globals/minification-constants\";\nimport * as MH from \"@lisn/globals/minification-helpers\";\n\nimport { waitForReferenceElement } from \"@lisn/utils/dom-search\";\nimport { omitKeys } from \"@lisn/utils/misc\";\nimport { validateBoolean } from \"@lisn/utils/validation\";\n\nimport {\n  PointerWatcher,\n  OnPointerHandler,\n} from \"@lisn/watchers/pointer-watcher\";\n\nimport { Action } from \"@lisn/actions/action\";\n\nimport {\n  registerTrigger,\n  Trigger,\n  TriggerConfig,\n} from \"@lisn/triggers/trigger\";\n\nimport { WidgetConfigValidatorFunc } from \"@lisn/widgets/widget\";\n\n/**\n * {@link ClickTrigger} allows you to run actions when a user clicks a target\n * element (first time and every other time, i.e. odd number of click), and\n * undo them when a user clicks the target element again (or every even number\n * of clicks). It always acts as a toggle.\n *\n * -------\n *\n * To use with auto-widgets (HTML API), see {@link registerTrigger} for the\n * specification.\n *\n * - Arguments: none\n * - Additional trigger options: none\n *   - `target`: A string element specification.\n *     See {@link Utils.getReferenceElement | getReferenceElement}.\n *   - `prevent-default`: A boolean.\n *   - `prevent-select`: A boolean.\n *\n * @example\n * Add classes `active` and `toggled-on` when the user clicks the element\n * (first time and every other time, i.e. odd number of click), remove them\n * when clicked again (or even number of click);\n *\n * ```html\n * <div data-lisn-on-click=\"@add-class=active,toggled-on\"></div>\n * ```\n *\n * @example\n * As above, but using a CSS class instead of data attribute:\n *\n * ```html\n * <div class=\"lisn-on-click--@add-class=active,toggled-on\"></div>\n * ```\n *\n * @example\n * Play the animations on the element 1000ms after the first time the user\n * clicks it.\n *\n * ```html\n * <div data-lisn-on-click=\"@animate +once +delay=1000\"></div>\n * ```\n *\n * @example\n * Add class `visited` the first time the user clicks the element, and play or\n * reverse the animations on the element 1000ms after each time the user clicks\n * it.\n *\n * ```html\n * <div data-lisn-on-click=\"@add-class=visited +once ;\n *                          @animate +delay=1000\"\n * ></div>\n * ```\n *\n * @example\n * When the user clicks the next element with class `box` then add classes `c1`\n * and `c2` to the element (that the trigger is defined on) and enable trigger\n * `my-trigger` defined on this same element; undo all of that on even number\n * of clicks on the reference box element.\n *\n * ```html\n * <div data-lisn-on-click=\"@add-class=c1,c2 @enable=my-trigger +target=next.box\"\n *      data-lisn-on-run=\"@show +id=my-trigger\"\n * ></div>\n * <div class=\"box\"></div>\n * ```\n *\n * @example\n * As above, but using `data-lisn-ref` attribute instead of class selector.\n *\n * ```html\n * <div data-lisn-on-click=\"@add-class=c1,c2 @enable=my-trigger +target=next-box\"\n *      data-lisn-on-run=\"@show +id=my-trigger\"\n * ></div>\n * <div data-lisn-ref=\"box\"></div>\n * ```\n *\n * @category Pointer\n */\nexport class ClickTrigger extends Trigger {\n  readonly getConfig: () => PointerTriggerConfig;\n\n  static register() {\n    registerTrigger(\n      MC.S_CLICK,\n      (element, args, actions, config) =>\n        new ClickTrigger(element, actions, config),\n      newConfigValidator,\n    );\n  }\n\n  /**\n   * If no actions are supplied, nothing is done.\n   *\n   * @throws {@link Errors.LisnUsageError | LisnUsageError}\n   *                If the config is invalid.\n   */\n  constructor(\n    element: Element,\n    actions: Action[],\n    config?: PointerTriggerConfig,\n  ) {\n    super(element, actions, config);\n    this.getConfig = () => MH.copyObject(config ?? {});\n\n    setupWatcher(this, element, actions, config, MC.S_CLICK);\n  }\n}\n\n/**\n * {@link PressTrigger} allows you to run actions when the user presses and\n * holds a pointing device (or their finger) on a target element, and undo\n * those actions when they release their pointing device or lift their finger\n * off.\n *\n * -------\n *\n * To use with auto-widgets (HTML API), see {@link registerTrigger} for the\n * specification.\n *\n * - Arguments: none\n * - Additional trigger options: none\n *   - `target`: A string element specification.\n *     See {@link Utils.getReferenceElement | getReferenceElement}.\n *   - `prevent-default`: boolean\n *   - `prevent-select`: boolean\n *\n * @example\n * Add classes `active` and `pressed` when the user presses and holds (with\n * mouse, finger or any pointer) the element, remove them when they release\n * the mouse.\n *\n * ```html\n * <div data-lisn-on-press=\"@add-class=active,pressed\"></div>\n * ```\n *\n * @example\n * As above, but using a CSS class instead of data attribute:\n *\n * ```html\n * <div class=\"lisn-on-press--@add-class=active,pressed\"></div>\n * ```\n *\n * @example\n * Play the animations on the element 1000ms after the first time the user\n * presses on the element it.\n *\n * ```html\n * <div data-lisn-on-press=\"@animate +once +delay=1000\"></div>\n * ```\n *\n * @example\n * Add class `pressed` the first time the user presses on the element, and\n * play the animations on the element while the user is pressing on the element\n * with a delay of 100ms, reverse the animations as soon as the user releases\n * the mouse.\n *\n * ```html\n * <div data-lisn-on-click=\"@add-class=pressed +once ;\n *                          @animate +do-delay=100\"\n * ></div>\n * ```\n *\n * @example\n * When the user presses and holds the next element with class `box` then add\n * classes `c1` and `c2` to the element (that the trigger is defined on) and\n * enable trigger `my-trigger` defined on this same element; undo all of that\n * when they release the mouse (or lift their finger/pointer device) from the\n * reference box element.\n *\n * ```html\n * <div data-lisn-on-press=\"@add-class=c1,c2 @enable=my-trigger +target=next.box\"\n *      data-lisn-on-run=\"@show +id=my-trigger\"\n * ></div>\n * <div class=\"box\"></div>\n * ```\n *\n * @example\n * As above, but using `data-lisn-ref` attribute instead of class selector.\n *\n * ```html\n * <div data-lisn-on-press=\"@add-class=c1,c2 @enable=my-trigger +target=next-box\"\n *      data-lisn-on-run=\"@show +id=my-trigger\"\n * ></div>\n * <div data-lisn-ref=\"box\"></div>\n * ```\n *\n * @category Pointer\n */\nexport class PressTrigger extends Trigger {\n  readonly getConfig: () => PointerTriggerConfig;\n\n  static register() {\n    registerTrigger(\n      MC.S_PRESS,\n      (element, args, actions, config) =>\n        new PressTrigger(element, actions, config),\n      newConfigValidator,\n    );\n  }\n\n  /**\n   * If no actions are supplied, nothing is done.\n   *\n   * @throws {@link Errors.LisnUsageError | LisnUsageError}\n   *                If the config is invalid.\n   */\n  constructor(\n    element: Element,\n    actions: Action[],\n    config?: PointerTriggerConfig,\n  ) {\n    super(element, actions, config);\n    this.getConfig = () => MH.copyObject(config ?? {});\n\n    setupWatcher(this, element, actions, config, MC.S_PRESS);\n  }\n}\n\n/**\n * {@link HoverTrigger} allows you to run actions when the user hovers overs\n * a target element, and undo those actions when their pointing device moves\n * off the target. On touch devices it acts just like {@link PressTrigger}.\n *\n * -------\n *\n * To use with auto-widgets (HTML API), see {@link registerTrigger} for the\n * specification.\n *\n * - Arguments: none\n * - Additional trigger options: none\n *   - `target`: A string element specification.\n *     See {@link Utils.getReferenceElement | getReferenceElement}.\n *   - `prevent-default`: boolean\n *   - `prevent-select`: boolean\n *\n * @example\n * Add classes `active` and `hovered` when the user hovers over the element,\n * remove them otherwise.\n *\n * ```html\n * <div data-lisn-on-hover=\"@add-class=active,hovered\"></div>\n * ```\n *\n * @example\n * As above, but using a CSS class instead of data attribute:\n *\n * ```html\n * <div class=\"lisn-on-press--@add-class=active,hovered\"></div>\n * ```\n *\n * @example\n * Play the animations on the element 1000ms after the first time the user\n * hovers over the element it.\n *\n * ```html\n * <div data-lisn-on-hover=\"@animate +once +delay=1000\"></div>\n * ```\n *\n * @example\n * Add class `hovered` the first time the user hovers over the element, and\n * play the animations on the element while the user is hovering over the\n * element with a delay of 100ms, reverse the animations as soon as the user\n * mouse leaves the element.\n *\n * ```html\n * <div data-lisn-on-click=\"@add-class=hovered +once ;\n *                          @animate +do-delay=100\"\n * ></div>\n * ```\n *\n * @example\n * When the user hovers over the next element with class `box` then add classes\n * `c1` and `c2` to the element (that the trigger is defined on) and enable\n * trigger `my-trigger` defined on this same element; undo all of that when\n * their pointing device (or finger) moves off the reference element.\n *\n * ```html\n * <div data-lisn-on-hover=\"@add-class=c1,c2 @enable=my-trigger +target=next.box\"\n *      data-lisn-on-run=\"@show +id=my-trigger\"\n * ></div>\n * <div class=\"box\"></div>\n * ```\n *\n * @example\n * As above, but using `data-lisn-ref` attribute instead of class selector.\n *\n * ```html\n * <div data-lisn-on-hover=\"@add-class=c1,c2 @enable=my-trigger +target=next-box\"\n *      data-lisn-on-run=\"@show +id=my-trigger\"\n * ></div>\n * <div data-lisn-ref=\"box\"></div>\n * ```\n *\n * @category Pointer\n */\nexport class HoverTrigger extends Trigger {\n  readonly getConfig: () => PointerTriggerConfig;\n\n  static register() {\n    registerTrigger(\n      MC.S_HOVER,\n      (element, args, actions, config) =>\n        new HoverTrigger(element, actions, config),\n      newConfigValidator,\n    );\n  }\n\n  /**\n   * If no actions are supplied, nothing is done.\n   *\n   * @throws {@link Errors.LisnUsageError | LisnUsageError}\n   *                If the config is invalid.\n   */\n  constructor(\n    element: Element,\n    actions: Action[],\n    config?: PointerTriggerConfig,\n  ) {\n    super(element, actions, config);\n    this.getConfig = () => MH.copyObject(config ?? {});\n\n    setupWatcher(this, element, actions, config, MC.S_HOVER);\n  }\n}\n\n/**\n * @category Pointer\n * @interface\n */\nexport type PointerTriggerConfig = TriggerConfig & {\n  /**\n   * The target to use for the hover action.\n   *\n   * @defaultValue The element on which the {@link Trigger} is defined\n   */\n  target?: Element;\n\n  /**\n   * See {@link Watchers/PointerWatcher.OnPointerOptions | OnPointerOptions}.\n   *\n   * @defaultValue {@link PointerWatcher} default, false\n   */\n  preventDefault?: boolean;\n\n  /**\n   * See {@link Watchers/PointerWatcher.OnPointerOptions | OnPointerOptions}.\n   *\n   * @defaultValue {@link PointerWatcher} default, true\n   */\n  preventSelect?: boolean;\n};\n\n// --------------------\n\nconst newConfigValidator: WidgetConfigValidatorFunc<PointerTriggerConfig> = (\n  element,\n) => {\n  return {\n    target: (key, value) =>\n      (MH.isLiteralString(value)\n        ? waitForReferenceElement(value, element)\n        : null) ?? undefined,\n    preventDefault: validateBoolean,\n    preventSelect: validateBoolean,\n  };\n};\n\nconst setupWatcher = (\n  widget: ClickTrigger | HoverTrigger | PressTrigger,\n  element: Element,\n  actions: Action[],\n  config: PointerTriggerConfig | undefined,\n  action: \"click\" | \"hover\" | \"press\",\n) => {\n  if (!MH.lengthOf(actions)) {\n    return;\n  }\n\n  config ??= {};\n  const target = MH.targetOf(config) || element;\n\n  // For clicks use the trigger's own toggle function so that it remembers ITS\n  // state rather than the odd/even clicks. Otherwise if the trigger is\n  // disabled, then clicking will \"swap\" the state.\n  let startHandler: OnPointerHandler;\n  let endHandler: OnPointerHandler;\n  if (action === MC.S_CLICK) {\n    startHandler = endHandler = widget[MC.S_TOGGLE];\n  } else {\n    startHandler = widget.run;\n    endHandler = widget.reverse;\n  }\n\n  PointerWatcher.reuse().onPointer(\n    target,\n    startHandler,\n    endHandler,\n    MH.merge(\n      {\n        actions: action,\n      },\n      omitKeys(config, { target: null }),\n    ),\n  );\n};\n"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,KAAKA,EAAE;AACd,OAAO,KAAKC,EAAE;AAEd,SAASC,uBAAuB;AAChC,SAASC,QAAQ;AACjB,SAASC,eAAe;AAExB,SACEC,cAAc;AAMhB,SACEC,eAAe,EACfC,OAAO;AAMT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,YAAY,SAASD,OAAO,CAAC;EAGxC,OAAOE,QAAQA,CAAA,EAAG;IAChBH,eAAe,CACbN,EAAE,CAACU,OAAO,EACV,CAACC,OAAO,EAAEC,IAAI,EAAEC,OAAO,EAAEC,MAAM,KAC7B,IAAIN,YAAY,CAACG,OAAO,EAAEE,OAAO,EAAEC,MAAM,CAAC,EAC5CC,kBACF,CAAC;EACH;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEC,WAAWA,CACTL,OAAgB,EAChBE,OAAiB,EACjBC,MAA6B,EAC7B;IACA,KAAK,CAACH,OAAO,EAAEE,OAAO,EAAEC,MAAM,CAAC;IAACG,eAAA;IAChC,IAAI,CAACC,SAAS,GAAG,MAAMjB,EAAE,CAACkB,UAAU,CAACL,MAAM,aAANA,MAAM,cAANA,MAAM,GAAI,CAAC,CAAC,CAAC;IAElDM,YAAY,CAAC,IAAI,EAAET,OAAO,EAAEE,OAAO,EAAEC,MAAM,EAAEd,EAAE,CAACU,OAAO,CAAC;EAC1D;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMW,YAAY,SAASd,OAAO,CAAC;EAGxC,OAAOE,QAAQA,CAAA,EAAG;IAChBH,eAAe,CACbN,EAAE,CAACsB,OAAO,EACV,CAACX,OAAO,EAAEC,IAAI,EAAEC,OAAO,EAAEC,MAAM,KAC7B,IAAIO,YAAY,CAACV,OAAO,EAAEE,OAAO,EAAEC,MAAM,CAAC,EAC5CC,kBACF,CAAC;EACH;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEC,WAAWA,CACTL,OAAgB,EAChBE,OAAiB,EACjBC,MAA6B,EAC7B;IACA,KAAK,CAACH,OAAO,EAAEE,OAAO,EAAEC,MAAM,CAAC;IAACG,eAAA;IAChC,IAAI,CAACC,SAAS,GAAG,MAAMjB,EAAE,CAACkB,UAAU,CAACL,MAAM,aAANA,MAAM,cAANA,MAAM,GAAI,CAAC,CAAC,CAAC;IAElDM,YAAY,CAAC,IAAI,EAAET,OAAO,EAAEE,OAAO,EAAEC,MAAM,EAAEd,EAAE,CAACsB,OAAO,CAAC;EAC1D;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,YAAY,SAAShB,OAAO,CAAC;EAGxC,OAAOE,QAAQA,CAAA,EAAG;IAChBH,eAAe,CACbN,EAAE,CAACwB,OAAO,EACV,CAACb,OAAO,EAAEC,IAAI,EAAEC,OAAO,EAAEC,MAAM,KAC7B,IAAIS,YAAY,CAACZ,OAAO,EAAEE,OAAO,EAAEC,MAAM,CAAC,EAC5CC,kBACF,CAAC;EACH;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEC,WAAWA,CACTL,OAAgB,EAChBE,OAAiB,EACjBC,MAA6B,EAC7B;IACA,KAAK,CAACH,OAAO,EAAEE,OAAO,EAAEC,MAAM,CAAC;IAACG,eAAA;IAChC,IAAI,CAACC,SAAS,GAAG,MAAMjB,EAAE,CAACkB,UAAU,CAACL,MAAM,aAANA,MAAM,cAANA,MAAM,GAAI,CAAC,CAAC,CAAC;IAElDM,YAAY,CAAC,IAAI,EAAET,OAAO,EAAEE,OAAO,EAAEC,MAAM,EAAEd,EAAE,CAACwB,OAAO,CAAC;EAC1D;AACF;;AAEA;AACA;AACA;AACA;;AAwBA;;AAEA,MAAMT,kBAAmE,GACvEJ,OAAO,IACJ;EACH,OAAO;IACLc,MAAM,EAAEA,CAACC,GAAG,EAAEC,KAAK;MAAA,IAAAC,IAAA;MAAA,QAAAA,IAAA,GAChB3B,EAAE,CAAC4B,eAAe,CAACF,KAAK,CAAC,GACtBzB,uBAAuB,CAACyB,KAAK,EAAEhB,OAAO,CAAC,GACvC,IAAI,cAAAiB,IAAA,cAAAA,IAAA,GAAKE,SAAS;IAAA;IACxBC,cAAc,EAAE3B,eAAe;IAC/B4B,aAAa,EAAE5B;EACjB,CAAC;AACH,CAAC;AAED,MAAMgB,YAAY,GAAGA,CACnBa,MAAkD,EAClDtB,OAAgB,EAChBE,OAAiB,EACjBC,MAAwC,EACxCoB,MAAmC,KAChC;EACH,IAAI,CAACjC,EAAE,CAACkC,QAAQ,CAACtB,OAAO,CAAC,EAAE;IACzB;EACF;EAEAC,MAAM,aAANA,MAAM,cAANA,MAAM,GAANA,MAAM,GAAK,CAAC,CAAC;EACb,MAAMW,MAAM,GAAGxB,EAAE,CAACmC,QAAQ,CAACtB,MAAM,CAAC,IAAIH,OAAO;;EAE7C;EACA;EACA;EACA,IAAI0B,YAA8B;EAClC,IAAIC,UAA4B;EAChC,IAAIJ,MAAM,KAAKlC,EAAE,CAACU,OAAO,EAAE;IACzB2B,YAAY,GAAGC,UAAU,GAAGL,MAAM,CAACjC,EAAE,CAACuC,QAAQ,CAAC;EACjD,CAAC,MAAM;IACLF,YAAY,GAAGJ,MAAM,CAACO,GAAG;IACzBF,UAAU,GAAGL,MAAM,CAACQ,OAAO;EAC7B;EAEApC,cAAc,CAACqC,KAAK,CAAC,CAAC,CAACC,SAAS,CAC9BlB,MAAM,EACNY,YAAY,EACZC,UAAU,EACVrC,EAAE,CAAC2C,KAAK,CACN;IACE/B,OAAO,EAAEqB;EACX,CAAC,EACD/B,QAAQ,CAACW,MAAM,EAAE;IAAEW,MAAM,EAAE;EAAK,CAAC,CACnC,CACF,CAAC;AACH,CAAC","ignoreList":[]}