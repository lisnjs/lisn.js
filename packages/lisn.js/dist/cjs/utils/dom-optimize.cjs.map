{"version":3,"file":"dom-optimize.cjs","names":["MH","_interopRequireWildcard","require","_log","_tasks","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","waitForMutateTime","newPromise","resolve","scheduleDOMTask","scheduledDOMMutations","exports","waitForMeasureTime","scheduledDOMMeasurements","waitForSubsequentMutateTime","then","waitForSubsequentMeasureTime","hasScheduledDOMTasks","queue","push","onAnimationFrame","runAllDOMTasks","lengthOf","runDOMTaskQueue","scheduleHighPriorityTask","shift","err","logError"],"sources":["../../../src/ts/utils/dom-optimize.ts"],"sourcesContent":["/**\n * @module Utils\n *\n * @categoryDescription DOM: Preventing layout trashing\n *\n * {@link waitForMeasureTime} allows you to schedule tasks that read or\n * \"measure\", the DOM, for example getting computed styles, taking the\n * `offsetWidth` or the `scrollTop` of an element, etc... anything that _would_\n * force a layout if it runs after the layout has been invalidated by a\n * \"mutation\".\n *\n * See https://gist.github.com/paulirish/5d52fb081b3570c81e3 for a list of\n * operations that should be run on a valid layout to avoid forced layouts.\n *\n * {@link waitForMutateTime} allows you to schedule tasks that invalidate the\n * DOM layout by making changes to the style, inserting or removing elements,\n * etc.\n *\n * These ensure that:\n * - All mutation tasks that would invalidate the style run together before the\n *   next repaint.\n * - All measurement tasks that need a valid style will run as soon as possible\n *   after the next repaint.\n * - If a mutation task is scheduled by another mutation task, it will run in\n *   the same batch.\n * - If a measurement task is scheduled by either a mutation or another\n *   measurement task, it will run in the same batch.\n */\n\nimport * as MH from \"@lisn/globals/minification-helpers\";\n\nimport { logError } from \"@lisn/utils/log\";\nimport { scheduleHighPriorityTask } from \"@lisn/utils/tasks\";\n\n/**\n * Returns a Promise that is resolved before the next repaint.\n *\n * @category DOM: Preventing layout trashing\n */\nexport const waitForMutateTime = () =>\n  MH.newPromise<void>((resolve) => {\n    scheduleDOMTask(scheduledDOMMutations, resolve);\n  });\n\n/**\n * Returns a Promise that is resolved as soon as possible after the next\n * repaint.\n *\n * @category DOM: Preventing layout trashing\n */\nexport const waitForMeasureTime = () =>\n  MH.newPromise<void>((resolve) => {\n    scheduleDOMTask(scheduledDOMMeasurements, resolve);\n  });\n\n/**\n * Returns a Promise that is resolved before the repaint that follows the next\n * repaint.\n *\n * @category DOM: Preventing layout trashing\n */\nexport const waitForSubsequentMutateTime = () =>\n  waitForMutateTime().then(waitForMeasureTime).then(waitForMutateTime);\n\n/**\n * Returns a Promise that is resolved as soon as possible after the repaint\n * that follows the next repaint.\n *\n * @category DOM: Preventing layout trashing\n */\nexport const waitForSubsequentMeasureTime = () =>\n  waitForMeasureTime().then(waitForMutateTime).then(waitForMeasureTime);\n\n// ----------------------------------------\n\ntype TaskResolver = () => void;\ntype DOMTaskQueue = TaskResolver[];\n\nconst scheduledDOMMeasurements: DOMTaskQueue = [];\nconst scheduledDOMMutations: DOMTaskQueue = [];\nlet hasScheduledDOMTasks = false;\n\nconst scheduleDOMTask = (queue: DOMTaskQueue, resolve: TaskResolver) => {\n  queue.push(resolve);\n  if (!hasScheduledDOMTasks) {\n    hasScheduledDOMTasks = true;\n    MH.onAnimationFrame(runAllDOMTasks);\n  }\n};\n\nconst runAllDOMTasks = async () => {\n  // We suspend (await null) after each queue to ensure that microtasks that\n  // have been added by await waitFor* or waitFor*().then run before the next\n  // queue, so that if they schedule more measurements and/or mutations, they\n  // can be flushed now, in the same batch.\n\n  // We're inside an animation frame. Run all mutation tasks now.\n  while (MH.lengthOf(scheduledDOMMutations)) {\n    runDOMTaskQueue(scheduledDOMMutations);\n    // wait for tasks awaiting on the resolved promises, then check queue again\n    await null;\n  }\n\n  // The measurement queue is now empty => scheduling measurements after\n  // this point will result in rescheduling both queues again in the next\n  // frame.\n  //\n  // Schedule the measurement tasks as soon as possible, after the upcoming\n  // paint. Use a macro task with as high priority as possible.\n  scheduleHighPriorityTask(async () => {\n    while (MH.lengthOf(scheduledDOMMeasurements)) {\n      runDOMTaskQueue(scheduledDOMMeasurements);\n      // wait for tasks awaiting on the resolved promises, then check queue again\n      await null;\n    }\n\n    if (MH.lengthOf(scheduledDOMMutations)) {\n      // There have been mutations added. Schedule another flush.\n      MH.onAnimationFrame(runAllDOMTasks);\n    } else {\n      hasScheduledDOMTasks = false;\n    }\n  });\n};\n\nconst runDOMTaskQueue = (queue: DOMTaskQueue) => {\n  let resolve: TaskResolver | undefined;\n  while ((resolve = queue.shift())) {\n    try {\n      resolve();\n    } catch (err) /* istanbul ignore next */ {\n      logError(err);\n    }\n  }\n};\n"],"mappings":"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","ignoreList":[]}