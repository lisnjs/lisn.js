{"version":3,"file":"auto-hide.js","names":["MC","MH","hideElement","hideAndRemoveElement","waitForPageReady","validateString","validateNumber","DOMWatcher","Widget","registerWidget","AutoHide","_Widget","element","config","_this","_classCallCheck","_callSuper","selector","watcher","create","root","subtree","watcherOptions","_defineProperty","categories","S_ADDED","S_ATTRIBUTE","S_SKIP_INITIAL","hideOrRemoveEl","remove","hideRelevant","isDisabled","targetElements","querySelectorAll","_iterator","_createForOfIteratorHelper","_step","s","n","done","_config$delay","elem","value","delay","DEFAULT_DELAY","err","e","f","addWatcher","onMutation","removeWatcher","offMutation","then","isDestroyed","onDisable","onEnable","_inherits","_createClass","key","get","id","instance","_superPropGet","isInstanceOf","register","_iterator2","WIDGET_NAME_HIDE","WIDGET_NAME_REMOVE","_step2","_step2$value","_slicedToArray","name","newConfigValidator","supportsMultiple","autoRemove"],"sources":["../../../src/ts/widgets/auto-hide.ts"],"sourcesContent":["/**\n * @module Widgets\n */\n\nimport * as MC from \"@lisn/globals/minification-constants\";\nimport * as MH from \"@lisn/globals/minification-helpers\";\n\nimport { hideElement } from \"@lisn/utils/css-alter\";\nimport { hideAndRemoveElement } from \"@lisn/utils/dom-alter\";\nimport { waitForPageReady } from \"@lisn/utils/dom-events\";\nimport { validateString, validateNumber } from \"@lisn/utils/validation\";\n\nimport { DOMWatcher, OnMutationOptions } from \"@lisn/watchers/dom-watcher\";\n\nimport {\n  Widget,\n  WidgetConfigValidatorObject,\n  registerWidget,\n} from \"@lisn/widgets/widget\";\n\n/**\n * Configures the given element as an {@link AutoHide} widget.\n *\n * The AutoHide widget automatically hides (and optionally removes) the given\n * element, or children of it that match a given selector, after a certain\n * delay.\n *\n * It executes these actions every time the matching element(s) have a change\n * of attribute or appear (are inserted) into the DOM.\n *\n * To use with auto-widgets (HTML API) (see\n * {@link Settings.settings.autoWidgets | settings.autoWidgets}), the following\n * CSS classes or data attributes are recognized:\n * - `lisn-auto-hide` class or `data-lisn-auto-hide` attribute\n * - `lisn-auto-remove` class or `data-lisn-auto-remove` attribute (enables\n *   {@link AutoHideConfig.remove})\n *\n * **NOTE:** This widget supports multiple instances per element, you can\n * specify multiple widget configurations, separated with \";\".\n *\n * See below examples for what values you can use set for the data attributes\n * in order to modify the configuration of the automatically created widget.\n *\n * @example\n * This will automatically hide (with class `lisn-hide`) the element 3 seconds\n * (default delay) after it is inserted into the DOM or after it gets any\n * attributes changed on it (for example that might show it again).\n *\n * ```html\n * <div class=\"lisn-auto-hide\">\n *   Automatically hidden in 3s.\n * </div>\n * ```\n *\n * @example\n * This will automatically hide and then remove the element 3 seconds (default\n * delay) after it is inserted into the DOM.\n *\n * ```html\n * <div class=\"lisn-auto-remove\">\n *   Automatically hidden and removed in 3s.\n * </div>\n * ```\n *\n * @example\n * This will automatically\n * - hide `p` elements with class `message` 2 seconds after they are inserted\n *   or changed\n * - hide `p` elements with class `warning` 5 seconds after they are inserted\n *   or changed; and it will save that particular {@link AutoHide} widget with\n *   ID `myID` so that it can be looked up using {@link AutoHide.get}\n * - remove `p` elements with class `disposable` 3 seconds (default delay)\n *   after they are inserted or changed\n *\n * ```html\n * <div data-lisn-auto-hide=\"selector=p.message delay=2000 ;\n *                           selector=p.warning delay=5000 id=myID\"\n *      data-lisn-auto-remove=\"selector=p.disposable\">\n *   <p>Some text, this will stay.</p>\n *   <p class=\"message\">\n *     Automatically hidden in 2s.\n *   </p>\n *   <p class=\"warning\">\n *     Automatically hidden in 5s.\n *   </p>\n *   <p class=\"disposable\">\n *     Automatically hidden and removed in 3s.\n *   </p>\n * </div>\n * ```\n */\nexport class AutoHide extends Widget {\n  static get(element: Element, id: string): AutoHide | null {\n    const instance = super.get(element, id);\n    if (MH.isInstanceOf(instance, AutoHide)) {\n      return instance;\n    }\n    return null;\n  }\n\n  static register() {\n    for (const [name, remove] of [\n      [WIDGET_NAME_HIDE, false],\n      [WIDGET_NAME_REMOVE, true],\n    ] as const) {\n      registerWidget(\n        name,\n        (element, config) => {\n          return new AutoHide(element, config);\n        },\n        newConfigValidator(remove),\n        { supportsMultiple: true },\n      );\n    }\n  }\n\n  constructor(element: Element, config?: AutoHideConfig) {\n    super(element, config);\n\n    const selector = config?.selector;\n\n    const watcher = DOMWatcher.create({\n      root: element,\n      subtree: selector ? true : false,\n    });\n\n    // Watch for attribute change on this element, and for relevant children\n    // being added/changed\n    const watcherOptions: OnMutationOptions = selector\n      ? {\n          selector: selector,\n          categories: [MC.S_ADDED, MC.S_ATTRIBUTE],\n          [MC.S_SKIP_INITIAL]: true,\n        }\n      : {\n          categories: [MC.S_ATTRIBUTE],\n          [MC.S_SKIP_INITIAL]: true,\n        };\n\n    const hideOrRemoveEl = config?.remove ? hideAndRemoveElement : hideElement;\n\n    const hideRelevant = () => {\n      if (this.isDisabled()) {\n        return;\n      }\n\n      const targetElements = selector\n        ? MH.querySelectorAll(element, selector)\n        : [element];\n\n      for (const elem of targetElements) {\n        hideOrRemoveEl(elem, config?.delay ?? DEFAULT_DELAY);\n      }\n    };\n\n    const addWatcher = () => watcher.onMutation(hideRelevant, watcherOptions);\n\n    const removeWatcher = () => watcher.offMutation(hideRelevant);\n\n    // ------------------------------\n\n    // Don't hide/remove before the page is loaded\n    waitForPageReady().then(() => {\n      // Hide initially\n      if (this.isDestroyed()) {\n        return;\n      }\n\n      hideRelevant();\n      addWatcher();\n    });\n\n    this.onDisable(removeWatcher);\n    this.onEnable(() => {\n      hideRelevant();\n      addWatcher();\n    });\n  }\n}\n\n/**\n * @interface\n */\nexport type AutoHideConfig = {\n  /**\n   * An ID for the widget so that it can be looked up by element and ID using\n   * {@link AutoHide.get}. It has to be unique for each element, but you can\n   * use the same ID on different elements.\n   *\n   * @defaultValue undefined\n   */\n  id?: string;\n\n  /**\n   * If true, the matched elements are removed from the DOM instead of just\n   * hidden.\n   *\n   * @defaultValue false\n   */\n  remove?: boolean;\n\n  /**\n   * If given, then the elements to be hidden/removed are selected using the\n   * given `selector` starting at the container element. If not given, then\n   * the container element itself is the target to be hidden/removed.\n   *\n   * E.g. if `selector` is `p.message`, then any newly added/changed `<p>`\n   * elements with class `message` nested under the container element will be\n   * auto-hidden/removed.\n   *\n   * @defaultValue undefined\n   */\n  selector?: string;\n\n  /**\n   * How long to wait before hiding or removing the matched elements.\n   *\n   * @defaultValue 3000\n   */\n  delay?: number;\n};\n\n// ------------------------------\n\nconst WIDGET_NAME_HIDE = \"auto-hide\";\nconst WIDGET_NAME_REMOVE = \"auto-remove\";\n\nconst DEFAULT_DELAY = 3000;\n\nconst newConfigValidator = (\n  autoRemove: boolean,\n): WidgetConfigValidatorObject<AutoHideConfig> => {\n  return {\n    id: validateString,\n    remove: () => autoRemove,\n    selector: validateString,\n    delay: validateNumber,\n  };\n};\n"],"mappings":"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","ignoreList":[]}