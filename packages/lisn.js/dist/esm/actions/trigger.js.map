{"version":3,"file":"trigger.js","names":["MC","MH","logWarn","waitForDelay","formatAsString","Trigger","registerAction","Enable","register","element","ids","constructor","_defineProperty","_enable","_disable","_toggleEnable","getMethods","do","undo","S_TOGGLE","Disable","Run","_run","_reverse","_toggle","triggerPromises","getTriggers","call","method","triggers","trigger","lengthOf","id","get","push"],"sources":["../../../src/ts/actions/trigger.ts"],"sourcesContent":["/**\n * @module Actions\n *\n * @categoryDescription Controlling triggers\n * {@link Enable} and {@link Disable} enable or disable a list of triggers\n * defined on the given element.\n *\n * {@link Run} runs or reverses a list of triggers defined on the given\n * element.\n */\n\nimport * as MC from \"@lisn/globals/minification-constants\";\nimport * as MH from \"@lisn/globals/minification-helpers\";\n\nimport { logWarn } from \"@lisn/utils/log\";\nimport { waitForDelay } from \"@lisn/utils/tasks\";\nimport { formatAsString } from \"@lisn/utils/text\";\n\nimport { Trigger } from \"@lisn/triggers/trigger\";\n\nimport { Action, registerAction } from \"@lisn/actions/action\";\n\n/**\n * Enables or disables a list of triggers defined on the given element.\n *\n * **IMPORTANT:** When constructed, it disables all given triggers as a form of\n * initialization.\n *\n * -------\n *\n * To use with auto-widgets (HTML API) as part of a trigger specification:\n *   - Action name: \"enable\".\n *   - Accepted string arguments: one or more unique IDs of triggers defined on\n *     the given element\n *\n * @example\n * ```html\n * <button id=\"btn\">Enable/disable</button>\n * <button data-lisn-on-click=\"\n *         @enable=triggerA,triggerB +target=#btn\n *         @add-class=clsA +id=triggerA\n *      \"\n *      data-lisn-on-click=\"@add-class=clsB +id=triggerB\"\n * ></button>\n * ```\n *\n * @category Controlling triggers\n */\nexport class Enable implements Action {\n  /**\n   * Enables the triggers with IDs given to the constructor.\n   */\n  readonly do: () => Promise<void>;\n\n  /**\n   * Disables the triggers with IDs given to the constructor.\n   */\n  readonly undo: () => Promise<void>;\n\n  /**\n   * Toggles the enabled state on each trigger given to the constructor.\n   */\n  readonly toggle: () => Promise<void>;\n\n  static register() {\n    registerAction(\"enable\", (element, ids) => new Enable(element, ...ids));\n  }\n\n  constructor(element: Element, ...ids: string[]) {\n    const { _enable, _disable, _toggleEnable } = getMethods(element, ids);\n    _disable(); // initial state\n\n    this.do = _enable;\n    this.undo = _disable;\n    this[MC.S_TOGGLE] = _toggleEnable;\n  }\n}\n\n/**\n * Disables or enables a list of triggers defined on the given element.\n *\n * **IMPORTANT:** When constructed, it enables all given triggers as a form of\n * initialization.\n *\n * -------\n *\n * To use with auto-widgets (HTML API) as part of a trigger specification:\n *   - Action name: \"disable\".\n *   - Accepted string arguments: one or more unique IDs of triggers defined on\n *     the given element\n *\n * @example\n * ```html\n * <button id=\"btn\">Enable/disable</button>\n * <button data-lisn-on-click=\"\n *         @disable=triggerA,triggerB +target=#btn\n *         @add-class=clsA +id=triggerA\n *      \"\n *      data-lisn-on-click=\"@add-class=clsB +id=triggerB\"\n * ></button>\n * ```\n *\n * @category Controlling triggers\n */\nexport class Disable implements Action {\n  /**\n   * Disables the triggers with IDs given to the constructor.\n   */\n  readonly do: () => Promise<void>;\n\n  /**\n   * Enables the triggers with IDs given to the constructor.\n   */\n  readonly undo: () => Promise<void>;\n\n  /**\n   * Toggles the enabled state on each trigger given to the constructor.\n   */\n  readonly toggle: () => Promise<void>;\n\n  static register() {\n    registerAction(\"disable\", (element, ids) => new Disable(element, ...ids));\n  }\n\n  constructor(element: Element, ...ids: string[]) {\n    const { _enable, _disable, _toggleEnable } = getMethods(element, ids);\n    _enable(); // initial state\n\n    this.do = _disable;\n    this.undo = _enable;\n    this[MC.S_TOGGLE] = _toggleEnable;\n  }\n}\n\n/**\n * Runs or reverses a list of triggers defined on the given element.\n *\n * -------\n *\n * To use with auto-widgets (HTML API) as part of a trigger specification:\n *   - Action name: \"run\".\n *   - Accepted string arguments: one or more unique IDs of triggers defined on\n *     the given element\n *\n * @example\n * ```html\n * <button data-lisn-on-click=\"\n *         @run=triggerA,triggerB\n *         @add-class=clsA +id=triggerA\n *      \"\n *      data-lisn-on-run=\"@add-class=clsB +id=triggerB\"\n * ></button>\n * ```\n *\n * @category Controlling triggers\n */\nexport class Run implements Action {\n  /**\n   * Runs the triggers with IDs given to the constructor.\n   */\n  readonly do: () => Promise<void>;\n\n  /**\n   * Reverses the triggers with IDs given to the constructor.\n   */\n  readonly undo: () => Promise<void>;\n\n  /**\n   * Toggles the triggers with IDs given to the constructor.\n   */\n  readonly toggle: () => Promise<void>;\n\n  static register() {\n    registerAction(\"run\", (element, ids) => new Run(element, ...ids));\n  }\n\n  constructor(element: Element, ...ids: string[]) {\n    const { _run, _reverse, _toggle } = getMethods(element, ids);\n\n    this.do = _run;\n    this.undo = _reverse;\n    this[MC.S_TOGGLE] = _toggle;\n  }\n}\n\n// --------------------\n\nconst getMethods = (element: Element, ids: string[]) => {\n  const triggerPromises = getTriggers(element, ids);\n  const call = async (\n    method:\n      | \"enable\"\n      | \"disable\"\n      | \"toggleEnable\"\n      | \"run\"\n      | \"reverse\"\n      | \"toggle\",\n  ) => {\n    const triggers = await triggerPromises;\n    for (const trigger of triggers) {\n      trigger[method]();\n    }\n  };\n\n  return {\n    _enable: () => call(\"enable\"),\n    _disable: () => call(\"disable\"),\n    _toggleEnable: () => call(\"toggleEnable\"),\n    _run: () => call(\"run\"),\n    _reverse: () => call(\"reverse\"),\n    _toggle: () => call(MC.S_TOGGLE),\n  };\n};\n\nconst getTriggers = async (element: Element, ids: string[]) => {\n  const triggers: Trigger[] = [];\n  if (!MH.lengthOf(ids)) {\n    logWarn(\"At least 1 ID is required for enable action\");\n    return triggers;\n  }\n\n  for (const id of ids) {\n    let trigger = Trigger.get(element, id);\n    if (!trigger) {\n      await waitForDelay(0); // in case it's being processed now\n      trigger = Trigger.get(element, id);\n\n      if (!trigger) {\n        logWarn(\n          `No trigger with ID ${id} for element ${formatAsString(element)}`,\n        );\n        continue;\n      }\n    }\n\n    triggers.push(trigger);\n  }\n\n  return triggers;\n};\n"],"mappings":"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","ignoreList":[]}