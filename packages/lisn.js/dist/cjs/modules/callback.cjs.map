{"version":3,"file":"callback.cjs","names":["MC","_interopRequireWildcard","require","MH","_tasks","_debug","_interopRequireDefault","_Callback","e","__esModule","_getRequireWildcardCache","WeakMap","r","t","_typeof","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","o","Symbol","iterator","constructor","prototype","_regeneratorRuntime","value","c","asyncIterator","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","name","mark","setPrototypeOf","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","_catch","delegateYield","asyncGeneratorStep","_asyncToGenerator","arguments","apply","_next","_throw","_createForOfIteratorHelper","Array","isArray","_unsupportedIterableToArray","_n","F","_arrayLikeToArray","toString","from","test","_defineProperties","_toPropertyKey","key","_createClass","_classCallCheck","_defineProperty","_toPrimitive","toPrimitive","String","Number","wrapCallback","exports","handlerOrCallback","debounceWindow","undefined","isFunction","isRemoved","callback","callablesMap","handler","wrapper","Callback","getDebouncedHandler","onRemove","remove","_this","logger","debug","Logger","logAtCreation","id","SYMBOL","newSet","debug8","_iterator","_step","rmFn","err","CallbackScheduler","_clear","fn","add","_len","args","_key","newPromise","reject","usageError","_push","_callee","result","_callee$","_context","t0","REMOVE","newWeakMap","queues","newMap","flush","_ref2","_callee2","queue","_callee2$","_context2","lengthOf","_running","_task","shift","_x","item","_onRemove","deleteKey","task"],"sources":["../../../src/ts/modules/callback.ts"],"sourcesContent":["/**\n * @module Modules/Callback\n */\n\nimport * as MC from \"@lisn/globals/minification-constants\";\nimport * as MH from \"@lisn/globals/minification-helpers\";\n\nimport { getDebouncedHandler } from \"@lisn/utils/tasks\";\n\nimport debug from \"@lisn/debug/debug\";\n\n/**\n * @typeParam Args  See {@link Callback}\n */\nexport type CallbackHandler<Args extends unknown[] = []> = (\n  ...args: Args\n) => CallbackReturnType | Promise<CallbackReturnType>;\n\nexport type CallbackReturnType =\n  | typeof Callback.KEEP\n  | typeof Callback.REMOVE\n  | void;\n\n/**\n * For minification optimization. Exposed through Callback.wrap.\n *\n * @ignore\n * @internal\n */\nexport const wrapCallback = <Args extends unknown[] = []>(\n  handlerOrCallback: CallbackHandler<Args> | Callback<Args>,\n  debounceWindow = 0,\n): Callback<Args> => {\n  const isFunction = MH.isFunction(handlerOrCallback);\n  let isRemoved = () => false;\n\n  if (isFunction) {\n    // check if it's an invoke method\n    const callback = callablesMap.get(handlerOrCallback);\n    if (callback) {\n      return wrapCallback(callback);\n    }\n  } else {\n    isRemoved = handlerOrCallback.isRemoved;\n  }\n\n  const handler: CallbackHandler<Args> = isFunction\n    ? handlerOrCallback\n    : (...args: Args) => handlerOrCallback.invoke(...args);\n\n  const wrapper = new Callback<Args>(\n    getDebouncedHandler(debounceWindow, (...args: Args) => {\n      if (!isRemoved()) {\n        return handler(...args);\n      }\n    }),\n  );\n\n  if (!isFunction) {\n    handlerOrCallback.onRemove(wrapper.remove);\n  }\n\n  return wrapper;\n};\n\n/**\n * {@link Callback} wraps user-supplied callbacks. Supports\n * - removing a callback either when calling {@link remove} or if the user\n *   handler returns {@link Callback.REMOVE}\n * - calling custom {@link onRemove} hooks\n * - debouncing (via {@link wrap})\n * - awaiting on an asynchronous handler and ensuring that the handler does not\n *  run concurrently to itself, i.e. subsequent {@link invoke}s will be queued\n *\n * @typeParam Args  The type of arguments that the callback expects.\n */\nexport class Callback<Args extends unknown[] = []> {\n  /**\n   * Possible return value for the handler.\n   *\n   * Do not do anything. Same as not retuning anything from the function.\n   */\n  static readonly KEEP: unique symbol = MC.SYMBOL(\n    \"KEEP\",\n  ) as typeof Callback.KEEP;\n\n  /**\n   * Possible return value for the handler.\n   *\n   * Will remove this callback.\n   */\n  static readonly REMOVE: unique symbol = MC.SYMBOL(\n    \"REMOVE\",\n  ) as typeof Callback.REMOVE;\n\n  /**\n   * Call the handler with the given arguments.\n   *\n   * If the handler is asynchronous, it awaits on it. Furthermore, calls will\n   * always wait for previous calls to this handler to complete first, i.e. it\n   * never runs concurrently to itself. If you need multiple calls to the async\n   * handler to run concurrently, then wrap it in a non-async function that\n   * does not await it.\n   *\n   * The returned promise is rejected in two cases:\n   * - If the callback throws an error or returns a rejected Promise.\n   * - If the callback is removed _after_ you call {@link invoke} but before the\n   *   handler is actually called (while it's waiting in the queue to be called)\n   *   In this case, the rejection reason is {@link Callback.REMOVE}.\n   *\n   * @throws {@link Errors.LisnUsageError | LisnUsageError}\n   *                If the callback is already removed.\n   */\n  readonly invoke: (...args: Args) => Promise<void>;\n\n  /**\n   * Mark the callback as removed and call the registered {@link onRemove} hooks.\n   *\n   * Future attempts to call it will result in\n   * {@link Errors.LisnUsageError | LisnUsageError}.\n   */\n  readonly remove: () => void;\n\n  /**\n   * Returns true if the callback has been removed and cannot be called again.\n   */\n  readonly isRemoved: () => boolean;\n\n  /**\n   * Registers the given function to be called when the callback is removed.\n   *\n   * You can call {@link onRemove} multiple times to register multiple hooks.\n   */\n  readonly onRemove: (fn: () => void) => void;\n\n  /**\n   * Wraps the given handler or callback as a callback, optionally debounced by\n   * the given debounce window.\n   *\n   * If the argument is already a callback _or an invoke method of a callback_,\n   * then the wrapper will call that callback and return the same value as it.\n   * It will also set up the returned wrapper callback so that it is removed\n   * when the original (given) callback is removed. However, removing the\n   * returned wrapper callback will _not_ cause the original callback (being\n   * wrapped) to be removed. If you want to do this, then do\n   * `wrapper.onRemove(wrapped.remove)`.\n   *\n   * Note that if the argument is a callback that's already debounced by a\n   * _larger_ window, then `debounceWindow` will have no effect.\n   *\n   * @param {} debounceWindow  If non-0, the callback will be called at most\n   *                           every `debounceWindow` ms. The arguments it will\n   *                           be called with will be the last arguments the\n   *                           wrapper was called with.\n   */\n  static readonly wrap = wrapCallback;\n\n  /**\n   * @param {} handler     The actual function to call. This should return one of\n   *                       the known {@link CallbackReturnType} values.\n   */\n  constructor(handler: CallbackHandler<Args>) {\n    const logger = debug\n      ? new debug.Logger({ name: \"Callback\", logAtCreation: handler })\n      : null;\n\n    let isRemoved = false;\n    const id = MC.SYMBOL();\n\n    const onRemove = MH.newSet<() => void>();\n\n    this.isRemoved = () => isRemoved;\n\n    this.remove = () => {\n      debug: logger?.debug8(\"Removing\");\n      if (!isRemoved) {\n        isRemoved = true;\n\n        for (const rmFn of onRemove) {\n          rmFn();\n        }\n\n        CallbackScheduler._clear(id);\n      }\n    };\n\n    this.onRemove = (fn) => onRemove.add(fn);\n\n    this.invoke = (...args) =>\n      MH.newPromise((resolve, reject) => {\n        debug: logger?.debug8(\"Calling with\", args);\n        if (isRemoved) {\n          reject(MH.usageError(\"Callback has been removed\"));\n          return;\n        }\n\n        CallbackScheduler._push(\n          id,\n          async () => {\n            let result;\n            try {\n              result = await handler(...args);\n            } catch (err) {\n              reject(err);\n            }\n\n            if (result === Callback.REMOVE) {\n              this.remove();\n            }\n\n            resolve();\n          },\n          reject,\n        );\n      });\n\n    callablesMap.set(this.invoke, this);\n  }\n}\n\n// ----------------------------------------\n\ntype CallbackSchedulerTask = () => Promise<void>;\ntype CallbackSchedulerQueueItem = {\n  _task: CallbackSchedulerTask;\n  _running: boolean;\n  _onRemove: (reason: typeof Callback.REMOVE) => void;\n};\n\ntype CallableCallback<Args extends unknown[] = []> = (...args: Args) => void;\n\nconst callablesMap = MH.newWeakMap<CallableCallback, Callback>();\n\nconst CallbackScheduler = (() => {\n  const queues = MH.newMap<symbol, CallbackSchedulerQueueItem[]>();\n\n  const flush = async (queue: CallbackSchedulerQueueItem[]) => {\n    // So that callbacks are always called asynchronously for consistency,\n    // await here before calling 1st\n    await null;\n    while (MH.lengthOf(queue)) {\n      // shouldn't throw anything as Callback must catch errors\n      queue[0]._running = true;\n      await queue[0]._task();\n\n      // only remove when done\n      queue.shift();\n    }\n  };\n\n  return {\n    _clear: (id: symbol) => {\n      const queue = queues.get(id);\n      if (queue) {\n        let item: CallbackSchedulerQueueItem | undefined;\n        while ((item = queue.shift())) {\n          if (!item._running) {\n            item._onRemove(Callback.REMOVE);\n          }\n        }\n\n        MH.deleteKey(queues, id);\n      }\n    },\n\n    _push: (id: symbol, task: CallbackSchedulerTask, onRemove: () => void) => {\n      let queue = queues.get(id);\n      if (!queue) {\n        queue = [];\n        queues.set(id, queue);\n      }\n\n      queue.push({ _task: task, _onRemove: onRemove, _running: false });\n      if (MH.lengthOf(queue) === 1) {\n        flush(queue);\n      }\n    },\n  };\n})();\n"],"mappings":"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","ignoreList":[]}