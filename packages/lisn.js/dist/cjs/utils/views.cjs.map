{"version":3,"file":"views.cjs","names":["MC","_interopRequireWildcard","require","MH","_validation","_bitSpaces","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","isValidScrollOffset","offset","match","OFFSET_REGEX","exports","isValidView","view","includes","VIEWS","isValidViewList","views","isValidStrList","getOppositeViews","usageError","bitmask","getViewsBitmask","oppositeBitmask","VIEWS_SPACE","bit","at","above","below","left","right","getViewsFromBitmask","viewsStr","viewsBitmask","validateStrList","v","parseScrollOffset","input","reference","value","bugError","S_AT","S_ABOVE","S_BELOW","S_LEFT","S_RIGHT","createBitSpace","newBitSpaces","RegExp","start","end","name","nameOf","push"],"sources":["../../../src/ts/utils/views.ts"],"sourcesContent":["/**\n * @module Utils\n */\n\nimport * as MC from \"@lisn/globals/minification-constants\";\nimport * as MH from \"@lisn/globals/minification-helpers\";\n\nimport { ScrollOffset, View, CommaSeparatedStr } from \"@lisn/globals/types\";\n\nimport { isValidStrList, validateStrList } from \"@lisn/utils/validation\";\n\nimport { newBitSpaces, createBitSpace } from \"@lisn/modules/bit-spaces\";\n\n/**\n * Returns true if the given string is a valid {@link ScrollOffset}.\n *\n * @category Validation\n */\nexport const isValidScrollOffset = (offset: string): offset is ScrollOffset =>\n  offset.match(OFFSET_REGEX) !== null;\n\n/**\n * Returns true if the given string is a valid \"view\".\n *\n * @category Validation\n */\nexport const isValidView = (view: string): view is View =>\n  MH.includes(VIEWS, view);\n\n/**\n * Returns true if the given string or array is a list of valid views.\n *\n * @category Validation\n */\nexport const isValidViewList = (views: string | string[]) =>\n  isValidStrList(views, isValidView, false);\n\n/**\n * Returns the views that are opposite to the given set of views.\n *\n * Above and below are opposites, and so are left and right.\n *\n * \"at\" is a special case. It is considered opposite to any view in the sense\n * that if it is not present in `views` it will always be included in the\n * returned array. However it is not \"strongly\" opposite in the sense that it\n * will not cause other views to be included in the result unless it is the\n * only view in `views`. That is, there are two sets of strongly opposite pairs\n * (\"above\"/\"below\" and \"left\"/\"right\") and at least one of the two opposing\n * views of a pair must be present for the other one to be included, _except in\n * the special case of `views` being \"at\"_. See examples below for\n * clarification.\n *\n * **Note** that the order of the returned array is not defined.\n *\n * @example\n * Returns [\"above\", \"below\", \"left\", \"right\"] (not definite order), since\n * \"at\" is the only view present and is opposite to all:\n *\n * ```javascript\n * getOppositeViews(\"at\"); // -> [\"above\", \"below\", \"left\", \"right\"] (not necessarily in this order)\n * ```\n *\n * @example\n * Returns [\"below\"]. \"left\" and \"right\" are NOT included even though \"at\" is\n * given, because at least one of the two opposing views of a pair must be\n * present for the other one to be included (except in the special case of\n * `views` being \"at\").\n *\n * ```javascript\n * getOppositeViews(\"at,above\"); // -> [\"below\"]\n * ```\n *\n * @example\n * ```javascript\n * getOppositeViews(\"above\"); // -> [\"at\", \"below\"] (not necessarily in this order)\n * ```\n *\n * @example\n * ```javascript\n * getOppositeViews(\"above,below\"); // -> [\"at\"]\n * ```\n *\n * @example\n * ```javascript\n * getOppositeViews(\"at,above,below\"); // -> []\n * ```\n *\n * @example\n * ```javascript\n * getOppositeViews(\"above,right\"); // -> [\"at\", \"below\", \"left\"] (not necessarily in this order)\n * ```\n *\n * @example\n * ```javascript\n * getOppositeViews(\"at,above,right\"); // -> [\"below\", \"left\"] (not necessarily in this order)\n * ```\n *\n * @throws {@link Errors.LisnUsageError | LisnUsageError}\n *                If the given view is not valid, including if it's empty \"\".\n *\n * @category Views\n */\nexport const getOppositeViews = (\n  views: CommaSeparatedStr<View> | View[],\n): View[] => {\n  if (!views) {\n    throw MH.usageError(\"'views' cannot be empty\");\n  }\n\n  const bitmask = getViewsBitmask(views);\n  let oppositeBitmask = VIEWS_SPACE.bitmask & ~bitmask; // initial, all not present in bitmask\n\n  // If the given view is \"at\", then include all the other ones.\n  // Otherwise include only the opposite views of those directional\n  // (above/below/left/right) that are present. I.e. if neither left not right\n  // is given, then don't include them\n  if (bitmask !== VIEWS_SPACE.bit.at) {\n    // remove the opposite ones to those not present\n    if (!(bitmask & VIEWS_SPACE.bit.above)) {\n      oppositeBitmask &= ~VIEWS_SPACE.bit.below;\n    }\n\n    if (!(bitmask & VIEWS_SPACE.bit.below)) {\n      oppositeBitmask &= ~VIEWS_SPACE.bit.above;\n    }\n\n    if (!(bitmask & VIEWS_SPACE.bit.left)) {\n      oppositeBitmask &= ~VIEWS_SPACE.bit.right;\n    }\n\n    if (!(bitmask & VIEWS_SPACE.bit.right)) {\n      oppositeBitmask &= ~VIEWS_SPACE.bit.left;\n    }\n  }\n\n  return getViewsFromBitmask(oppositeBitmask);\n};\n\n/**\n * @ignore\n * @internal\n */\nexport const getViewsBitmask = (\n  viewsStr: View[] | string | undefined,\n): number => {\n  let viewsBitmask = 0;\n  const views = validateStrList(\"views\", viewsStr, isValidView);\n\n  if (views) {\n    for (const v of views) {\n      if (!isValidView(v)) {\n        throw MH.usageError(`Unknown view '${v}'`);\n      }\n\n      viewsBitmask |= VIEWS_SPACE.bit[v];\n    }\n  } else {\n    viewsBitmask = VIEWS_SPACE.bitmask; // default: all\n  }\n\n  return viewsBitmask;\n};\n\n/**\n * @ignore\n * @internal\n */\nexport const parseScrollOffset = (input: string) => {\n  const match = input.match(OFFSET_REGEX);\n  if (!match) {\n    throw MH.usageError(`Invalid offset: '${input}'`);\n  }\n\n  const reference = match[1];\n  const value = match[2];\n  /* istanbul ignore next */ // shouldn't happen\n  if (!reference || !value) {\n    throw MH.bugError(\"Offset regex: blank capture groups\");\n  }\n\n  return { reference, value };\n};\n\nconst VIEWS: View[] = [\n  MC.S_AT,\n  MC.S_ABOVE,\n  MC.S_BELOW,\n  MC.S_LEFT,\n  MC.S_RIGHT,\n] as const;\n\n/**\n * @ignore\n * @internal\n */\nexport const VIEWS_SPACE = createBitSpace<View>(newBitSpaces(), ...VIEWS);\n\n// --------------------\n\nconst OFFSET_REGEX = RegExp(\"(top|bottom|left|right): *([^ ].+)\");\n\nconst getViewsFromBitmask = (bitmask: number): View[] => {\n  const views: View[] = [];\n  for (let bit = VIEWS_SPACE.start; bit <= VIEWS_SPACE.end; bit++) {\n    const value = 1 << bit;\n    if (bitmask & value) {\n      const name = VIEWS_SPACE.nameOf(value);\n      if (name) {\n        views.push(name);\n      }\n    }\n  }\n\n  return views;\n};\n"],"mappings":"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","ignoreList":[]}