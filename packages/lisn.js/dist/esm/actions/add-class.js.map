{"version":3,"file":"add-class.js","names":["MC","addClasses","removeClasses","toggleClasses","registerAction","AddClass","register","element","classNames","constructor","_defineProperty","_add","_remove","_toggle","getMethods","do","undo","S_TOGGLE","RemoveClass"],"sources":["../../../src/ts/actions/add-class.ts"],"sourcesContent":["/**\n * @module Actions\n *\n * @categoryDescription Adding/removing class\n * {@link AddClass} and {@link RemoveClass} add or remove a list of CSS classes\n * to/from the given element.\n */\n\nimport * as MC from \"@lisn/globals/minification-constants\";\n\nimport {\n  addClasses,\n  removeClasses,\n  toggleClasses,\n} from \"@lisn/utils/css-alter\";\n\nimport { Action, registerAction } from \"@lisn/actions/action\";\n\n/**\n * Adds or removes a list of CSS classes to/from the given element.\n *\n * **IMPORTANT:** When constructed, it removes all given classes from the\n * element as a form of initialization.\n *\n * -------\n *\n * To use with auto-widgets (HTML API) as part of a trigger specification:\n * - Action name: \"add-class\".\n * - Accepted string arguments: one or more CSS classes\n * - Accepted options: none\n *\n * @example\n * ```html\n * <div data-lisn-on-view=\"@add-class: clsA, clsB\"></div>\n * ```\n *\n * @category Adding/removing class\n */\nexport class AddClass implements Action {\n  /**\n   * Adds the classes given to the constructor.\n   */\n  readonly do: () => Promise<void>;\n\n  /**\n   * Removes the classes given to the constructor.\n   */\n  readonly undo: () => Promise<void>;\n\n  /**\n   * Toggles each class given to the constructor.\n   */\n  readonly toggle: () => Promise<void>;\n\n  static register() {\n    registerAction(\n      \"add-class\",\n      (element, classNames) => new AddClass(element, ...classNames),\n    );\n  }\n\n  constructor(element: Element, ...classNames: string[]) {\n    const { _add, _remove, _toggle } = getMethods(element, classNames);\n    _remove(); // initial state\n\n    this.do = _add;\n    this.undo = _remove;\n    this[MC.S_TOGGLE] = _toggle;\n  }\n}\n\n/**\n * Removes or adds a list of CSS classes to/from the given element.\n *\n * **IMPORTANT:** When constructed, it adds all given classes from the element\n * as a form of initialization.\n *\n * -------\n *\n * To use with auto-widgets (HTML API) as part of a trigger specification:\n * - Action name: \"remove-class\".\n * - Accepted string arguments: one or more CSS classes\n * - Accepted options: none\n *\n * @example\n * ```html\n * <div data-lisn-on-view=\"@remove-class: clsA, clsB\"></div>\n * ```\n *\n * @category Adding/removing class\n */\nexport class RemoveClass implements Action {\n  /**\n   * Removes the classes given to the constructor.\n   */\n  readonly do: () => Promise<void>;\n\n  /**\n   * Adds the classes given to the constructor.\n   */\n  readonly undo: () => Promise<void>;\n\n  /**\n   * Toggles each class given to the constructor.\n   */\n  readonly toggle: () => Promise<void>;\n\n  static register() {\n    registerAction(\n      \"remove-class\",\n      (element, classNames) => new RemoveClass(element, ...classNames),\n    );\n  }\n\n  constructor(element: Element, ...classNames: string[]) {\n    const { _add, _remove, _toggle } = getMethods(element, classNames);\n    _add(); // initial state\n\n    this.do = _remove;\n    this.undo = _add;\n    this[MC.S_TOGGLE] = _toggle;\n  }\n}\n\n// --------------------\n\nconst getMethods = (element: Element, classNames: string[]) => {\n  return {\n    _add: () => addClasses(element, ...classNames),\n    _remove: () => removeClasses(element, ...classNames),\n    _toggle: () => toggleClasses(element, ...classNames),\n  };\n};\n"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,KAAKA,EAAE;AAEd,SACEC,UAAU,EACVC,aAAa,EACbC,aAAa;AAGf,SAAiBC,cAAc;;AAE/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,QAAQ,CAAmB;EAgBtC,OAAOC,QAAQA,CAAA,EAAG;IAChBF,cAAc,CACZ,WAAW,EACX,CAACG,OAAO,EAAEC,UAAU,KAAK,IAAIH,QAAQ,CAACE,OAAO,EAAE,GAAGC,UAAU,CAC9D,CAAC;EACH;EAEAC,WAAWA,CAACF,OAAgB,EAAE,GAAGC,UAAoB,EAAE;IAtBvD;AACF;AACA;IAFEE,eAAA;IAKA;AACF;AACA;IAFEA,eAAA;IAKA;AACF;AACA;IAFEA,eAAA;IAaE,MAAM;MAAEC,IAAI;MAAEC,OAAO;MAAEC;IAAQ,CAAC,GAAGC,UAAU,CAACP,OAAO,EAAEC,UAAU,CAAC;IAClEI,OAAO,CAAC,CAAC,CAAC,CAAC;;IAEX,IAAI,CAACG,EAAE,GAAGJ,IAAI;IACd,IAAI,CAACK,IAAI,GAAGJ,OAAO;IACnB,IAAI,CAACZ,EAAE,CAACiB,QAAQ,CAAC,GAAGJ,OAAO;EAC7B;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMK,WAAW,CAAmB;EAgBzC,OAAOZ,QAAQA,CAAA,EAAG;IAChBF,cAAc,CACZ,cAAc,EACd,CAACG,OAAO,EAAEC,UAAU,KAAK,IAAIU,WAAW,CAACX,OAAO,EAAE,GAAGC,UAAU,CACjE,CAAC;EACH;EAEAC,WAAWA,CAACF,OAAgB,EAAE,GAAGC,UAAoB,EAAE;IAtBvD;AACF;AACA;IAFEE,eAAA;IAKA;AACF;AACA;IAFEA,eAAA;IAKA;AACF;AACA;IAFEA,eAAA;IAaE,MAAM;MAAEC,IAAI;MAAEC,OAAO;MAAEC;IAAQ,CAAC,GAAGC,UAAU,CAACP,OAAO,EAAEC,UAAU,CAAC;IAClEG,IAAI,CAAC,CAAC,CAAC,CAAC;;IAER,IAAI,CAACI,EAAE,GAAGH,OAAO;IACjB,IAAI,CAACI,IAAI,GAAGL,IAAI;IAChB,IAAI,CAACX,EAAE,CAACiB,QAAQ,CAAC,GAAGJ,OAAO;EAC7B;AACF;;AAEA;;AAEA,MAAMC,UAAU,GAAGA,CAACP,OAAgB,EAAEC,UAAoB,KAAK;EAC7D,OAAO;IACLG,IAAI,EAAEA,CAAA,KAAMV,UAAU,CAACM,OAAO,EAAE,GAAGC,UAAU,CAAC;IAC9CI,OAAO,EAAEA,CAAA,KAAMV,aAAa,CAACK,OAAO,EAAE,GAAGC,UAAU,CAAC;IACpDK,OAAO,EAAEA,CAAA,KAAMV,aAAa,CAACI,OAAO,EAAE,GAAGC,UAAU;EACrD,CAAC;AACH,CAAC","ignoreList":[]}