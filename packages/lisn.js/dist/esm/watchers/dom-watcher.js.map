{"version":3,"file":"dom-watcher.js","names":["MC","MH","DOM_CATEGORIES_SPACE","getIgnoreMove","clearIgnoreMove","ignoreMove","waitForElement","logError","omitKeys","objToStrKey","validateStrList","wrapCallback","newXMap","debug","DOMWatcher","create","config","getConfig","CONSTRUCTOR_KEY","reuse","_instances$get","myConfig","configStrKey","_root","root","getBody","instance","instances","get","sGet","set","constructor","key","_defineProperty","illegalConstructorError","logger","Logger","name","logAtCreation","buffer","t","_target","_categoryBitmask","_attributes","newSet","_addedTo","_removedFrom","allCallbacks","newMap","timer","mutationHandler","records","debug9","length","record","target","targetOf","recType","type","isElement","S_CHILD_LIST","child","addedNodes","operation","ADDED_BIT","removedNodes","REMOVED_BIT","S_ATTRIBUTES","attributeName","add","ATTRIBUTE_BIT","sizeOf","setTimer","size","values","shouldSkipOperation","debug10","processOperation","clear","observers","_observer","newMutationObserver","_isActive","createCallback","handler","options","_allCallbacks$get","remove","_callback","debug5","callback","onRemove","deleteHandler","_options","setupOnMutation","userOptions","getOptions","isRemoved","activateObserver","skipInitial","_selector","childQueue","takeRecords","element","querySelectorAll","matches","initOperation","parentOf","bufferedOperation","diffOperation","getDiffOperation","invokeCallback","deleteKey","activeCategories","entry","deactivateObserver","categoryBitmask","selector","currentTargets","contains","push","lengthOf","mutationType","debug3","observe","subtree","_subtree","disconnect","requestToSkip","removedFrom","addedTo","requestFrom","from","requestTo","to","onMutation","offMutation","_allCallbacks$get2","SYMBOL","_config$subtree","CATEGORIES_BITS","bit","S_ADDED","S_REMOVED","S_ATTRIBUTE","categories","has","cat","bitmask","isString","usageError","operationA","operationB","attributes","attr","currentTarget","invoke","catch"],"sources":["../../../src/ts/watchers/dom-watcher.ts"],"sourcesContent":["/**\n * @module Watchers/DOMWatcher\n */\n\nimport * as MC from \"@lisn/globals/minification-constants\";\nimport * as MH from \"@lisn/globals/minification-helpers\";\n\nimport {\n  MutationCategory,\n  CommaSeparatedStr,\n  AtLeastOne,\n} from \"@lisn/globals/types\";\n\nimport { DOM_CATEGORIES_SPACE } from \"@lisn/utils/dom\";\nimport {\n  getIgnoreMove,\n  clearIgnoreMove,\n  ignoreMove,\n} from \"@lisn/utils/dom-alter\";\nimport { waitForElement } from \"@lisn/utils/dom-events\";\nimport { logError } from \"@lisn/utils/log\";\nimport { omitKeys } from \"@lisn/utils/misc\";\nimport { objToStrKey } from \"@lisn/utils/text\";\nimport { validateStrList } from \"@lisn/utils/validation\";\n\nimport {\n  CallbackHandler,\n  Callback,\n  wrapCallback,\n} from \"@lisn/modules/callback\";\nimport { newXMap } from \"@lisn/modules/x-map\";\n\nimport debug from \"@lisn/debug/debug\";\n\n/**\n * {@link DOMWatcher} listens for changes do the DOM tree. It's built on top of\n * {@link https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver | MutationObserver}.\n *\n * It manages registered callbacks globally and reuses MutationObservers for\n * more efficient performance.\n *\n * Each instance of DOMWatcher manages up to two MutationObservers: one\n * for `childList` changes and one for attribute changes, and it disconnects\n * them when there are no active callbacks for the relevant type.\n *\n * `characterData` and changes to base\n * {@link https://developer.mozilla.org/en-US/docs/Web/API/Node | Node}s\n * (non-{@link https://developer.mozilla.org/en-US/docs/Web/API/Element | Element})\n * are not supported.\n */\nexport class DOMWatcher {\n  /**\n   * Call the given handler whenever there's a matching mutation within this\n   * DOMWatcher's {@link DOMWatcherConfig.root | root}.\n   *\n   * If {@link OnMutationOptions.skipInitial | options.skipInitial} is `false`\n   * (default), _and_ {@link OnMutationOptions.selector | options.selector} is\n   * given, _and_ {@link OnMutationOptions.categories | options.categories}\n   * includes \"added\", the handler is also called (almost) immediately with all\n   * existing elements matching the selector under this DOMWatcher's\n   * {@link DOMWatcherConfig.root | root}.\n   *\n   * **IMPORTANT:** The same handler can _not_ be added multiple times, even if\n   * the options differ. If the handler has already been added, it is removed\n   * and re-added with the current options.\n   *\n   * @throws {@link Errors.LisnUsageError | LisnUsageError}\n   *                If the options are not valid.\n   */\n  readonly onMutation: (\n    handler: OnMutationHandler,\n    options?: OnMutationOptions,\n  ) => Promise<void>;\n\n  /**\n   * Removes a previously added handler.\n   */\n  readonly offMutation: (handler: OnMutationHandler) => void;\n\n  /**\n   * Ignore an upcoming moving/adding/removing of an element.\n   *\n   * The operation must complete within the next cycle, by the time\n   * MutationObserver calls us.\n   *\n   * Use this to prevent this instance of DOMWatcher from calling any callbacks\n   * that listen for relevant changes as a result of this operation, to prevent\n   * loops for example.\n   *\n   * **IMPORTANT:**\n   *\n   * Ignoring moving of an element from a parent _inside_ this DOMWatcher's\n   * root to another parent that's _outside_ the root, will work as expected,\n   * even though the \"adding to the new parent\" mutation will not be observed.\n   * This is because the element's current parent at the time of the mutation\n   * callback can be examined.\n   *\n   * However if you want to ignore moving of an element _from a parent outside\n   * this DOMWatcher's root_ you need to specify from: null since the \"removal\n   * from the old parent\" mutation would not be observed and there's no way to\n   * examine it's previous parent at the time the \"adding to the new parent\"\n   * mutation is observed.\n   *\n   * For this reason, setting `options.from` to be an element that's not under\n   * the root is internally treated the same as `options.from: null`.\n   */\n  readonly ignoreMove: (target: Element, options: MoveOptions) => void;\n\n  /**\n   * Creates a new instance of DOMWatcher with the given\n   * {@link DOMWatcherConfig}. It does not save it for future reuse.\n   */\n  static create(config: DOMWatcherConfig = {}) {\n    return new DOMWatcher(getConfig(config), CONSTRUCTOR_KEY);\n  }\n\n  /**\n   * Returns an existing instance of DOMWatcher with the given\n   * {@link DOMWatcherConfig}, or creates a new one.\n   *\n   * **NOTE:** It saves it for future reuse, so don't use this for temporary\n   * short-lived watchers.\n   */\n  static reuse(config: DOMWatcherConfig = {}) {\n    const myConfig = getConfig(config);\n    const configStrKey = objToStrKey(omitKeys(myConfig, { _root: null }));\n\n    const root = myConfig._root === MH.getBody() ? null : myConfig._root;\n    let instance = instances.get(root)?.get(configStrKey);\n    if (!instance) {\n      instance = new DOMWatcher(myConfig, CONSTRUCTOR_KEY);\n      instances.sGet(root).set(configStrKey, instance);\n    }\n\n    return instance;\n  }\n\n  private constructor(\n    config: DOMWatcherConfigInternal,\n    key: typeof CONSTRUCTOR_KEY,\n  ) {\n    if (key !== CONSTRUCTOR_KEY) {\n      throw MH.illegalConstructorError(\"DOMWatcher.create\");\n    }\n\n    const logger = debug\n      ? new debug.Logger({ name: \"DOMWatcher\", logAtCreation: config })\n      : null;\n\n    const buffer = newXMap<Element, MutationOperationInternal>((t) => ({\n      _target: t,\n      _categoryBitmask: 0,\n      _attributes: MH.newSet(),\n      _addedTo: null,\n      _removedFrom: null,\n    }));\n\n    const allCallbacks = MH.newMap<\n      OnMutationHandler,\n      {\n        _callback: OnMutationCallback;\n        _options: OnMutationOptionsInternal;\n      }\n    >();\n\n    // ----------\n\n    let timer: ReturnType<typeof setTimeout> | null = null;\n    const mutationHandler = (records: MutationRecord[]) => {\n      debug: logger?.debug9(`Got ${records.length} new records`, records);\n\n      for (const record of records) {\n        const target = MH.targetOf(record);\n        const recType = record.type;\n\n        /* istanbul ignore next */\n        if (!MH.isElement(target)) {\n          continue;\n        }\n\n        if (recType === MC.S_CHILD_LIST) {\n          for (const child of record.addedNodes) {\n            if (MH.isElement(child)) {\n              const operation = buffer.sGet(child);\n              operation._addedTo = target;\n              operation._categoryBitmask |= ADDED_BIT;\n            }\n          }\n\n          for (const child of record.removedNodes) {\n            if (MH.isElement(child)) {\n              const operation = buffer.sGet(child);\n              operation._removedFrom = target;\n              operation._categoryBitmask |= REMOVED_BIT;\n            }\n          }\n\n          //\n        } else if (recType === MC.S_ATTRIBUTES && record.attributeName) {\n          const operation = buffer.sGet(target);\n          operation._attributes.add(record.attributeName);\n          operation._categoryBitmask |= ATTRIBUTE_BIT;\n        }\n      }\n\n      // Schedule flushing of the buffer asynchronously so that we can combine\n      // the records from the two MutationObservers.\n      if (!timer && MH.sizeOf(buffer)) {\n        timer = MH.setTimer(() => {\n          debug: logger?.debug9(`Processing ${buffer.size} operations`);\n          for (const operation of buffer.values()) {\n            if (shouldSkipOperation(operation)) {\n              debug: logger?.debug10(\"Skipping operation\", operation);\n            } else {\n              processOperation(operation);\n            }\n          }\n\n          buffer.clear();\n          timer = null;\n        }, 0);\n      }\n    };\n\n    const observers: Record<MutationType, MyObserver> = {\n      [MC.S_CHILD_LIST]: {\n        _observer: MH.newMutationObserver(mutationHandler),\n        _isActive: false,\n      },\n      [MC.S_ATTRIBUTES]: {\n        _observer: MH.newMutationObserver(mutationHandler),\n        _isActive: false,\n      },\n    };\n\n    // ----------\n\n    const createCallback = (\n      handler: OnMutationHandler,\n      options: OnMutationOptionsInternal,\n    ): OnMutationCallback => {\n      MH.remove(allCallbacks.get(handler)?._callback);\n\n      debug: logger?.debug5(\"Adding/updating handler\", options);\n      const callback = wrapCallback(handler);\n      callback.onRemove(() => deleteHandler(handler));\n\n      allCallbacks.set(handler, { _callback: callback, _options: options });\n      return callback;\n    };\n\n    // ----------\n\n    const setupOnMutation = async (\n      handler: OnMutationHandler,\n      userOptions: OnMutationOptions | undefined,\n    ) => {\n      const options = getOptions(userOptions || {});\n      const callback = createCallback(handler, options);\n\n      let root = config._root || MH.getBody();\n      if (!root) {\n        root = await waitForElement(MH.getBody);\n      } else {\n        // So that the call is always async\n        await null;\n      }\n\n      if (callback.isRemoved()) {\n        return;\n      }\n\n      if (options._categoryBitmask & (ADDED_BIT | REMOVED_BIT)) {\n        activateObserver(root, MC.S_CHILD_LIST);\n      }\n\n      if (options._categoryBitmask & ATTRIBUTE_BIT) {\n        activateObserver(root, MC.S_ATTRIBUTES);\n      }\n\n      if (\n        userOptions?.skipInitial ||\n        !options._selector ||\n        !(options._categoryBitmask & ADDED_BIT)\n      ) {\n        return;\n      }\n\n      // As some of the matching elements that currently exist in the root may\n      // have just been added and therefore in the MutationObserver's queue, to\n      // avoid calling the handler with those entries twice, we empty its queue\n      // now and process it (which would also invoke the newly added callback).\n      // Then we skip any elements returned in querySelectorAll that were in\n      // the queue.\n\n      const childQueue = observers[MC.S_CHILD_LIST]._observer.takeRecords();\n      mutationHandler(childQueue);\n\n      for (const element of [\n        ...MH.querySelectorAll(root, options._selector),\n        ...(root.matches(options._selector) ? [root] : []),\n      ]) {\n        const initOperation: MutationOperationInternal = {\n          _target: element,\n          _categoryBitmask: ADDED_BIT,\n          _attributes: MH.newSet(),\n          _addedTo: MH.parentOf(element),\n          _removedFrom: null,\n        };\n\n        const bufferedOperation = buffer.get(element);\n        const diffOperation = getDiffOperation(\n          initOperation,\n          bufferedOperation,\n        );\n\n        if (diffOperation) {\n          if (shouldSkipOperation(diffOperation)) {\n            debug: logger?.debug10(\"Skipping operation\", diffOperation);\n          } else {\n            debug: logger?.debug5(\"Calling initially with\", diffOperation);\n            await invokeCallback(callback, diffOperation);\n          }\n        }\n      }\n    };\n\n    // ----------\n\n    const deleteHandler = (handler: OnMutationHandler) => {\n      MH.deleteKey(allCallbacks, handler);\n\n      let activeCategories = 0;\n      for (const entry of allCallbacks.values()) {\n        activeCategories |= entry._options._categoryBitmask;\n      }\n\n      if (!(activeCategories & (ADDED_BIT | REMOVED_BIT))) {\n        deactivateObserver(MC.S_CHILD_LIST);\n      }\n\n      if (!(activeCategories & ATTRIBUTE_BIT)) {\n        deactivateObserver(MC.S_ATTRIBUTES);\n      }\n    };\n\n    // ----------\n\n    const processOperation = (operation: MutationOperationInternal) => {\n      debug: logger?.debug10(\"Processing operation\", operation);\n\n      for (const entry of allCallbacks.values()) {\n        const categoryBitmask = entry._options._categoryBitmask;\n        const target = entry._options._target;\n        const selector = entry._options._selector;\n\n        if (!(operation._categoryBitmask & categoryBitmask)) {\n          debug: logger?.debug10(`Category does not match: ${categoryBitmask}`);\n          continue;\n        }\n\n        const currentTargets = [];\n        if (target) {\n          if (!operation._target.contains(target)) {\n            debug: logger?.debug10(\"Target does not match\", target);\n            continue;\n          }\n\n          currentTargets.push(target);\n        }\n\n        if (selector) {\n          const matches = [...MH.querySelectorAll(operation._target, selector)];\n\n          if (operation._target.matches(selector)) {\n            matches.push(operation._target);\n          }\n\n          if (!MH.lengthOf(matches)) {\n            debug: logger?.debug10(`Selector does not match: ${selector}`);\n            continue;\n          }\n\n          currentTargets.push(...matches);\n        }\n\n        invokeCallback(entry._callback, operation, currentTargets);\n      }\n    };\n\n    // ----------\n\n    const activateObserver = (root: Element, mutationType: MutationType) => {\n      if (!observers[mutationType]._isActive) {\n        debug: logger?.debug3(\n          `Activating mutation observer for '${mutationType}'`,\n        );\n        observers[mutationType]._observer.observe(root, {\n          [mutationType]: true,\n          subtree: config._subtree,\n        });\n        observers[mutationType]._isActive = true;\n      }\n    };\n\n    // ----------\n\n    const deactivateObserver = (mutationType: MutationType) => {\n      if (observers[mutationType]._isActive) {\n        debug: logger?.debug3(\n          `Disconnecting mutation observer for '${mutationType}'`,\n        );\n        observers[mutationType]._observer.disconnect();\n        observers[mutationType]._isActive = false;\n      }\n    };\n\n    // ----------\n\n    const shouldSkipOperation = (\n      operation: MutationOperationInternal,\n    ): boolean => {\n      const target = operation._target;\n      const requestToSkip = getIgnoreMove(target);\n      if (!requestToSkip) {\n        return false;\n      }\n\n      const removedFrom = operation._removedFrom;\n      const addedTo = MH.parentOf(target);\n      const requestFrom = requestToSkip.from;\n      const requestTo = requestToSkip.to;\n\n      const root = config._root || MH.getBody();\n      // If \"from\" is currently outside our root, we may not have seen a\n      // removal operation.\n      if (\n        (removedFrom === requestFrom || !root.contains(requestFrom)) &&\n        addedTo === requestTo\n      ) {\n        clearIgnoreMove(target);\n        return true;\n      }\n\n      return false;\n    };\n\n    // ----------\n\n    this.ignoreMove = ignoreMove;\n\n    // ----------\n\n    this.onMutation = setupOnMutation;\n\n    // ----------\n\n    this.offMutation = (handler) => {\n      debug: logger?.debug5(\"Removing handler\");\n      MH.remove(allCallbacks.get(handler)?._callback);\n    };\n  }\n}\n\n/**\n * @interface\n */\nexport type DOMWatcherConfig = {\n  /**\n   * The root element to observe for changes.\n   *\n   * It cannot be overridden on a per-callback basis.\n   *\n   * @defaultValue document.body\n   */\n  root?: Element | null;\n\n  /**\n   * Whether to observe root's subtree for changes or just direct descendants.\n   *\n   * It cannot be overridden on a per-callback basis.\n   *\n   * @defaultValue true\n   */\n  subtree?: boolean;\n};\n\n/**\n * @interface\n */\nexport type OnMutationOptions = {\n  /**\n   * If this is given, then the handler would only be called for operations\n   * where the target is _either_ the given element or an ancestor of it, i.e.\n   * it {@link https://developer.mozilla.org/en-US/docs/Web/API/Node/contains | Node:contains} it.\n   *\n   * @defaultValue undefined\n   */\n  target?: Element;\n\n  /**\n   * If this is given, then the handler would only be called for operations\n   * where the target matches the given selector _or contains an element\n   * matching the given selector_.\n   *\n   * @defaultValue undefined\n   */\n  selector?: string;\n\n  /**\n   * Specifies a list of {@link MutationCategory}s to target for.\n   *\n   * If not given, then the handler is called for any of the supported\n   * mutations.\n   *\n   * It can be a comma-separated list of category names or an array of such\n   * names.\n   *\n   * @defaultValue undefined\n   */\n  categories?: CommaSeparatedStr<MutationCategory> | MutationCategory[];\n\n  /**\n   * Do not call the handler until there's a future matching mutation.\n   *\n   * By default, if `selector` is given, and `categories` includes `added`, we\n   * call the handler (almost) immediately with all elements matching selector\n   * relative to this DOMWatcher's root.\n   *\n   * The initial operation will contain just the element and\n   * `addedTo: <current parent>`.\n   *\n   * @defaultValue false\n   */\n  skipInitial?: boolean;\n};\n\nexport type MoveOptions = AtLeastOne<{\n  /**\n   * If to is missing or null, it's a removal operation.\n   */\n  to: Element | null;\n\n  /**\n   * If from is missing or null, it's an insertion operation.\n   */\n  from: Element | null;\n}>;\n\nexport type MutationOperation = {\n  /**\n   * The target that was changed.\n   */\n  target: Element;\n\n  /**\n   * The target that the callback was interested in.\n   *\n   * If `selector` is given as part of {@link OnMutationOptions}, then\n   * `currentTarget` will point to the target that matched the selector\n   * starting at the operation's `target` as the root. If the operation's\n   * `target` contains more than one element matching selector, the callback\n   * will be called once for _each_ matching child.\n   *\n   * If `target` is given as part of {@link OnMutationOptions}, then\n   * `currentTarget` will be that element.\n   */\n  currentTarget: Element;\n\n  /**\n   * The list of attributes that were changed in this round.\n   */\n  attributes: Set<string>;\n\n  /**\n   * The element that the target was added to, i.e. it's new parent. It is null\n   * if the target was not moved to a new element _during this round_. It does\n   * not mean that this is its current parent.\n   */\n  addedTo: Element | null;\n\n  /**\n   * The element that the target was removed from, i.e. it's old parent. It is\n   * null if the target was not removed from a previous element _during this\n   * round_. It does not mean it did not previously have a parent, but that its\n   * removal was not observed.\n   */\n  removedFrom: Element | null;\n};\n\n/**\n * The handler is invoked with one argument:\n *\n * - a {@link MutationOperation} for a set of mutations related to a particular\n *   element\n *\n * The handler could be invoked multiple times in each \"round\" (cycle of event\n * loop) if there are mutation operations for more than one element that match\n * the supplied {@link OnMutationOptions}.\n */\nexport type OnMutationHandlerArgs = [MutationOperation];\nexport type OnMutationCallback = Callback<OnMutationHandlerArgs>;\nexport type OnMutationHandler =\n  | CallbackHandler<OnMutationHandlerArgs>\n  | OnMutationCallback;\n\n// ----------------------------------------\n\ntype DOMWatcherConfigInternal = {\n  _root: Element | null;\n  _subtree: boolean;\n};\n\ntype OnMutationOptionsInternal = {\n  _target: Element | null;\n  _selector: string;\n  _categoryBitmask: number;\n};\n\ntype MyObserver = {\n  _observer: MutationObserver;\n  _isActive: boolean;\n};\n\ntype MutationType = \"childList\" | \"attributes\";\n\ntype MutationOperationInternal = {\n  _target: Element;\n  _attributes: Set<string>;\n  _addedTo: Element | null;\n  _removedFrom: Element | null;\n  _categoryBitmask: number;\n};\n\nconst CONSTRUCTOR_KEY: unique symbol = MC.SYMBOL() as typeof CONSTRUCTOR_KEY;\nconst instances = newXMap<Element | null, Map<string, DOMWatcher>>(() =>\n  MH.newMap(),\n);\n\nconst getConfig = (config: DOMWatcherConfig): DOMWatcherConfigInternal => {\n  return {\n    _root: config.root || null,\n    _subtree: config.subtree ?? true,\n  };\n};\n\nconst CATEGORIES_BITS = DOM_CATEGORIES_SPACE.bit;\nconst ADDED_BIT = CATEGORIES_BITS[MC.S_ADDED];\nconst REMOVED_BIT = CATEGORIES_BITS[MC.S_REMOVED];\nconst ATTRIBUTE_BIT = CATEGORIES_BITS[MC.S_ATTRIBUTE];\n\n// ----------------------------------------\n\nconst getOptions = (options: OnMutationOptions): OnMutationOptionsInternal => {\n  let categoryBitmask = 0;\n  const categories = validateStrList(\n    \"categories\",\n    options.categories,\n    DOM_CATEGORIES_SPACE.has,\n  );\n\n  if (categories) {\n    for (const cat of categories) {\n      categoryBitmask |= CATEGORIES_BITS[cat];\n    }\n  } else {\n    categoryBitmask = DOM_CATEGORIES_SPACE.bitmask; // default: all\n  }\n\n  const selector = options.selector || \"\";\n  if (!MH.isString(selector)) {\n    throw MH.usageError(\"'selector' must be a string\");\n  }\n\n  return {\n    _categoryBitmask: categoryBitmask,\n    _target: options.target || null,\n    _selector: options.selector || \"\",\n  };\n};\n\nconst getDiffOperation = (\n  operationA: MutationOperationInternal,\n  operationB: MutationOperationInternal | undefined,\n): MutationOperationInternal | null => {\n  if (!operationB || operationA._target !== operationB._target) {\n    return operationA;\n  }\n\n  const attributes = MH.newSet<string>();\n  for (const attr of operationA._attributes) {\n    if (!operationB._attributes.has(attr)) {\n      attributes.add(attr);\n    }\n  }\n\n  const categoryBitmask =\n    operationA._categoryBitmask ^ operationB._categoryBitmask;\n\n  const addedTo =\n    operationA._addedTo === operationB._addedTo ? null : operationA._addedTo;\n\n  const removedFrom =\n    operationA._removedFrom === operationB._removedFrom\n      ? null\n      : operationA._removedFrom;\n\n  if (!MH.sizeOf(attributes) && !categoryBitmask && !addedTo && !removedFrom) {\n    return null;\n  }\n\n  return {\n    _target: operationA._target,\n    _categoryBitmask: categoryBitmask,\n    _attributes: attributes,\n    _addedTo: addedTo,\n    _removedFrom: removedFrom,\n  };\n};\n\nconst invokeCallback = (\n  callback: OnMutationCallback,\n  operation: MutationOperationInternal,\n  currentTargets: Element[] = [],\n) => {\n  if (!MH.lengthOf(currentTargets)) {\n    currentTargets = [operation._target];\n  }\n\n  for (const currentTarget of currentTargets) {\n    callback\n      .invoke({\n        target: operation._target,\n        currentTarget,\n        attributes: operation._attributes,\n        addedTo: operation._addedTo,\n        removedFrom: operation._removedFrom,\n      })\n      .catch(logError);\n  }\n};\n"],"mappings":"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","ignoreList":[]}