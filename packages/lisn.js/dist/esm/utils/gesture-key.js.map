{"version":3,"file":"gesture-key.js","names":["MC","MH","settings","getVectorDirection","addDeltaZ","getKeyGestureFragment","events","options","_options$scrollHeight","isIterableObject","LINE","deltaLineHeight","PAGE","deltaPageHeight","CONTENT","scrollHeight","deltasUp","amount","deltasDown","deltasLeft","deltasRight","deltasIn","deltasOut","direction","S_NONE","intent","deltaX","deltaY","deltaZ","_iterator","_createForOfIteratorHelper","_step","s","n","done","_deltasForKey","event","value","isKeyboardEvent","type","S_KEYDOWN","deltasForKey","_defineProperty","SK_UP","SK_ARROWUP","SK_PAGEUP","SK_DOWN","SK_ARROWDOWN","SK_PAGEDOWN","SK_LEFT","SK_ARROWLEFT","SK_RIGHT","SK_ARROWRIGHT","shiftKey","ctrlKey","theseDeltas","key","_theseDeltas","_slicedToArray","thisDeltaX","thisDeltaY","thisDeltaZ","thisIntent","S_ZOOM","S_SCROLL","S_UNKNOWN","err","e","f","S_AMBIGUOUS","S_IN","S_OUT","angleDiffThreshold","device","S_KEY","SK_PAGE","SK_ARROW"],"sources":["../../../src/ts/utils/gesture-key.ts"],"sourcesContent":["/**\n * @module Utils\n */\n\nimport * as MC from \"@lisn/globals/minification-constants\";\nimport * as MH from \"@lisn/globals/minification-helpers\";\n\nimport { settings } from \"@lisn/globals/settings\";\n\nimport { Direction, GestureIntent } from \"@lisn/globals/types\";\n\nimport { getVectorDirection } from \"@lisn/utils/directions\";\n\nimport { GestureFragment, addDeltaZ } from \"@lisn/utils/gesture\";\n\n/**\n * Returns a {@link GestureFragment} for the given events. Only \"keydown\"\n * events will be considered.\n *\n * If there are no \"keydown\" events in the given list of events, returns\n * `false`.\n *\n * The deltas of all events are summed together before determining final delta\n * and direction.\n *\n * If the events are of conflicting types, i.e. some scroll, some zoom, then\n * the intent will be \"unknown\" and the direction will be \"ambiguous\".\n *\n * Otherwise, if the deltas sum up to 0, the direction will be \"none\".\n *\n * **IMPORTANT NOTES ON THE DELTA VALUES**\n *\n * For key gestures the deltas are unreliable. You should not assume they\n * correspond to the would-be scroll or zoom amount that the browser would do.\n * But they can be used to determine relative amounts for animating, etc.\n *\n * Key press events can be divided into 3 categories: that scroll by a \"line\"\n * (e.g. arrow keys), by a \"page\" (e.g. PageUp/PageDown) or by the full content\n * height/width (e.g. Home/End). The actual scroll amount that _would_ result\n * from the event is dependent on the browser, the window size or the element's\n * scroll width/height, so ours can only be a best guess.\n *\n * Since the actual pixel equivalent is browser specific, we use reasonable\n * default values of delta for each of these \"line\", \"page\" or \"content\" modes,\n * similar to what\n * {@link Utils.getWheelGestureFragment | getWheelGestureFragment} does:\n * - For \"line\", then a configurable fixed value is used\n *  ({@link settings.deltaLineHeight}).\n * - For \"page\", then a configurable fixed value is used\n *  ({@link settings.deltaPageHeight}).\n * - For \"content\", the element's scroll height is used if given, otherwise\n *   the viewport height (same as \"page\"). We do not try to get the current\n *   scroll height of the target element, (which would be the best guess value\n *   of `deltaY` in case of Home/End key presses), as that would either involve\n *   an asynchronous action or would result in forced layout. If the caller is\n *   already tracking the scroll height of the target, you can pass this as an\n *   argument. Otherwise, we'll default to using the viewport height, same as\n *   for PageUp/Down.\n *\n * If the key gesture fragment is a result of multiple events that were\n * accumulated, the deltas are summed as usual, e.g. if a \"page\" is equal to 20\n * \"lines\", then pressing PageDown and then 10 times Up, would result in a\n * delta equal to 10 \"lines\" down.\n *\n * For zoom intents, `deltaZ` gives a relative change of scale, whereby each\n * press of + or - steps up by 15% or down by ~13% (`1 / 1.15` to be exact)\n * since the previous one.\n *\n * @param {} [options.angleDiffThreshold]\n *                                  See {@link getVectorDirection}\n * @param {} [options.scrollHeight] Use this as deltaY when Home/End is pressed\n *\n * @return {} `false` if there are no \"keydown\" events in the list, otherwise a\n * {@link GestureFragment}.\n *\n * @category Gestures\n */\nexport const getKeyGestureFragment = (\n  events: Event | readonly Event[],\n  options?: {\n    angleDiffThreshold?: number;\n    scrollHeight?: number;\n  },\n): GestureFragment | false => {\n  if (!MH.isIterableObject(events)) {\n    events = [events];\n  }\n\n  const LINE = settings.deltaLineHeight;\n  const PAGE = settings.deltaPageHeight;\n  const CONTENT = options?.scrollHeight ?? PAGE;\n\n  const deltasUp = (amount: number): DeltasArr => [0, -amount, 1];\n  const deltasDown = (amount: number): DeltasArr => [0, amount, 1];\n  const deltasLeft = (amount: number): DeltasArr => [-amount, 0, 1];\n  const deltasRight = (amount: number): DeltasArr => [amount, 0, 1];\n  const deltasIn: DeltasArr = [0, 0, 1.15];\n  const deltasOut: DeltasArr = [0, 0, 1 / 1.15];\n\n  let direction: Direction = MC.S_NONE;\n  let intent: GestureIntent | null = null;\n  let deltaX = 0,\n    deltaY = 0,\n    deltaZ = 1;\n\n  for (const event of events) {\n    if (!MH.isKeyboardEvent(event) || event.type !== MC.S_KEYDOWN) {\n      continue;\n    }\n\n    const deltasForKey: Record<string, DeltasArr | null> = {\n      [SK_UP]: deltasUp(LINE),\n      [SK_ARROWUP]: deltasUp(LINE),\n      [SK_PAGEUP]: deltasUp(PAGE),\n      Home: deltasUp(CONTENT),\n      [SK_DOWN]: deltasDown(LINE),\n      [SK_ARROWDOWN]: deltasDown(LINE),\n      [SK_PAGEDOWN]: deltasDown(PAGE),\n      End: deltasDown(CONTENT),\n      [SK_LEFT]: deltasLeft(LINE),\n      [SK_ARROWLEFT]: deltasLeft(LINE),\n      [SK_RIGHT]: deltasRight(LINE),\n      [SK_ARROWRIGHT]: deltasRight(LINE),\n      \" \": (event.shiftKey ? deltasUp : deltasDown)(PAGE),\n      \"+\": deltasIn,\n      \"=\": event.ctrlKey ? deltasIn : null,\n      \"-\": deltasOut,\n    };\n\n    const theseDeltas = deltasForKey[event.key] || null;\n    if (!theseDeltas) {\n      // not a relevant key\n      continue;\n    }\n\n    const [thisDeltaX, thisDeltaY, thisDeltaZ] = theseDeltas;\n    const thisIntent = thisDeltaZ !== 1 ? MC.S_ZOOM : MC.S_SCROLL;\n\n    deltaX += thisDeltaX;\n    deltaY += thisDeltaY;\n    deltaZ = addDeltaZ(deltaZ, thisDeltaZ);\n\n    if (!intent) {\n      intent = thisIntent;\n    } else if (intent !== thisIntent) {\n      // mixture of zoom and scroll\n      intent = MC.S_UNKNOWN;\n    }\n  }\n\n  if (!intent) {\n    return false; // no relevant events\n  } else if (intent === MC.S_UNKNOWN) {\n    direction = MC.S_AMBIGUOUS;\n  } else if (intent === MC.S_ZOOM) {\n    direction = deltaZ > 1 ? MC.S_IN : deltaZ < 1 ? MC.S_OUT : MC.S_NONE;\n  } else {\n    direction = getVectorDirection(\n      [deltaX, deltaY],\n      options?.angleDiffThreshold,\n    );\n  }\n\n  return direction === MC.S_NONE\n    ? false\n    : {\n        device: MC.S_KEY,\n        direction,\n        intent,\n        deltaX,\n        deltaY,\n        deltaZ,\n      };\n};\n\n// --------------------\n\ntype DeltasArr = [number, number, number];\n\nconst SK_UP = \"Up\";\nconst SK_DOWN = \"Down\";\nconst SK_LEFT = \"Left\";\nconst SK_RIGHT = \"Right\";\nconst SK_PAGE = \"Page\";\nconst SK_ARROW = \"Arrow\";\nconst SK_PAGEUP = (SK_PAGE + SK_UP) as `${typeof SK_PAGE}${typeof SK_UP}`;\nconst SK_PAGEDOWN = (SK_PAGE + SK_DOWN) as `${typeof SK_PAGE}${typeof SK_DOWN}`;\nconst SK_ARROWUP = (SK_ARROW + SK_UP) as `${typeof SK_ARROW}${typeof SK_UP}`;\nconst SK_ARROWDOWN = (SK_ARROW +\n  SK_DOWN) as `${typeof SK_ARROW}${typeof SK_DOWN}`;\nconst SK_ARROWLEFT = (SK_ARROW +\n  SK_LEFT) as `${typeof SK_ARROW}${typeof SK_LEFT}`;\nconst SK_ARROWRIGHT = (SK_ARROW +\n  SK_RIGHT) as `${typeof SK_ARROW}${typeof SK_RIGHT}`;\n"],"mappings":"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","ignoreList":[]}