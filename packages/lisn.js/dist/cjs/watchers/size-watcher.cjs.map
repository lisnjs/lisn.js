{"version":3,"file":"size-watcher.cjs","names":["MC","_interopRequireWildcard","require","MH","_cssAlter","_log","_math","_size","_text","_callback","_xMap","_xResizeObserver","_debug","_interopRequireDefault","e","__esModule","_getRequireWildcardCache","WeakMap","r","t","_typeof","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","o","Symbol","iterator","constructor","prototype","_regeneratorRuntime","value","c","asyncIterator","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","name","mark","setPrototypeOf","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","_catch","delegateYield","asyncGeneratorStep","_asyncToGenerator","arguments","apply","_next","_throw","_createForOfIteratorHelper","Array","isArray","_unsupportedIterableToArray","_n","F","_arrayLikeToArray","toString","from","test","_classCallCheck","_defineProperties","_toPropertyKey","key","_createClass","_defineProperty","_toPrimitive","toPrimitive","String","Number","SizeWatcher","exports","config","CONSTRUCTOR_KEY","illegalConstructorError","logger","debug","Logger","logAtCreation","allSizeData","newWeakMap","allCallbacks","newXWeakMap","newMap","resizeHandler","entries","_iterator","_step","entry","processEntry","err","xObserver","XResizeObserver","fetchCurrentSize","_ref","_callee","target","element","sizeData","_callee$","_context","fetchElement","copyObject","newPromise","observer","newResizeObserver","getSizeData","disconnect","observe","border","S_WIDTH","S_HEIGHT","content","_x","fetchOptions","_ref2","_callee2","options","_options$box","_options$dimension","_options$MC$S_DEBOUNC","box","dimension","_callee2$","_context2","isValidBox","usageError","concat","isValidDimension","targetOf","t0","t1","t2","t3","toNonNegNum","threshold","_resizeThreshold","t4","S_DEBOUNCE_WINDOW","_debounceWindow","_element","_box","_dimension","_threshold","_x2","createCallback","handler","_allCallbacks$get","remove","debug5","callback","wrapCallback","onRemove","deleteHandler","_options","sGet","setupOnResize","_ref3","_callee3","userOptions","_callee3$","_context3","isRemoved","_data","observeLater","skipInitial","invokeCallback","_x3","_x4","removeOnResize","_ref4","_callee4","_allCallbacks$get2","currEntry","_callee4$","_context4","setSizeCssProps","_x5","_x6","deleteKey","prune","debug4","unobserve","_allCallbacks$get3","latestData","debug9","_iterator2","_step2","thresholdsExceeded","hasExceededThreshold","trackSize","_ref5","_callee5","_callee5$","_context5","_x7","_x8","noTrackSize","onResize","offResize","undefined","getConfig","reuse","myConfig","configStrKey","objToStrKey","instance","instances","SYMBOL","resizeThreshold","lastThresholdData","dim","diff","abs","borderBox","getEntryBorderBox","contentBox","getEntryContentBox","prefix","tryGetViewportOverlay","getDocElement","props","borderWidth","borderHeight","contentWidth","contentHeight","setNumericStyleProps","_prefix","_ref6","_callee6","_callee6$","_context6","isElement","getWindow","fetchViewportOverlay","getDoc","_x9","logError"],"sources":["../../../src/ts/watchers/size-watcher.ts"],"sourcesContent":["/**\n * @module Watchers/SizeWatcher\n */\n\nimport * as MC from \"@lisn/globals/minification-constants\";\nimport * as MH from \"@lisn/globals/minification-helpers\";\n\nimport { Box, Dimension, Size, SizeTarget } from \"@lisn/globals/types\";\n\nimport { setNumericStyleProps } from \"@lisn/utils/css-alter\";\nimport { logError } from \"@lisn/utils/log\";\nimport { toNonNegNum } from \"@lisn/utils/math\";\nimport {\n  isValidBox,\n  isValidDimension,\n  getEntryBorderBox,\n  getEntryContentBox,\n  tryGetViewportOverlay,\n  fetchViewportOverlay,\n} from \"@lisn/utils/size\";\nimport { objToStrKey } from \"@lisn/utils/text\";\n\nimport {\n  CallbackHandler,\n  Callback,\n  wrapCallback,\n} from \"@lisn/modules/callback\";\nimport { newXWeakMap } from \"@lisn/modules/x-map\";\nimport { XResizeObserver } from \"@lisn/modules/x-resize-observer\";\n\nimport debug from \"@lisn/debug/debug\";\n\n/**\n * {@link SizeWatcher} monitors the size of a given target. It's built on top\n * of {@link https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver | ResizeObserver}.\n *\n * It manages registered callbacks globally and reuses ResizeObservers.\n *\n * Each instance of SizeWatcher manages up to two ResizeObservers: one\n * for content-box size changes and one for border-box size changes.\n */\nexport class SizeWatcher {\n  /**\n   * Call the given handler whenever the target's size changes.\n   *\n   * Unless {@link OnResizeOptions.skipInitial} is true, the handler is also\n   * called (almost) immediately with the latest size data.\n   *\n   * **IMPORTANT:** The same handler can _not_ be added multiple times for the\n   * same target, even if the options differ. If the handler has already been\n   * added for this target, either using {@link onResize} or {@link trackSize},\n   * then it will be removed and re-added with the current options.\n   *\n   * @throws {@link Errors.LisnUsageError | LisnUsageError}\n   *                If the target or options are invalid.\n   */\n  readonly onResize: (\n    handler: OnResizeHandler,\n    options?: OnResizeOptions,\n  ) => Promise<void>;\n\n  /**\n   * Removes a previously added handler.\n   *\n   * @throws {@link Errors.LisnUsageError | LisnUsageError}\n   *                If the target is invalid.\n   */\n  readonly offResize: (handler: OnResizeHandler, target?: SizeTarget) => void;\n\n  /**\n   * This is the same as {@link onResize} except that if `handler` is not given,\n   * then it defaults to an  handler that updates a set of CSS variables on the\n   * target's style:\n   *\n   * - If {@link OnResizeOptions.target | options.target} is not given, or is\n   *   `window`, the following CSS variables are set on the root (`html`)\n   *   element and represent the viewport size:\n   *   - `--lisn-js--window-border-width`\n   *   - `--lisn-js--window-border-height`\n   *   - `--lisn-js--window-content-width`\n   *   - `--lisn-js--window-content-height`\n   *\n   * - Otherwise, the following variables are set on the target itself and\n   *   represent its visible size:\n   *   - `--lisn-js--border-width`\n   *   - `--lisn-js--border-height`\n   *   - `--lisn-js--content-width`\n   *   - `--lisn-js--content-height`\n   *\n   * If `target` is `document`, then it will use `document.documentElement`.\n   *\n   * **IMPORTANT:** The same handler can _not_ be added multiple times for the\n   * same target, even if the options differ. If the handler has already been\n   * added for this target, either using {@link onResize} or {@link trackSize},\n   * then it will be removed and re-added with the current options.\n   *\n   * @throws {@link Errors.LisnUsageError | LisnUsageError}\n   *                If the target or options are invalid.\n   */\n  readonly trackSize: (\n    handler?: OnResizeHandler | null,\n    options?: OnResizeOptions,\n  ) => Promise<void>;\n\n  /**\n   * Removes a previously added handler for {@link trackSize}.\n   *\n   * @throws {@link Errors.LisnUsageError | LisnUsageError}\n   *                If the target is invalid.\n   */\n  readonly noTrackSize: (\n    handler?: OnResizeHandler | null,\n    target?: SizeTarget,\n  ) => void;\n\n  /**\n   * Get the size of the given target. It will get the size from a\n   * ResizeObserverEntry and so it's always delayed by one frame at least.\n   *\n   * @throws {@link Errors.LisnUsageError | LisnUsageError}\n   *                If the target is invalid.\n   */\n  readonly fetchCurrentSize: (target?: SizeTarget) => Promise<SizeData>;\n\n  /**\n   * Creates a new instance of SizeWatcher with the given\n   * {@link SizeWatcherConfig}. It does not save it for future reuse.\n   */\n  static create(config: SizeWatcherConfig = {}) {\n    return new SizeWatcher(getConfig(config), CONSTRUCTOR_KEY);\n  }\n\n  /**\n   * Returns an existing instance of SizeWatcher with the given\n   * {@link SizeWatcherConfig}, or creates a new one.\n   *\n   * **NOTE:** It saves it for future reuse, so don't use this for temporary\n   * short-lived watchers.\n   */\n  static reuse(config: SizeWatcherConfig = {}) {\n    const myConfig = getConfig(config);\n    const configStrKey = objToStrKey(myConfig);\n\n    let instance = instances.get(configStrKey);\n    if (!instance) {\n      instance = new SizeWatcher(myConfig, CONSTRUCTOR_KEY);\n      instances.set(configStrKey, instance);\n    }\n\n    return instance;\n  }\n\n  private constructor(\n    config: SizeWatcherConfigInternal,\n    key: typeof CONSTRUCTOR_KEY,\n  ) {\n    if (key !== CONSTRUCTOR_KEY) {\n      throw MH.illegalConstructorError(\"SizeWatcher.create\");\n    }\n\n    const logger = debug\n      ? new debug.Logger({ name: \"SizeWatcher\", logAtCreation: config })\n      : null;\n\n    const allSizeData = MH.newWeakMap<Element, SizeData>();\n\n    const allCallbacks = newXWeakMap<\n      Element,\n      Map<OnResizeHandler, CallbackEntry>\n    >(() => MH.newMap());\n\n    // ----------\n\n    const resizeHandler = (entries: ResizeObserverEntry[]) => {\n      for (const entry of entries) {\n        processEntry(entry);\n      }\n    };\n\n    // Don't debounce the observer, only callbacks.\n    const xObserver = new XResizeObserver(resizeHandler);\n\n    // ----------\n\n    const fetchCurrentSize = async (\n      target: SizeTarget | undefined,\n    ): Promise<SizeData> => {\n      const element = await fetchElement(target);\n      const sizeData = allSizeData.get(element);\n      if (sizeData) {\n        return MH.copyObject(sizeData);\n      }\n\n      return MH.newPromise((resolve) => {\n        // Use a temp ResizeObserver\n        const observer = MH.newResizeObserver((entries) => {\n          const sizeData = getSizeData(entries[0]);\n          observer?.disconnect();\n          resolve(sizeData); // no need to copy or save it\n        });\n\n        if (observer) {\n          observer.observe(element);\n        } else {\n          // Warning would have already been logged by XResizeObserver\n          resolve({\n            border: { [MC.S_WIDTH]: 0, [MC.S_HEIGHT]: 0 },\n            content: { [MC.S_WIDTH]: 0, [MC.S_HEIGHT]: 0 },\n          });\n        }\n      });\n    };\n\n    // ----------\n\n    const fetchOptions = async (\n      options: OnResizeOptions,\n    ): Promise<OnResizeOptionsInternal> => {\n      const box = options.box ?? null;\n      if (box && !isValidBox(box)) {\n        throw MH.usageError(`Unknown box type: '${box}'`);\n      }\n\n      const dimension = options.dimension ?? null;\n      if (dimension && !isValidDimension(dimension)) {\n        throw MH.usageError(`Unknown dimension: '${dimension}'`);\n      }\n\n      return {\n        _element: await fetchElement(MH.targetOf(options)),\n        _box: box,\n        _dimension: dimension,\n        // If threshold is 0, internally treat as 1 (pixel)\n        _threshold:\n          toNonNegNum(options.threshold, config._resizeThreshold) || 1,\n        _debounceWindow:\n          options[MC.S_DEBOUNCE_WINDOW] ?? config._debounceWindow,\n      };\n    };\n\n    // ----------\n\n    const createCallback = (\n      handler: OnResizeHandler,\n      options: OnResizeOptionsInternal,\n    ): CallbackEntry => {\n      const element = options._element;\n      MH.remove(allCallbacks.get(element)?.get(handler)?._callback);\n\n      debug: logger?.debug5(\"Adding/updating handler\", options);\n      const callback = wrapCallback(handler, options._debounceWindow);\n      callback.onRemove(() => {\n        deleteHandler(handler, options);\n      });\n\n      const entry = { _callback: callback, _options: options };\n      allCallbacks.sGet(element).set(handler, entry);\n      return entry;\n    };\n\n    // ----------\n\n    const setupOnResize = async (\n      handler: OnResizeHandler,\n      userOptions: OnResizeOptions | undefined,\n    ) => {\n      const options = await fetchOptions(userOptions || {});\n      const element = options._element;\n\n      // Don't await for the size data before creating the callback so that\n      // setupOnResize and removeOnResize have the same \"timing\" and therefore\n      // calling onResize and offResize immediately without awaiting removes the\n      // callback.\n      const entry = createCallback(handler, options);\n      const callback = entry._callback;\n      const sizeData = await fetchCurrentSize(element);\n\n      if (callback.isRemoved()) {\n        return;\n      }\n\n      entry._data = sizeData;\n      allSizeData.set(element, sizeData);\n\n      // Always use observeLater. This is because the initial call to callback\n      // shouldn't be debounced, and so we call it manually here, regardless if\n      // it's a new target or not. Therefore we don't want the observer to also\n      // call it in case it _is_ a new target.\n      // It's ok if already observed, won't do anything.\n      xObserver.observeLater(element);\n\n      if (!userOptions?.skipInitial) {\n        debug: logger?.debug5(\"Calling initially with\", element, sizeData);\n        // Use a one-off callback that's not debounced for the initial call.\n        await invokeCallback(wrapCallback(handler), element, sizeData);\n      }\n    };\n\n    // ----------\n\n    const removeOnResize = async (\n      handler: OnResizeHandler,\n      target: SizeTarget | undefined,\n    ) => {\n      const options = await fetchOptions({ target });\n      const element = options._element;\n      const currEntry = allCallbacks.get(element)?.get(handler);\n      if (currEntry) {\n        MH.remove(currEntry._callback);\n\n        if (handler === setSizeCssProps) {\n          // delete the properties\n          setSizeCssProps(element, null);\n        }\n      }\n    };\n\n    // ----------\n\n    const deleteHandler = (\n      handler: OnResizeHandler,\n      options: OnResizeOptionsInternal,\n    ) => {\n      const element = options._element;\n      MH.deleteKey(allCallbacks.get(element), handler);\n      allCallbacks.prune(element);\n\n      if (!allCallbacks.has(element)) {\n        debug: logger?.debug4(\n          \"No more callbacks for target; unobserving\",\n          element,\n        );\n        xObserver.unobserve(element);\n        MH.deleteKey(allSizeData, element);\n      }\n    };\n\n    // ----------\n\n    const processEntry = (entry: ResizeObserverEntry) => {\n      // In reality, it can't be just a base Element\n      const element = MH.targetOf(entry);\n\n      const latestData = getSizeData(entry);\n      allSizeData.set(element, latestData);\n\n      debug: logger?.debug9(\"New size data\", element, latestData);\n\n      for (const entry of allCallbacks.get(element)?.values() || []) {\n        const thresholdsExceeded = hasExceededThreshold(\n          entry._options,\n          latestData,\n          entry._data,\n        );\n\n        if (!thresholdsExceeded) {\n          debug: logger?.debug9(\"Threshold not exceeded\");\n          continue;\n        }\n\n        entry._data = latestData;\n\n        invokeCallback(entry._callback, element, latestData);\n      }\n    };\n\n    // ----------\n\n    this.fetchCurrentSize = fetchCurrentSize;\n\n    // ----------\n\n    this.trackSize = async (handler?, options?) => {\n      if (!handler) {\n        handler = setSizeCssProps;\n      }\n\n      return setupOnResize(handler, options);\n    };\n\n    // ----------\n\n    this.noTrackSize = (handler?, target?) => {\n      if (!handler) {\n        handler = setSizeCssProps;\n      }\n\n      removeOnResize(handler, target); // no need to await\n    };\n\n    // ----------\n\n    this.onResize = setupOnResize;\n\n    // ----------\n\n    this.offResize = (handler, target?) => {\n      removeOnResize(handler, target); // no need to await\n    };\n  }\n}\n\n/**\n * @interface\n */\nexport type SizeWatcherConfig = {\n  /**\n   * The default value for\n   * {@link OnResizeOptions.debounceWindow | debounceWindow} in calls to\n   * {@link SizeWatcher.onResize}.\n   *\n   * @defaultValue 75\n   */\n  debounceWindow?: number;\n\n  /**\n   * The default value for\n   * {@link OnResizeOptions.threshold | threshold} in calls to\n   * {@link SizeWatcher.onResize}.\n   *\n   * @defaultValue 50\n   */\n  resizeThreshold?: number;\n};\n\n/**\n * @interface\n */\nexport type OnResizeOptions = {\n  /**\n   * If it is not given, or is `null` or `window`, then it will track the size\n   * of the viewport (akin to `clientHeight` on `documentElement`).\n   *\n   * If it is `document`, then it will use `document.documentElement`.\n   *\n   * Other values of target must be an `Element` and are taken literally.\n   *\n   * @defaultValue undefined\n   */\n  target?: SizeTarget;\n\n  /**\n   * Specifies whether to listen for changes in content box size or border box\n   * size.\n   *\n   * If not given, then it listens for changes in either.\n   *\n   * @defaultValue undefined\n   */\n  box?: Box;\n\n  /**\n   * Specifies whether to listen for changes in width or height.\n   *\n   * If not given, then it listens for changes in either.\n   *\n   * @defaultValue undefined\n   */\n  dimension?: Dimension;\n\n  /**\n   * If non-0, the handler will only be called when the target's size in the\n   * observed {@link OnResizeOptions.dimension} and {@link OnResizeOptions.box}\n   * type has changed at least `threshold` pixels since the last time the\n   * handler was called.\n   *\n   * Special case when `threshold` is 0 and at least one of\n   * {@link OnResizeOptions.dimension} or {@link OnResizeOptions.box} is given:\n   * if there's a resize event but the size in the observed dimensions/box\n   * types has not changed, the callback is _not_ called.\n   *\n   * @defaultValue {@link SizeWatcherConfig.resizeThreshold}\n   */\n  threshold?: number;\n\n  /**\n   * Do not call the handler until there's a future resize of the element.\n   *\n   * By default we call the handler (almost) immediately with the current size\n   * data for the target.\n   *\n   * @defaultValue false\n   */\n  skipInitial?: boolean;\n\n  /**\n   * If non-0, the handler will be \"debounced\" so it's called at most\n   * `debounceWindow` milliseconds.\n   *\n   * @defaultValue {@link SizeWatcherConfig.debounceWindow}\n   */\n  debounceWindow?: number;\n};\n\n/**\n * The handler is invoked with three arguments:\n *\n * - the element that has been resized: if the target you requested was the\n *   viewport, then this will be a fixed positioned overlay that tracks the\n *   size of the viewport\n * - the {@link SizeData} for the element\n */\nexport type OnResizeHandlerArgs = [Element, SizeData];\nexport type OnResizeCallback = Callback<OnResizeHandlerArgs>;\nexport type OnResizeHandler =\n  | CallbackHandler<OnResizeHandlerArgs>\n  | OnResizeCallback;\n\nexport type SizeData = Record<Box, Size>;\n\n// ----------------------------------------\n\ntype SizeWatcherConfigInternal = {\n  _debounceWindow: number;\n  _resizeThreshold: number;\n};\n\ntype OnResizeOptionsInternal = {\n  _element: Element;\n  _box: Box | null;\n  _dimension: Dimension | null;\n  _threshold: number;\n  _debounceWindow: number;\n};\n\ntype CallbackEntry = {\n  _callback: OnResizeCallback;\n  _options: OnResizeOptionsInternal;\n  _data?: SizeData;\n};\n\nconst CONSTRUCTOR_KEY: unique symbol = MC.SYMBOL() as typeof CONSTRUCTOR_KEY;\nconst instances = MH.newMap<string, SizeWatcher>();\n\nconst getConfig = (config: SizeWatcherConfig): SizeWatcherConfigInternal => {\n  return {\n    _debounceWindow: toNonNegNum(config[MC.S_DEBOUNCE_WINDOW], 75),\n    // If threshold is 0, internally treat as 1 (pixel)\n    _resizeThreshold: toNonNegNum(config.resizeThreshold, 50) || 1,\n  };\n};\n\n// --------------------\n\nconst hasExceededThreshold = (\n  options: OnResizeOptionsInternal,\n  latestData: SizeData,\n  lastThresholdData: SizeData | undefined,\n): boolean => {\n  if (!lastThresholdData) {\n    /* istanbul ignore */\n    return false;\n  }\n\n  let box: Box, dim: Dimension;\n  for (box in latestData) {\n    if (options._box && options._box !== box) {\n      continue;\n    }\n\n    for (dim in latestData[box]) {\n      if (options._dimension && options._dimension !== dim) {\n        continue;\n      }\n\n      const diff = MH.abs(latestData[box][dim] - lastThresholdData[box][dim]);\n      if (diff >= options._threshold) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n};\n\nconst getSizeData = (entry: ResizeObserverEntry): SizeData => {\n  const borderBox = getEntryBorderBox(entry, true);\n  const contentBox = getEntryContentBox(entry);\n\n  return {\n    border: borderBox,\n    content: contentBox,\n  };\n};\n\nconst setSizeCssProps = (\n  element: Element,\n  sizeData: SizeData | undefined | null,\n) => {\n  let prefix = \"\";\n  if (element === tryGetViewportOverlay()) {\n    // Set the CSS vars on the root element\n    element = MH.getDocElement();\n    prefix = \"window-\";\n  }\n\n  const props = {\n    borderWidth: sizeData?.border[MC.S_WIDTH],\n    borderHeight: sizeData?.border[MC.S_HEIGHT],\n    contentWidth: sizeData?.content[MC.S_WIDTH],\n    contentHeight: sizeData?.content[MC.S_HEIGHT],\n  };\n  setNumericStyleProps(element, props, { _prefix: prefix }); // don't await here\n};\n\nconst fetchElement = async (\n  target: SizeTarget | undefined,\n): Promise<Element> => {\n  if (MH.isElement(target)) {\n    return target;\n  }\n\n  if (!target || target === MH.getWindow()) {\n    return fetchViewportOverlay();\n  }\n\n  if (target === MH.getDoc()) {\n    return MH.getDocElement();\n  }\n\n  throw MH.usageError(\"Unsupported resize target\");\n};\n\nconst invokeCallback = (\n  callback: OnResizeCallback,\n  element: Element,\n  sizeData: SizeData,\n) => callback.invoke(element, MH.copyObject(sizeData)).catch(logError);\n"],"mappings":"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","ignoreList":[]}