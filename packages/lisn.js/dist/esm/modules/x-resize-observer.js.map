{"version":3,"file":"x-resize-observer.js","names":["MH","logWarn","logError","debug","XResizeObserver","constructor","callback","debounceWindow","_defineProperty","logger","Logger","name","buffer","newMap","targetsToSkip","newWeakMap","observedTargets","newWeakSet","timer","resizeHandler","entries","entry","target","targetOf","skipNum","get","undefined","set","bugError","deleteKey","debug9","length","size","sizeOf","setTimer","arrayFrom","values","clear","borderObserver","newResizeObserver","contentObserver","observeTarget","add","observe","box","targets","debug10","observeLater","has","unobserve","disconnect"],"sources":["../../../src/ts/modules/x-resize-observer.ts"],"sourcesContent":["/**\n * @module Modules/XResizeObserver\n */\n\nimport * as MH from \"@lisn/globals/minification-helpers\";\n\nimport { logWarn, logError } from \"@lisn/utils/log\";\n\nimport debug from \"@lisn/debug/debug\";\n\nexport type XResizeObserverCallback = (\n  entries: ResizeObserverEntry[],\n  observer: XResizeObserver,\n) => void;\n\n/**\n * {@link XResizeObserver} is an extension of\n * {@link https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver | ResizeObserver}\n * - observes both border box and content box size changes\n * - can skip the initial callback that happens shortly after setting up via\n *   {@link observeLater}\n * - can debounce the callback\n */\nexport class XResizeObserver {\n  /**\n   * Like {@link https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver/observe | ResizeObserver:observe} except it accepts multiple targets.\n   */\n  readonly observe: (...targets: Element[]) => void;\n\n  /**\n   * Like {@link observe} but it ignores the initial almost immediate callback\n   * and only calls the callback on a subsequent resize.\n   *\n   * If the target is already being observed, nothing is done.\n   */\n  readonly observeLater: (...targets: Element[]) => void;\n\n  /**\n   * Like {@link https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver/unobserve | ResizeObserver:unobserve} except it accepts multiple targets.\n   */\n  readonly unobserve: (...targets: Element[]) => void;\n\n  /**\n   * Like {@link https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver/disconnect | ResizeObserver:disconnect}.\n   */\n  readonly disconnect: () => void;\n\n  /**\n   * @param debounceWindow Debounce the handler so that it's called at most\n   *                       every `debounceWindow` ms.\n   */\n  constructor(callback: XResizeObserverCallback, debounceWindow?: number) {\n    const logger = debug ? new debug.Logger({ name: \"XResizeObserver\" }) : null;\n\n    // Keep the latest ResizeObserverEntry for each target during the\n    // debounceWindow. Short-lived, so ok to use a Map.\n    const buffer = MH.newMap<Element, ResizeObserverEntry>();\n\n    // Since internally we have two observers, one for border box, one for\n    // content box, we will get called initially twice for a target. So we keep\n    // a counter of 1 or 2 for how many more calls to ignore.\n    const targetsToSkip = MH.newWeakMap<Element, 1 | 2>();\n\n    let observedTargets = MH.newWeakSet<Element>();\n\n    debounceWindow ??= 0;\n\n    let timer: ReturnType<typeof setTimeout> | null = null;\n    const resizeHandler = (entries: ResizeObserverEntry[]) => {\n      // Override entries for previous targets, but keep entries whose targets\n      // were not resized in this round\n      for (const entry of entries) {\n        const target = MH.targetOf(entry);\n        const skipNum = targetsToSkip.get(target);\n        if (skipNum !== undefined) {\n          if (skipNum === 2) {\n            // expect one more call\n            targetsToSkip.set(target, 1);\n          } else {\n            // done\n            /* istanbul ignore next */\n            if (skipNum !== 1) {\n              logError(MH.bugError(`# targetsToSkip is ${skipNum}`));\n            }\n            MH.deleteKey(targetsToSkip, target);\n          }\n\n          continue;\n        }\n\n        buffer.set(target, entry);\n      }\n\n      debug: logger?.debug9(\n        `Got ${entries.length} new entries. ` +\n          `Have ${buffer.size} unique-target entries`,\n        entries,\n      );\n\n      if (!timer && MH.sizeOf(buffer)) {\n        timer = MH.setTimer(() => {\n          if (MH.sizeOf(buffer)) {\n            callback(MH.arrayFrom(buffer.values()), this);\n            buffer.clear();\n          }\n\n          timer = null;\n        }, debounceWindow);\n      }\n    };\n\n    const borderObserver = MH.newResizeObserver(resizeHandler);\n    const contentObserver = MH.newResizeObserver(resizeHandler);\n    if (!borderObserver || !contentObserver) {\n      logWarn(\n        \"This browser does not support ResizeObserver. Some features won't work.\",\n      );\n    }\n\n    const observeTarget = (target: Element) => {\n      observedTargets.add(target);\n      borderObserver?.observe(target, { box: \"border-box\" });\n      contentObserver?.observe(target);\n    };\n\n    // --------------------\n\n    this.observe = (...targets) => {\n      debug: logger?.debug10(\"Observing targets\", targets);\n\n      for (const target of targets) {\n        observeTarget(target);\n      }\n    };\n\n    this.observeLater = (...targets) => {\n      debug: logger?.debug10(\"Observing targets (later)\", targets);\n      for (const target of targets) {\n        // Only skip them if not already observed, otherwise the initial\n        // (almost) immediate callback won't happen anyway.\n        if (observedTargets.has(target)) {\n          continue;\n        }\n\n        targetsToSkip.set(target, 2);\n        observeTarget(target);\n      }\n    };\n\n    this.unobserve = (...targets) => {\n      debug: logger?.debug10(\"Unobserving targets\", targets);\n\n      for (const target of targets) {\n        MH.deleteKey(observedTargets, target);\n        borderObserver?.unobserve(target);\n        contentObserver?.unobserve(target);\n      }\n    };\n\n    this.disconnect = () => {\n      debug: logger?.debug10(\"Disconnecting\");\n      observedTargets = MH.newWeakSet();\n      borderObserver?.disconnect();\n      contentObserver?.disconnect();\n    };\n  }\n}\n"],"mappings":"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","ignoreList":[]}