{"version":3,"file":"same-height.cjs","names":["MC","_interopRequireWildcard","require","MH","_settings","_cssAlter","_domQuery","_log","_math","_text","_validation","_sizeWatcher","_widget","_debug","_interopRequireDefault","e","__esModule","_getRequireWildcardCache","WeakMap","r","t","_typeof","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","o","Symbol","iterator","constructor","prototype","_slicedToArray","_arrayWithHoles","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","TypeError","l","f","next","done","push","value","length","Array","isArray","_regeneratorRuntime","c","asyncIterator","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","h","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","resolve","__await","then","callInvokeWithMethodAndArg","Error","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","resultName","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","isNaN","displayName","isGeneratorFunction","name","mark","setPrototypeOf","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","_catch","delegateYield","asyncGeneratorStep","_asyncToGenerator","arguments","apply","_next","_throw","_toConsumableArray","_arrayWithoutHoles","_iterableToArray","_nonIterableSpread","from","_arrayLikeToArray","_createForOfIteratorHelper","_n","F","toString","test","_classCallCheck","_defineProperties","_toPropertyKey","key","_createClass","_callSuper","_getPrototypeOf","_possibleConstructorReturn","_isNativeReflectConstruct","Reflect","construct","_assertThisInitialized","ReferenceError","Boolean","valueOf","_inherits","_setPrototypeOf","bind","_superPropGet","_get","_superPropBase","_defineProperty","_toPrimitive","toPrimitive","String","Number","SameHeight","exports","_Widget","containerElement","config","_SameHeight$get","_this","destroyPromise","destroy","id","DUMMY_ID","items","getItemsFrom","sizeOf","usageError","_iterator","_step","item","parentOf","err","fetchConfig","fullConfig","promiseResolve","isDestroyed","init","toColumn","setData","PREFIX_ORIENTATION","S_VERTICAL","toRow","delData","getItems","getItemConfigs","newMap","entries","instance","isInstanceOf","register","registerWidget","WIDGET_NAME","element","isHTMLElement","logError","configValidator","Widget","PREFIXED_NAME","prefixName","PREFIX_ROOT","concat","PREFIX_ITEM","PREFIX_ITEM__FOR_SELECT","S_TEXT","S_IMAGE","MIN_CHARS_FOR_TEXT","diffTolerance","validateNumber","resizeThreshold","S_DEBOUNCE_WINDOW","isText","getData","lengthOf","innerText","areImagesLoaded","_iterator2","querySelectorAll","_step2","img","naturalWidth","width","naturalHeight","height","_ref","_callee","userConfig","_userConfig$minGap","_userConfig$maxFreeR","_userConfig$maxWidthR","_userConfig$diffToler","_userConfig$resizeThr","_userConfig$debounceW","colGapStr","minGap","_callee$","_context","getComputedStyleProp","getNumValue","strReplace","settings","sameHeightMinGap","_minGap","toNumWithBounds","min","_maxFreeR","maxFreeR","sameHeightMaxFreeR","max","_maxWidthR","maxWidthR","sameHeightMaxWidthR","_diffTolerance","sameHeightDiffTolerance","_resizeThreshold","sameHeightResizeThreshold","_debounceWindow","debounceWindow","sameHeightDebounceWindow","_x","_x2","strValue","defaultValue","num","parseFloat","NaN","findItems","getDefaultWidgetSelector","getVisibleContentChildren","inputItems","itemMap","addItem","itemType","_iterator3","_step3","Map","_iterator4","_step4","_step4$value","widget","logger","debug","Logger","formatAsString","sizeWatcher","SizeWatcher","reuse","allItems","callCounter","isFirstTime","lastOptimalHeight","hasScheduledReset","counterTimeout","resizeHandler","sizeData","debug7","setTimer","clearTimer","measurements","calculateMeasurements","getOptimalHeight","abs","setWidths","properties","bugError","_width","border","S_WIDTH","content","_height","S_HEIGHT","observeAll","_iterator5","_step5","onResize","target","unobserveAll","_iterator6","_step6","offResize","_iterator7","_step7","_step7$value","getWidthAtH","debug9","setNumericStyleProps","sameHeightW","_units","onDisable","onEnable","onDestroy","_callee2","_iterator8","_step8","_callee2$","_context2","removeClasses","t0","clear","getProperties","_type","_aspectR","_area","_extraH","_components","_iterator9","_step9","_step9$value","addClasses","getTextComponents","_iterator10","_step10","child","components","_iterator11","_step11","debug8","tArea","tExtraH","imgAR","flexW","nItems","_iterator12","_step12","_step12$value","thisTxtArea","thisTxtExtraH","_iterator13","_step13","component","cmpProps","thisAspectR","_tArea","_tExtraH","_imgAR","_flexW","_nItems","targetHeight","h0","sqrt","_quadraticRoots","quadraticRoots","_quadraticRoots2","h2","h1","hR0","hR1","hR2","hF2","hF1","_quadraticRoots3","_quadraticRoots4","hConstr1","filter","isValidNum","hConstr2","tw0","iw0","freeSpace0","debug1"],"sources":["../../../src/ts/widgets/same-height.ts"],"sourcesContent":["/**\n * @module Widgets\n */\n\n// This widget finds optimal widths of flexbox children so that their heights\n// are equal or as close as possible to each other. It takes into account\n// whether they contain text (and possibly other elements, but not images) or\n// images.\n//\n// NOTE:\n//  - We assume that a given flexbox child is either a \"text container\" and\n//    contains only text and other non-image elements (such as buttons), or is\n//    an \"image container\" and contains only images.\n//  - We also assume that all the text inside a text container is the same\n//    font size as the font size of the text container.\n//\n// ~~~~~~ BACKGROUND: analysis for one text container and one image container ~~~~~~\n//\n// A text box has a fixed area, its height decreasing as width increases.\n// Whereas an image has a fixed aspect ratio, its height increasing as width\n// increases.\n//\n// We want to find an optimal configuration at which the text container (which\n// can include other elements apart from text) and image heights are equal, or\n// if not possible, at which they are as close as possible to each other while\n// satisfying as best as possible these \"guidelines\" (constraints that are not\n// enforced), based on visual appeal:\n//   - minGap, minimum gap between each item\n//   - maxWidthR, maximum ratio between the width of the widest child and the\n//     narrowest child\n//   - maxFreeR, maximum free space in the container as a percentage of its\n//     total width\n//\n// Then we set flex-basis as the optimal width (making sure this is disabled\n// when the flex direction is column). This allows for fluid width if the user\n// to configure shrink or wrap on the flexbox using CSS.\n//\n// ~~~~~~ FORMULAE: text and image width as a function of their height ~~~~~~\n//\n// For a given height, h, the widths of the text and image are:\n//\n//                 txtArea\n//   txtW(h) =  —————————————\n//              h - txtExtraH\n//\n//   imgW(h) = imgAspectR * h\n//\n// where txtExtraH comes from buttons and other non-text elements inside the\n// text container, whose height is treated as fixed (not changing with width).\n//\n// ~~~~~~ PLOT: total width as a function of height ~~~~~~\n//\n// The sum of the widths of image and text varies with their height, h, as:\n//\n//   w(h) = txtW(h) + imgW(h)\n//\n//              txtArea\n//        =  —————————————  +  imgAspectR * h\n//           h - txtExtraH\n//\n//\n//       w(h)\n//        ^\n//        | |              .\n//        | .             .\n//        |  .           .\n// flexW  +   .         .\n//        |    .       .\n//        |     .    .\n//        |       -\n//        |\n//        |———|———|—————|———————————> h\n//            h1  h0    h2\n//\n//\n// ~~~~~~ FORMULAE: height at which total width is minimum ~~~~~~\n//\n// The minimum of the function w(h) is at h = h0\n//\n//            ⌈   txtArea  ⌉\n//   h0 = sqrt| —————————— | + txtExtraH\n//            ⌊ imgAspectR ⌋\n//\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n//\n// The widths of image and text container at height = h0 are:\n//\n//   txtW(h0) = sqrt( txtArea * imgAspectR )\n//\n//   imgW(h0) = sqrt( txtArea * imgAspectR ) + imgAspectR * txtExtraH\n//            = txtW(h0) + imgAspectR * txtExtraH\n//\n// - NOTE: at if txtExtraH is 0 (i.e. the container has only text), then\n//   their widths are equal at h0; otherwise the image is wider\n//\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n//\n// There are zero, one or two values of h at which w(h) equals the flexbox\n// width, flexW. Labelled h1 and h2 above.\n//\n// ~~~~~~ FORMULAE: height at which total width is equal to flexbox width ~~~~~~\n//\n// The heights at which the sum of the widths, w(h) equals exactly flexW are:\n//\n//          -b ± sqrt( b^2 - 4ac )\n//   h2/1 = ——————————————————————\n//                  2a\n//\n// where:\n// a = imgAspectR\n// b = - ( (imgAspectR * txtExtraH) + flexW )\n// c = txtArea + (txtExtraH * flexW)\n//\n// If h1 and h2 are real, then h1 <= h0 <= h2, as shown in plot above.\n//\n// ~~~~~~ SCENARIOS: free space or overflow in the flexbox ~~~~~~\n//\n// Whether there is a solution to the above equation, i.e. whether h1 and h2\n// are real, depends on which scenario we have:\n//\n// 1. If flexW = w(h0), then h1 = h2 = h0\n// 2. If flexW < w(h0), then there is no exact solution, i.e. it's impossible\n//    to fit the text and image inside the flexbox and have them equal heights;\n//    there is overflow even at h0\n// 3. If flexW > w(h0) (as in the graph above), then at h0 there is free space\n//    in the flexbox and we can choose any height between h1 and h2\n//\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n//\n// The widths h0, h1 and h2 represent the following visual configuration:\n//   - h0: intermediate height, maximum free space in the container;\n//   - h1: minimum height (i.e. wide text and small image), no free space in\n//     the container;\n//   - h2: maximum height (i.e. narrow text and large image), no free space in\n//     the container;\n//\n// ~~~~~~ THEREFORE: approach ~~~~~~\n//\n// 1. If flexW = w(h0), i.e. h1 = h2 = h0:\n//    => we choose h0 as the height\n// 2. If flexW < w(h0), i.e. it's impossible to fit the text and image inside\n//    the flexbox and have them equal heights:\n//    => we still choose h0 as the height as that gives the least amount of\n//       overflow; user-defined CSS can control whether the items will be\n//       shrunk, the flexbox will wrap or overflow\n// 3. If flexW > w(h0), i.e. at h0 there is free space in the flexbox:\n//    => choose a height between h1 and h2 that best fits with the guidelines\n//       maxWidthR and maxFreeR\n//\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n//\n// In scenario 3 we can look at the guidelines, maxWidthR and maxFreeR.\n//\n// ~~~~~~ GUIDELINE: maxWidthR ~~~~~~\n//\n// ~~~~~~ FORMULAE: height at which text and image width are equal ~~~~~~\n//\n// The width of the text and image container are equal at height hR0:\n//\n//         txtExtraH + sqrt( txtExtraH^2  +  4 * (h0 - txtExtraH)^2 )\n// hR0  =  ——————————————————————————————————————————————————————————\n//                                    2\n//\n// ~~~~~~ FORMULAE: height at which text to image width is maxWidthR ~~~~~~\n//\n// For heights < hR0, i.e. text becomes wider than the image, at some point the\n// ratio of text width to image width becomes maxWidthR. This happens at hR1.\n//\n//                         ⌈                 4 * (h0 - txtExtraH)^2 ⌉\n//         txtExtraH + sqrt| txtExtraH^2  +  —————————————————————— |\n//                         ⌊                        maxWidthR       ⌋\n// hR1  =  ——————————————————————————————————————————————————————————\n//                                    2\n//\n// ~~~~~~ FORMULAE: height at which image to text width is maxWidthR ~~~~~~\n//\n// For heights > hR0, i.e. text becomes narrower than the image, at some point\n// the ratio of image width to text width becomes maxWidthR. This happens at hR2.\n//\n//         txtExtraH + sqrt( txtExtraH^2  +  4 * maxWidthR * (h0 - txtExtraH)^2 )\n// hR2  =  ——————————————————————————————————————————————————————————————————————\n//                                        2\n//\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n//\n// NOTE:\n// - hR1 <= hR0 <= hR2 && hR0 <= h0\n// - hR0, hR1 and hR2 are the first (larger) roots of the quadratic equation\n//   with coefficients:\n//     a = imgAspectR * R\n//     b = - imgAspectR * txtExtraH * R\n//     c = - textArea\n//   where R = 1 gives hR0, R = maxWidthR gives hR1 and R = 1 / maxWidthR gives hR2\n// - The smaller roots of the equation should be negative, so we ignore them\n//\n// ~~~~~~ GUIDELINE: maxFreeR ~~~~~~\n//\n// ~~~~~~ FORMULAE: free space in flexbox relative to its width ~~~~~~\n//\n// The percentage of free space in the container is:\n//\n//           flexW - w(h)\n// freeR  =  ————————————\n//              flexW\n//\n//\n//                             txtArea\n//                flexW  -  —————————————  - imgAspectR * h\n//                          h - txtExtraH\n//             =  —————————————————————————————————————————\n//                                flexW\n//\n// ~~~~~~ FORMULAE: height at which relative free space is maxFreeR ~~~~~~\n//\n// This would be equal to maxFreeR at hF1 and hF2:\n//\n//          -b ± sqrt( b^2 - 4ac )\n//   hF2/1 = ——————————————————————\n//                  2a\n//\n// where:\n// a = imgAspectR\n// b = - ( (imgAspectR * txtExtraH) + ( flexW * (1 - maxFreeR) ) )\n// c = txtArea + ( txtExtraH * flexW * (1 - maxFreeR) )\n//\n// If hF1 and hF2 are real, then h1 < hF1 <= h0 <= hF2 < h2.\n//\n// ~~~~~~ THEREFORE: choosing a height in scenario 3 ~~~~~~\n//\n// So in scenario 3 we can choose any height h between\n//\n//   max(h1, hR1, hF1)  and  min(h2, hR2, hF2)\n//\n// Note, it's possible that max(h1, hR1, hF1) is greater than min(h2, hR2, hF2),\n// e.g. if hF1 > hR2 or hR1 > hF2.\n//\n// This will make the text and image equal height, fitting in the flexbox, and\n// if possible, satisfying both maxFreeR and maxWidthR.\n//\n// Here we choose the smallest height possible, which would result in the\n// larger ratio between text width and image width, but it will satisfy the\n// constraints maxFreeR and maxWidthR, so that is ok.\n//\n// ~~~~~~ GENERALISING: for more than one text and/or image container ~~~~~~\n//\n// We can generalise the above in order to find an approximate solution for the\n// case of multiple text or image containers (an exact solution would require\n// solving a polynomial of degree equal to the number of elements).\n//\n// If we imaging putting all text in one container and all images in another\n// container we are back at the above exact solutions for a single text and\n// image container.\n//\n// We can solve for the following parameters:\n// - txtArea:    total text area\n//               = sum_i(txtArea_i)\n//\n// - txtExtraH:  weighted average extra height\n//               = sum_i(txtExtraH_i * txtArea_i) / txtArea\n//\n// - imgAspectR: total image aspect ratio (for horizontally laid out image\n//               containers)\n//               = sum_i(imgAspectR_i)\n//\n// ~~~~~~ CASE 1: only images containers ~~~~~~\n// If we have only image containers, we solve for the optimal height as follows:\n//\n//   flexW = imgAspectR * h\n//\n//                   flexW\n//   => hIdeal  =  ——————————\n//                 imgAspectR\n//\n// ~~~~~~ CASE 2: only text containers ~~~~~~\n// If we have only text containers, we solve for the optimal height as follows:\n//\n//                  txtArea\n//   flexW  =  ——————————————————\n//             hIdeal - txtExtraH\n//\n//                 txtArea\n//   => hIdeal  =  ———————  +  txtExtraH\n//                  flexW\n//\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n// Once we've found the optimal height h, we calculate the individual widths of\n// the flexbox children as:\n//\n//                  txtArea_i\n//   txtW_i(h) =  —————————————\n//                h - txtExtraH_i\n//\n//   imgW_i(h) = imgAspectR_i * h\n//\n// ~~~~~~ IMPLEMENTATION ~~~~~~\n//\n// We go through the flexbox children and determine whether a child is a \"text\n// container\" or an \"image container\".\n//\n// For image containers, we measure the width and height and calculate the\n// aspect ratio using these.\n//\n// For text containers, we measure their width and height. We calculate the\n// text area by measuring the size of all children of the text container that\n// are deemed to contain only text (or if the entire text container is deemed\n// to contain only text, then we take its size). Then we sum the areas of\n// all such text-only boxes.\n//\n// To determine the extra height in the text container, we take the total\n// height of all text-only boxes inside it, and we subtract that from its\n// measured height.\n//\n// NOTE:\n// - This does not work if the flexbox children are set to align stretch,\n//   because in such cases there would be free vertical space in the container\n//   that shouldn't be counted.\n// - If the flexbox children or any of their descendants have paddings and\n//   margins, then this calculation would only work if the paddings/margins\n//   inside text containers are absolute and only on top and bottom, and\n//   paddings/margins inside image containers are in percentages and only on\n//   descendants of the image container. Otherwise the image aspect ratio and the\n//   extra text height would not be constant, and there may be extra width in\n//   the text container. It is very tricky to take all of this into account. So\n//   we ignore such cases and assume constant image aspect ratio and constant\n//   text area and text container extra height.\n//\n// We use resize observers to get the size of relevant elements and\n// re-calculate as needed.\n\nimport * as MC from \"@lisn/globals/minification-constants\";\nimport * as MH from \"@lisn/globals/minification-helpers\";\n\nimport { settings } from \"@lisn/globals/settings\";\n\nimport {\n  addClasses,\n  removeClasses,\n  getData,\n  setData,\n  delData,\n  setNumericStyleProps,\n  getComputedStyleProp,\n} from \"@lisn/utils/css-alter\";\nimport { getVisibleContentChildren } from \"@lisn/utils/dom-query\";\nimport { logError } from \"@lisn/utils/log\";\nimport { isValidNum, toNumWithBounds, quadraticRoots } from \"@lisn/utils/math\";\nimport { formatAsString } from \"@lisn/utils/text\";\nimport { validateNumber } from \"@lisn/utils/validation\";\n\nimport { SizeWatcher, SizeData } from \"@lisn/watchers/size-watcher\";\n\nimport {\n  Widget,\n  WidgetConfigValidatorObject,\n  registerWidget,\n  getDefaultWidgetSelector,\n} from \"@lisn/widgets/widget\";\n\nimport { LoggerInterface } from \"@lisn/debug/types\";\n\nimport debug from \"@lisn/debug/debug\";\n\n/**\n * Configures the given element as a {@link SameHeight} widget.\n *\n * The SameHeight widget sets up the given element as a flexbox and sets the\n * flex basis of its components so that their heights are as close as possible\n * to each other. It tracks their size (see {@link SizeWatcher}) and\n * continually updates the basis as needed.\n *\n * When calculating the best flex basis that would result in equal heights,\n * SameHeight determines whether a flex child is mostly text or mostly images\n * since the height of these scales in opposite manner with their width.\n * Therefore, the components of the widget should contain either mostly text or\n * mostly images.\n *\n * The widget should have more than one item and the items must be immediate\n * children of the container element.\n *\n * SameHeight tries to automatically determine if an item is mostly text or\n * mostly images based on the total display text content, but you can override\n * this in two ways:\n * 1. By passing a map of elements as {@link SameHeightConfig.items | items}\n *    instead of an array, and setting the value for each to either `\"text\"` or\n *    `\"image\"`\n * 2. By setting the `data-lisn-same-height-item` attribute to `\"text\"` or\n *   `\"image\"` on the children. **NOTE** however that when auto-discovering the\n *   items (i.e. when you have not explicitly passed a list/map of items), if\n *   you set the `data-lisn-same-height-item` attribute on _any_ child you must\n *   also add this attribute to all other children that are to be used by the\n *   widget. Other children (that don't have this attribute) will be ignored\n *   and assumed to be either zero-size or position absolute/fixed.\n *\n * **IMPORTANT:** You should not instantiate more than one {@link SameHeight}\n * widget on a given element. Use {@link SameHeight.get} to get an existing\n * instance if any. If there is already a widget instance, it will be destroyed!\n *\n * **IMPORTANT:** The element you pass will be set to `display: flex` and its\n * children will get `box-sizing: border-box` and continually updated\n * `flex-basis` style. You can add additional CSS to the element or its\n * children if you wish. For example you may wish to set `flex-wrap: wrap` on\n * the element and a `min-width` on the children.\n *\n * -----\n *\n * To use with auto-widgets (HTML API) (see {@link settings.autoWidgets}), the\n * following CSS classes or data attributes are recognized:\n * - `lisn-same-height` class or `data-lisn-same-height` attribute set on the\n *   container element that constitutes the widget\n *\n * When using auto-widgets, the elements that will be used as items are\n * discovered in the following way:\n * 1. The immediate children of the top-level element that constitutes the\n *    widget that have the `lisn-same-height-item` class or\n *    `data-lisn-same-height-item` attribute are taken.\n * 2. If none of the root's children have this class or attribute, then all of\n *    the immediate children of the widget element except any `script` or\n *    `style` elements are taken as the items.\n *\n * See below examples for what values you can use set for the data attribute\n * in order to modify the configuration of the automatically created widget.\n *\n * @example\n * This defines a simple SameHeight widget with one text and one image child.\n *\n * ```html\n * <div class=\"lisn-same-height\">\n *   <div>\n *     <p>\n *       Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\n *       eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad\n *       minim veniam, quis nostrud exercitation ullamco laboris nisi ut\n *       aliquip ex ea commodo consequat. Duis aute irure dolor in\n *       reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\n *       pariatur. Excepteur sint occaecat cupidatat non proident, sunt in\n *       culpa qui officia deserunt mollit anim id est laborum.\n *     </p>\n *   </div>\n *\n *   <div>\n *     <img\n *       src=\"https://www.wikipedia.org/portal/wikipedia.org/assets/img/Wikipedia-logo-v2@1.5x.png\"\n *     />\n *   </div>\n * </div>\n * ```\n *\n * @example\n * This defines a SameHeight widget with the flexbox children specified\n * explicitly (and one ignored), as well as having all custom settings.\n *\n * ```html\n * <div data-lisn-same-height=\"diff-tolerance=20\n *                             | resize-threshold=10\n *                             | debounce-window=50\n *                             | min-gap=50\n *                             | max-free-r=0.2\n *                             | max-width-r=3.2\">\n *   <div>Example ignored child</div>\n *\n *   <div data-lisn-same-height-item><!-- Will be detected as text anyway -->\n *     <p>\n *       Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\n *       eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad\n *       minim veniam, quis nostrud exercitation ullamco laboris nisi ut\n *       aliquip ex ea commodo consequat. Duis aute irure dolor in\n *       reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\n *       pariatur. Excepteur sint occaecat cupidatat non proident, sunt in\n *       culpa qui officia deserunt mollit anim id est laborum.\n *     </p>\n *   </div>\n *\n *   <!-- Explicitly set to image type, though it will be detected as such -->\n *   <div data-lisn-same-height-item=\"image\">\n *     <img\n *       src=\"https://www.wikipedia.org/portal/wikipedia.org/assets/img/Wikipedia-logo-v2@1.5x.png\"\n *     />\n *   </div>\n *\n *   <!-- Explicitly set to text type, because it will NOT be detected as such (text too short). -->\n *   <div data-lisn-same-height-item=\"text\">\n *     <p>\n *       Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n *     </p>\n *   </div>\n * </div>\n * ```\n */\nexport class SameHeight extends Widget {\n  /**\n   * Switches the flexbox to vertical (column) mode.\n   *\n   * You can alternatively do this by setting the\n   * `data-lisn-orientation=\"vertical\"` attribute on the element at any time.\n   *\n   * You can do this for example as part of a trigger:\n   *\n   * @example\n   * ```html\n   * <div class=\"lisn-same-height\"\n   *      data-lisn-on-layout=\"max-mobile-wide:set-attribute=data-lisn-orientation#vertical\">\n   *      <!-- ... children -->\n   * </div>\n   * ```\n   */\n  readonly toColumn: () => Promise<void>;\n\n  /**\n   * Switches the flexbox back to horizontal (row) mode, which is the default.\n   *\n   * You can alternatively do this by deleting the\n   * `data-lisn-orientation` attribute on the element, or setting it to\n   * `\"horizontal\"` at any time.\n   */\n  readonly toRow: () => Promise<void>;\n\n  /**\n   * Returns the elements used as the flex children.\n   */\n  readonly getItems: () => Element[];\n\n  /**\n   * Returns a map of the elements used as the flex children with their type.\n   */\n  readonly getItemConfigs: () => Map<Element, \"text\" | \"image\">;\n\n  /**\n   * If the element is already configured as a SameHeight widget, the widget\n   * instance is returned. Otherwise null.\n   */\n  static get(containerElement: Element): SameHeight | null {\n    const instance = super.get(containerElement, DUMMY_ID);\n    if (MH.isInstanceOf(instance, SameHeight)) {\n      return instance;\n    }\n    return null;\n  }\n\n  static register() {\n    registerWidget(\n      WIDGET_NAME,\n      (element, config) => {\n        if (MH.isHTMLElement(element)) {\n          if (!SameHeight.get(element)) {\n            return new SameHeight(element, config);\n          }\n        } else {\n          logError(\n            MH.usageError(\n              \"Only HTMLElement is supported for SameHeight widget\",\n            ),\n          );\n        }\n        return null;\n      },\n      configValidator,\n    );\n  }\n\n  constructor(containerElement: HTMLElement, config?: SameHeightConfig) {\n    const destroyPromise = SameHeight.get(containerElement)?.destroy();\n    super(containerElement, { id: DUMMY_ID });\n\n    const items = getItemsFrom(containerElement, config?.items);\n\n    if (MH.sizeOf(items) < 2) {\n      throw MH.usageError(\"SameHeight must have more than 1 item\");\n    }\n\n    for (const item of items.keys()) {\n      if (MH.parentOf(item) !== containerElement) {\n        throw MH.usageError(\n          \"SameHeight's items must be its immediate children\",\n        );\n      }\n    }\n\n    fetchConfig(containerElement, config).then((fullConfig) => {\n      (destroyPromise || MH.promiseResolve()).then(() => {\n        if (this.isDestroyed()) {\n          return;\n        }\n\n        init(this, containerElement, items, fullConfig);\n      });\n    });\n\n    this.toColumn = () =>\n      setData(containerElement, MC.PREFIX_ORIENTATION, MC.S_VERTICAL);\n\n    this.toRow = () => delData(containerElement, MC.PREFIX_ORIENTATION);\n\n    this.getItems = () => [...items.keys()];\n    this.getItemConfigs = () => MH.newMap([...items.entries()]);\n  }\n}\n\n/**\n * @interface\n */\nexport type SameHeightConfig = {\n  /**\n   * The elements that will make up the items. They **MUST** be immediate\n   * children of the container element.\n   *\n   * The widget should have more than one item.\n   *\n   * If this is not specified, then\n   * 1. The immediate children of the top-level element that constitutes the\n   *    widget that have the `lisn-same-height-item` class or\n   *    `data-lisn-same-height-item` attribute are taken.\n   * 2. If none of the root's children have this class or attribute, then all of\n   *    the immediate children of the widget element except any `script` or\n   *    `style` elements are taken as the items.\n   */\n  items?: Element[] | Map<Element, \"image\" | \"text\">;\n\n  /**\n   * After setting the flex basis of the children and their size updates, in\n   * case the resultant height differs from the predicted calculated one by\n   * `diffTolerance` in pixels, then the calculations are re-run using the new\n   * sizes. Calculations are re-run at most once only.\n   *\n   * Differences between the predicted and resultant height would happen if the\n   * children contain a mixture of text and images or if there are margins or\n   * paddings that don't scale in the same way as the content.\n   *\n   * @defaultValue {@link settings.sameHeightDiffTolerance}\n   */\n  diffTolerance?: number;\n\n  /**\n   * The `resizeThreshold` to pass to the {@link SizeWatcher}.\n   *\n   * @defaultValue {@link settings.sameHeightResizeThreshold}\n   */\n  resizeThreshold?: number;\n\n  /**\n   * The `debounceWindow` to pass to the {@link SizeWatcher}.\n   *\n   * @defaultValue {@link settings.sameHeightDebounceWindow}\n   */\n  debounceWindow?: number;\n\n  /**\n   * Minimum gap between the flex items. Note that setting this to 0 while at\n   * the same time setting `flex-wrap` to `wrap` (or `wrap-reverse`) on the\n   * element may lead to premature/unnecessary wrapping.\n   *\n   * Note that this is not strictly enforced, and is only used in finding\n   * optimal height based on other constraints. If you want to enforce this gap,\n   * set it as a `column-gap` CSS rule.\n   *\n   * @defaultValue The effective `column-gap` on the container element style or\n   *               if none, {@link settings.sameHeightMinGap}\n   */\n  minGap?: number;\n\n  /**\n   * Maximum ratio between the free space in the flex container and its total\n   * width. You can set this to a negative number to disable this restriction.\n   *\n   * It has to be < 1. Otherwise it is invalid and disables this restriction.\n   *\n   * Note that this is not strictly enforced, and is only used in finding\n   * optimal height based on other constraints.\n   *\n   * @defaultValue {@link settings.sameHeightMaxFreeR}\n   */\n  maxFreeR?: number;\n\n  /**\n   * Maximum ratio between the width of the widest item and the narrowest item.\n   * You can set this to 0 or a negative number to disable this restriction.\n   *\n   * It has to be >= 1. Otherwise it is invalid and disables this restriction.\n   *\n   * Note that this is not strictly enforced, and is only used in finding\n   * optimal height based on other constraints.\n   *\n   * @defaultValue {@link settings.sameHeightMaxWidthR}\n   */\n  maxWidthR?: number;\n};\n\n// ------------------------------\n\ntype SameHeightConfigInternal = {\n  _minGap: number;\n  _diffTolerance: number;\n  _resizeThreshold: number;\n  _debounceWindow: number;\n  _maxFreeR: number;\n  _maxWidthR: number;\n};\n\ntype ItemProperties = {\n  _type: \"\" | \"image\" | \"text\";\n  _width: number;\n  _height: number;\n  _aspectR: number;\n  _area: number;\n  _extraH: number;\n  _components: Element[];\n};\n\ntype AverageMeasurements = {\n  _tArea: number;\n  _tExtraH: number;\n  _imgAR: number;\n  _flexW: number;\n  _nItems: number;\n};\n\nconst WIDGET_NAME = \"same-height\";\nconst PREFIXED_NAME = MH.prefixName(WIDGET_NAME);\nconst PREFIX_ROOT = `${PREFIXED_NAME}__root`;\n\n// Use different classes for styling items to the one used for auto-discovering\n// them, so that re-creating existing widgets can correctly find the items to\n// be used by the new widget synchronously before the current one is destroyed.\nconst PREFIX_ITEM = `${PREFIXED_NAME}__item`;\nconst PREFIX_ITEM__FOR_SELECT = `${PREFIXED_NAME}-item`;\n\nconst S_TEXT = \"text\";\nconst S_IMAGE = \"image\";\n\n// Only one SameHeight widget per element is allowed, but Widget requires a\n// non-blank ID.\nconst DUMMY_ID = PREFIXED_NAME;\n\n// We consider elements that have text content of at least <MIN_CHARS_FOR_TEXT>\n// characters to be text.\nconst MIN_CHARS_FOR_TEXT = 100;\n\nconst configValidator: WidgetConfigValidatorObject<SameHeightConfig> = {\n  diffTolerance: validateNumber,\n  resizeThreshold: validateNumber,\n  [MC.S_DEBOUNCE_WINDOW]: validateNumber,\n  minGap: validateNumber,\n  maxFreeR: validateNumber,\n  maxWidthR: validateNumber,\n};\n\nconst isText = (element: Element) =>\n  getData(element, PREFIX_ITEM__FOR_SELECT) === S_TEXT ||\n  (getData(element, PREFIX_ITEM__FOR_SELECT) !== S_IMAGE &&\n    MH.isHTMLElement(element) &&\n    MH.lengthOf(element.innerText) >= MIN_CHARS_FOR_TEXT);\n\nconst areImagesLoaded = (element: Element) => {\n  for (const img of element.querySelectorAll(\"img\")) {\n    // Don't rely on img.complete since sometimes this returns false even\n    // though the image is loaded and has a size. Just check the size.\n    if (\n      img.naturalWidth === 0 ||\n      img.width === 0 ||\n      img.naturalHeight === 0 ||\n      img.height === 0\n    ) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nconst fetchConfig = async (\n  containerElement: HTMLElement,\n  userConfig: SameHeightConfig | undefined,\n): Promise<SameHeightConfigInternal> => {\n  const colGapStr = await getComputedStyleProp(containerElement, \"column-gap\");\n  const minGap = getNumValue(\n    MH.strReplace(colGapStr, /px$/, \"\"),\n    settings.sameHeightMinGap,\n  );\n\n  return {\n    _minGap: toNumWithBounds(userConfig?.minGap ?? minGap, { min: 0 }, 10),\n    _maxFreeR: toNumWithBounds(\n      userConfig?.maxFreeR ?? settings.sameHeightMaxFreeR,\n      { min: 0, max: 0.9 },\n      -1,\n    ),\n    _maxWidthR: toNumWithBounds(\n      userConfig?.maxWidthR ?? settings.sameHeightMaxWidthR,\n      { min: 1 },\n      -1,\n    ),\n    _diffTolerance:\n      userConfig?.diffTolerance ?? settings.sameHeightDiffTolerance,\n    _resizeThreshold:\n      userConfig?.resizeThreshold ?? settings.sameHeightResizeThreshold,\n    _debounceWindow:\n      userConfig?.debounceWindow ?? settings.sameHeightDebounceWindow,\n  };\n};\n\nconst getNumValue = (strValue: string | null, defaultValue: number): number => {\n  const num = strValue ? MH.parseFloat(strValue) : NaN;\n  return MH.isNaN(num) ? defaultValue : num;\n};\n\nconst findItems = (containerElement: HTMLElement) => {\n  const items = [\n    ...MH.querySelectorAll(\n      containerElement,\n      getDefaultWidgetSelector(PREFIX_ITEM__FOR_SELECT),\n    ),\n  ];\n\n  if (!MH.lengthOf(items)) {\n    items.push(...getVisibleContentChildren(containerElement));\n  }\n\n  return items;\n};\n\nconst getItemsFrom = (\n  containerElement: HTMLElement,\n  inputItems: Element[] | Map<Element, \"image\" | \"text\"> | undefined,\n) => {\n  const itemMap = MH.newMap<Element, \"image\" | \"text\">();\n\n  inputItems = inputItems || findItems(containerElement);\n\n  const addItem = (item: Element, itemType?: \"text\" | \"image\") => {\n    itemType = itemType || (isText(item) ? S_TEXT : S_IMAGE);\n    itemMap.set(item, itemType);\n  };\n\n  if (MH.isArray(inputItems)) {\n    for (const item of inputItems) {\n      addItem(item);\n    }\n  } else if (MH.isInstanceOf(inputItems, Map)) {\n    for (const [item, itemType] of inputItems.entries()) {\n      addItem(item, itemType);\n    }\n  }\n\n  return itemMap;\n};\n\nconst init = (\n  widget: SameHeight,\n  containerElement: HTMLElement,\n  items: Map<Element, \"image\" | \"text\">,\n  config: SameHeightConfigInternal,\n) => {\n  const logger = debug\n    ? new debug.Logger({\n        name: `SameHeight-${formatAsString(containerElement)}`,\n      })\n    : null;\n\n  const diffTolerance = config._diffTolerance;\n  const debounceWindow = config._debounceWindow;\n\n  const sizeWatcher = SizeWatcher.reuse({\n    [MC.S_DEBOUNCE_WINDOW]: debounceWindow,\n    resizeThreshold: config._resizeThreshold,\n  });\n\n  const allItems = MH.newMap<Element, ItemProperties>();\n\n  let callCounter = 0;\n  let isFirstTime = true;\n  let lastOptimalHeight = 0;\n  let hasScheduledReset = false;\n  let counterTimeout: ReturnType<typeof setTimeout> | null = null;\n\n  // ----------\n\n  const resizeHandler = (element: Element, sizeData: SizeData) => {\n    // Since the SizeWatcher calls us once for every element, we batch the\n    // re-calculations so they are done once in every cycle.\n    // Allow the queue of ResizeObserverEntry in the SizeWatcher to be\n    // emptied, and therefore to ensure we have the latest size for all\n    // elements.\n    if (!hasScheduledReset) {\n      debug: logger?.debug7(\"Scheduling calculations\", callCounter);\n      hasScheduledReset = true;\n\n      MH.setTimer(() => {\n        hasScheduledReset = false;\n\n        if (callCounter > 1) {\n          debug: logger?.debug7(\"Already re-calculated once, skipping\");\n          callCounter = 0;\n          return;\n        }\n\n        callCounter++;\n        if (counterTimeout) {\n          MH.clearTimer(counterTimeout);\n        }\n\n        const measurements = calculateMeasurements(\n          containerElement,\n          allItems,\n          isFirstTime,\n          logger,\n        );\n\n        const height = measurements\n          ? getOptimalHeight(measurements, config, logger)\n          : null;\n\n        if (height && MH.abs(lastOptimalHeight - height) > diffTolerance) {\n          // Re-set widths again. We may be called again in the next cycle if\n          // the change in size exceeds the resizeThreshold.\n          lastOptimalHeight = height;\n          isFirstTime = false;\n          setWidths(height); // no need to await\n\n          // If we are _not_ called again in the next cycle (just after\n          // debounceWindow), then reset the counter. It means the resultant\n          // change in size did not exceed the SizeWatcher threshold.\n          counterTimeout = MH.setTimer(() => {\n            callCounter = 0;\n          }, debounceWindow + 50);\n        } else {\n          // Done, until the next time elements are resized\n          callCounter = 0;\n        }\n      }, 0);\n    }\n\n    // Save the size of the item\n    const properties = allItems.get(element);\n    if (!properties) {\n      logError(MH.bugError(\"Got SizeWatcher call for unknown element\"));\n      return;\n    }\n\n    properties._width =\n      sizeData.border[MC.S_WIDTH] || sizeData.content[MC.S_WIDTH];\n    properties._height =\n      sizeData.border[MC.S_HEIGHT] || sizeData.content[MC.S_HEIGHT];\n\n    debug: logger?.debug7(\"Got size\", element, properties);\n  };\n\n  // ----------\n\n  const observeAll = () => {\n    isFirstTime = true;\n\n    for (const element of allItems.keys()) {\n      sizeWatcher.onResize(resizeHandler, { target: element });\n    }\n  };\n\n  // ----------\n\n  const unobserveAll = () => {\n    for (const element of allItems.keys()) {\n      sizeWatcher.offResize(resizeHandler, element);\n    }\n  };\n\n  // ----------\n\n  const setWidths = (height: number) => {\n    for (const [element, properties] of allItems.entries()) {\n      if (MH.parentOf(element) === containerElement) {\n        const width = getWidthAtH(element, properties, height);\n        debug: logger?.debug9(\n          \"Setting width property\",\n          element,\n          properties,\n          width,\n        );\n        setNumericStyleProps(element, { sameHeightW: width }, { _units: \"px\" });\n      }\n    }\n  };\n\n  // SETUP ------------------------------\n\n  widget.onDisable(unobserveAll);\n  widget.onEnable(observeAll);\n\n  widget.onDestroy(async () => {\n    for (const element of allItems.keys()) {\n      if (MH.parentOf(element) === containerElement) {\n        // delete the property and attribute\n        await setNumericStyleProps(element, { sameHeightW: NaN });\n        await removeClasses(element, PREFIX_ITEM);\n      }\n    }\n\n    allItems.clear();\n\n    await removeClasses(containerElement, PREFIX_ROOT);\n  });\n\n  // Find all relevant items: the container, its direct children and the\n  // top-level text only elements.\n  const getProperties = (itemType: \"\" | \"image\" | \"text\"): ItemProperties => {\n    return {\n      _type: itemType,\n      _width: NaN,\n      _height: NaN,\n      _aspectR: NaN,\n      _area: NaN,\n      _extraH: NaN,\n      _components: [],\n    };\n  };\n\n  allItems.set(containerElement, getProperties(\"\"));\n\n  for (const [item, itemType] of items.entries()) {\n    addClasses(item, PREFIX_ITEM);\n\n    const properties: ItemProperties = getProperties(itemType);\n    allItems.set(item, properties);\n\n    if (itemType === S_TEXT) {\n      properties._components = getTextComponents(item);\n      for (const child of properties._components) {\n        allItems.set(child, getProperties(\"\"));\n      }\n    }\n  }\n\n  addClasses(containerElement, PREFIX_ROOT);\n  observeAll();\n};\n\n/**\n * Find the top-level text-only elements that are descendants of the given one.\n */\nconst getTextComponents = (element: Element): Element[] => {\n  const components: Element[] = [];\n  for (const child of getVisibleContentChildren(element)) {\n    if (isText(child)) {\n      components.push(child);\n    } else {\n      components.push(...getTextComponents(child));\n    }\n  }\n\n  return components;\n};\n\nconst calculateMeasurements = (\n  containerElement: HTMLElement,\n  allItems: Map<Element, ItemProperties>,\n  isFirstTime: boolean,\n  logger: LoggerInterface | null,\n): AverageMeasurements | null => {\n  if (getData(containerElement, MC.PREFIX_ORIENTATION) === MC.S_VERTICAL) {\n    debug: logger?.debug8(\"In vertical mode\");\n    return null;\n  }\n\n  debug: logger?.debug7(\"Calculating measurements\");\n  // initial values\n  let tArea = NaN,\n    tExtraH = 0,\n    imgAR = NaN,\n    flexW = NaN,\n    nItems = 0;\n\n  for (const [element, properties] of allItems.entries()) {\n    const width = properties._width;\n    const height = properties._height;\n\n    if (element === containerElement) {\n      flexW = width;\n      nItems = MH.lengthOf(getVisibleContentChildren(element));\n\n      //\n    } else if (properties._type === S_TEXT) {\n      let thisTxtArea = 0,\n        thisTxtExtraH = 0;\n      const components = properties._components;\n\n      if (MH.lengthOf(components)) {\n        for (const component of properties._components) {\n          const cmpProps = allItems.get(component);\n          if (cmpProps) {\n            thisTxtArea += cmpProps._width * cmpProps._height;\n          } else {\n            logError(MH.bugError(\"Text component not observed\"));\n          }\n        }\n        thisTxtExtraH = height - thisTxtArea / width;\n      } else {\n        thisTxtArea = width * height;\n      }\n\n      properties._area = thisTxtArea;\n      properties._extraH = thisTxtExtraH;\n\n      tArea = (tArea || 0) + thisTxtArea;\n      tExtraH += thisTxtExtraH;\n\n      //\n    } else if (properties._type === S_IMAGE) {\n      if (isFirstTime && !areImagesLoaded(element)) {\n        debug: logger?.debug8(\"Images not loaded\");\n        return null;\n      }\n\n      const thisAspectR = width / height;\n      imgAR = (imgAR || 0) + thisAspectR;\n      properties._aspectR = thisAspectR;\n\n      //\n    } else {\n      // skip grandchildren (text components), here\n      continue;\n    }\n\n    debug: logger?.debug8(\"Examined\", properties, {\n      tArea,\n      tExtraH,\n      imgAR,\n      flexW,\n    });\n  }\n\n  return {\n    _tArea: tArea,\n    _tExtraH: tExtraH,\n    _imgAR: imgAR,\n    _flexW: flexW,\n    _nItems: nItems,\n  };\n};\n\nconst getWidthAtH = (\n  element: Element,\n  properties: ItemProperties,\n  targetHeight: number,\n): number =>\n  properties._type === S_TEXT\n    ? properties._area / (targetHeight - (properties._extraH || 0))\n    : properties._aspectR * targetHeight;\n\nconst getOptimalHeight = (\n  measurements: AverageMeasurements,\n  config: SameHeightConfigInternal,\n  logger: LoggerInterface | null,\n) => {\n  const tArea = measurements._tArea;\n  const tExtraH = measurements._tExtraH;\n  const imgAR = measurements._imgAR;\n  const flexW =\n    measurements._flexW - (measurements._nItems - 1) * config._minGap;\n  const maxFreeR = config._maxFreeR;\n  const maxWidthR = config._maxWidthR;\n\n  debug: logger?.debug8(\"Getting optimal height\", measurements, config);\n\n  // CASE 1: No text items\n  if (MH.isNaN(tArea)) {\n    debug: logger?.debug8(\"No text items\");\n    if (!imgAR) {\n      debug: logger?.debug8(\"Images not loaded\");\n      return NaN;\n    }\n\n    return flexW / imgAR;\n  }\n\n  // CASE 2: No images\n  if (MH.isNaN(imgAR)) {\n    debug: logger?.debug8(\"No images\");\n    return tArea / flexW + tExtraH;\n  }\n\n  if (!imgAR || !tArea) {\n    debug: logger?.debug8(\n      \"Expected both images and text, but no imgAR or tArea\",\n    );\n    return NaN;\n  }\n\n  const h0 = MH.sqrt(tArea / imgAR) + tExtraH;\n\n  // heights satisfying w(h) === flexW\n  const [h2, h1] = quadraticRoots(\n    imgAR,\n    -(imgAR * tExtraH + flexW),\n    tArea + tExtraH * flexW,\n  );\n\n  // heights satisfying maxWidthR\n  let hR0 = NaN,\n    hR1 = NaN,\n    hR2 = NaN;\n  if (maxWidthR > 0) {\n    hR0 = quadraticRoots(imgAR, -imgAR * tExtraH, -tArea)[0];\n\n    hR1 = quadraticRoots(\n      imgAR * maxWidthR,\n\n      -imgAR * tExtraH * maxWidthR,\n      -tArea,\n    )[0];\n\n    hR2 = quadraticRoots(\n      imgAR / maxWidthR,\n      (-imgAR * tExtraH) / maxWidthR,\n      -tArea,\n    )[0];\n  }\n\n  // heights satisfying maxFreeR\n  let hF2 = NaN,\n    hF1 = NaN;\n  if (maxFreeR >= 0) {\n    [hF2, hF1] = quadraticRoots(\n      imgAR,\n      -(imgAR * tExtraH + flexW * (1 - maxFreeR)),\n      tArea + tExtraH * flexW * (1 - maxFreeR),\n    );\n  }\n\n  // limits on constraints\n  const hConstr1 = MH.max(...MH.filter([h1, hR1, hF1], (v) => isValidNum(v)));\n  const hConstr2 = MH.min(...MH.filter([h2, hR2, hF2], (v) => isValidNum(v)));\n\n  // text and image widths at h0\n  const tw0 = tArea / (h0 - tExtraH);\n  const iw0 = h0 * imgAR;\n\n  // free space at h0\n  const freeSpace0 = flexW - tw0 - iw0;\n\n  debug: logger?.debug8(\"Optimal height calculations\", config, measurements, {\n    h0,\n    h1,\n    h2,\n    hR0,\n    hR1,\n    hR2,\n    hF1,\n    hF2,\n    hConstr1,\n    hConstr2,\n    tw0,\n    iw0,\n    freeSpace0,\n  });\n\n  // ~~~~ Some sanity checks\n  // If any of then is NaN, the comparison would be false, so we don't need to\n  // check.\n  // Also, we round the difference to 0.1 pixels to account for rounding\n  // errors during calculations.\n  if (!h0 || h0 <= 0) {\n    debug: logger?.debug1(\"Invalid calculation: Invalid h0\");\n  } else if (isValidNum(h1) !== isValidNum(h2)) {\n    debug: logger?.debug1(\n      \"Invalid calculation: One and only one of h1 or h2 is real\",\n    );\n  } else if (isValidNum(hR1) !== isValidNum(hR2)) {\n    debug: logger?.debug1(\n      \"Invalid calculation: One and only one of hR1 or hR2 is real\",\n    );\n  } else if (isValidNum(hF1) !== isValidNum(hF2)) {\n    debug: logger?.debug1(\n      \"Invalid calculation: One and only one of hF1 or hF2 is real\",\n    );\n  } else if (h1 - h0 > 0.1) {\n    debug: logger?.debug1(\"Invalid calculation: h1 > h0\");\n  } else if (h0 - h2 > 0.1) {\n    debug: logger?.debug1(\"Invalid calculation: h0 > h2\");\n  } else if (hR0 - h0 > 0.1) {\n    debug: logger?.debug1(\"Invalid calculation: hR0 > h0\");\n  } else if (hR1 - hR0 > 0.1) {\n    debug: logger?.debug1(\"Invalid calculation: hR1 > hR0\");\n  } else if (hR0 - hR2 > 0.1) {\n    debug: logger?.debug1(\"Invalid calculation: hR0 > hR2\");\n  } else if (hF1 - hF2 > 0.1) {\n    debug: logger?.debug1(\"Invalid calculation: hF1 > hF2\");\n  } else if (h1 - hF1 > 0.1) {\n    debug: logger?.debug1(\"Invalid calculation: h1 > hF1\");\n  } else if (hF2 - h2 > 0.1) {\n    debug: logger?.debug1(\"Invalid calculation: hF2 > h2\");\n  } else {\n    // Choose a height\n    if (freeSpace0 <= 0) {\n      // scenario 1 or 2\n      return h0;\n    } else {\n      // scenario 3\n      return MH.min(hConstr1, hConstr2);\n    }\n  }\n\n  logError(\n    MH.bugError(\"Invalid SameHeight calculations\"),\n    measurements,\n    config,\n  );\n  return NaN; // sanity checks failed\n};\n"],"mappings":"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;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA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","ignoreList":[]}