{"version":3,"file":"check-trigger.js","names":["MH","waitForReferenceElement","addEventListenerTo","removeEventListenerFrom","registerTrigger","Trigger","CheckTrigger","register","element","args","actions","config","newConfigValidator","constructor","_MH$targetOf","_defineProperty","getConfig","copyObject","lengthOf","target","targetOf","isInstanceOf","HTMLInputElement","onToggle","checked","run","reverse","onDestroy","key","value","_ref","isLiteralString","undefined"],"sources":["../../../src/ts/triggers/check-trigger.ts"],"sourcesContent":["/**\n * @module Triggers\n *\n * @categoryDescription Input\n * {@link CheckTrigger} allows you to run actions when the user checks a target\n * checkbox input element, and undo those actions when they uncheck the checkbox.\n */\n\nimport * as MH from \"@lisn/globals/minification-helpers\";\n\nimport { waitForReferenceElement } from \"@lisn/utils/dom-search\";\nimport { addEventListenerTo, removeEventListenerFrom } from \"@lisn/utils/event\";\n\nimport { Action } from \"@lisn/actions/action\";\n\nimport {\n  registerTrigger,\n  Trigger,\n  TriggerConfig,\n} from \"@lisn/triggers/trigger\";\n\nimport { WidgetConfigValidatorFunc } from \"@lisn/widgets/widget\";\n\n/**\n * {@link CheckTrigger} allows you to run actions when the user checks a target\n * checkbox input element, and undo those actions when they uncheck the checkbox.\n *\n * -------\n *\n * To use with auto-widgets (HTML API), see {@link registerTrigger} for the\n * specification.\n *\n * - Arguments: none\n * - Additional trigger options: none\n *   - `target`: A string element specification.\n *     See {@link Utils.getReferenceElement | getReferenceElement}.\n *\n * @example\n * Add classes `active` and `checked` when the user checks the checkbox,\n * remove them when unchecked.\n *\n * ```html\n * <input type=\"checkbox\" data-lisn-on-check=\"@add-class=active,checked\"/>\n * ```\n *\n * @example\n * As above, but using a CSS class instead of data attribute:\n *\n * ```html\n * <input type=\"checkbox\" class=\"lisn-on-check--@add-class=active,checked\"/>\n * ```\n *\n * @example\n * Play the animations on the element each time the user checks the next\n * element with class `checkbox` (do nothing when it's unchecked).\n *\n * ```html\n * <div data-lisn-on-check=\"@animate +one-way +target=next.checkbox\"></div>\n * <input type=\"checkbox\" class=\"checkbox\"/>\n * ```\n *\n * @example\n * Add class `used` the first time the user checks the next element with class\n * `checkbox`, and play or reverse the animations 200ms after each time the\n * user toggles the reference checkbox.\n *\n * ```html\n * <div data-lisn-on-check=\"@add-class=used +once ;\n *                          @animate +delay=200 +target=next.checkbox\"\n * ></div>\n * <input type=\"checkbox\" class=\"checkbox\"/>\n * ```\n *\n * @example\n * When the user checks the next element with class `checkbox` then add classes `c1`\n * and `c2` to the element (that the trigger is defined on) and enable trigger\n * `my-trigger` defined on this same element; undo all of that when the user unchecks\n * the reference checkbox.\n *\n * ```html\n * <div data-lisn-on-check=\"@add-class=c1,c2 @enable=my-trigger +target=next.checkbox\"\n *      data-lisn-on-run=\"@show +id=my-trigger\"\n * ></div>\n * <input type=\"checkbox\" class=\"checkbox\"/>\n * ```\n *\n * @example\n * As above, but using `data-lisn-ref` attribute instead of class selector.\n *\n * ```html\n * <div data-lisn-on-check=\"@add-class=c1,c2 @enable=my-trigger +target=next-checkbox\"\n *      data-lisn-on-run=\"@show +id=my-trigger\"\n * ></div>\n * <input type=\"checkbox\" data-lisn-ref=\"checkbox\"/>\n * ```\n *\n * @category Input\n */\nexport class CheckTrigger extends Trigger {\n  readonly getConfig: () => CheckTriggerConfig;\n\n  static register() {\n    registerTrigger(\n      \"check\",\n      (element, args, actions, config) =>\n        new CheckTrigger(element, actions, config),\n      newConfigValidator,\n    );\n  }\n\n  /**\n   * If no actions are supplied, nothing is done.\n   *\n   * @throws {@link Errors.LisnUsageError | LisnUsageError}\n   *                If the config is invalid.\n   */\n  constructor(\n    element: Element,\n    actions: Action[],\n    config?: CheckTriggerConfig,\n  ) {\n    super(element, actions, config);\n    this.getConfig = () => MH.copyObject(config);\n\n    if (!MH.lengthOf(actions)) {\n      return;\n    }\n\n    const target = MH.targetOf(config) ?? element;\n\n    if (!MH.isInstanceOf(target, HTMLInputElement)) {\n      return;\n    }\n\n    const onToggle = () => (target.checked ? this.run() : this.reverse());\n\n    addEventListenerTo(target, \"change\", onToggle);\n\n    this.onDestroy(() => {\n      removeEventListenerFrom(target, \"change\", onToggle);\n    });\n  }\n}\n\n/**\n * @category Input\n * @interface\n */\nexport type CheckTriggerConfig = TriggerConfig & {\n  /**\n   * The target to use for the hover action.\n   *\n   * @defaultValue The element on which the {@link Trigger} is defined\n   */\n  target?: Element;\n};\n\n// --------------------\n\nconst newConfigValidator: WidgetConfigValidatorFunc<CheckTriggerConfig> = (\n  element,\n) => {\n  return {\n    target: (key, value) =>\n      (MH.isLiteralString(value)\n        ? waitForReferenceElement(value, element)\n        : null) ?? undefined,\n  };\n};\n"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,KAAKA,EAAE;AAEd,SAASC,uBAAuB;AAChC,SAASC,kBAAkB,EAAEC,uBAAuB;AAIpD,SACEC,eAAe,EACfC,OAAO;AAMT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,YAAY,SAASD,OAAO,CAAC;EAGxC,OAAOE,QAAQA,CAAA,EAAG;IAChBH,eAAe,CACb,OAAO,EACP,CAACI,OAAO,EAAEC,IAAI,EAAEC,OAAO,EAAEC,MAAM,KAC7B,IAAIL,YAAY,CAACE,OAAO,EAAEE,OAAO,EAAEC,MAAM,CAAC,EAC5CC,kBACF,CAAC;EACH;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEC,WAAWA,CACTL,OAAgB,EAChBE,OAAiB,EACjBC,MAA2B,EAC3B;IAAA,IAAAG,YAAA;IACA,KAAK,CAACN,OAAO,EAAEE,OAAO,EAAEC,MAAM,CAAC;IAACI,eAAA;IAChC,IAAI,CAACC,SAAS,GAAG,MAAMhB,EAAE,CAACiB,UAAU,CAACN,MAAM,CAAC;IAE5C,IAAI,CAACX,EAAE,CAACkB,QAAQ,CAACR,OAAO,CAAC,EAAE;MACzB;IACF;IAEA,MAAMS,MAAM,IAAAL,YAAA,GAAGd,EAAE,CAACoB,QAAQ,CAACT,MAAM,CAAC,cAAAG,YAAA,cAAAA,YAAA,GAAIN,OAAO;IAE7C,IAAI,CAACR,EAAE,CAACqB,YAAY,CAACF,MAAM,EAAEG,gBAAgB,CAAC,EAAE;MAC9C;IACF;IAEA,MAAMC,QAAQ,GAAGA,CAAA,KAAOJ,MAAM,CAACK,OAAO,GAAG,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,IAAI,CAACC,OAAO,CAAC,CAAE;IAErExB,kBAAkB,CAACiB,MAAM,EAAE,QAAQ,EAAEI,QAAQ,CAAC;IAE9C,IAAI,CAACI,SAAS,CAAC,MAAM;MACnBxB,uBAAuB,CAACgB,MAAM,EAAE,QAAQ,EAAEI,QAAQ,CAAC;IACrD,CAAC,CAAC;EACJ;AACF;;AAEA;AACA;AACA;AACA;;AAUA;;AAEA,MAAMX,kBAAiE,GACrEJ,OAAO,IACJ;EACH,OAAO;IACLW,MAAM,EAAEA,CAACS,GAAG,EAAEC,KAAK;MAAA,IAAAC,IAAA;MAAA,QAAAA,IAAA,GAChB9B,EAAE,CAAC+B,eAAe,CAACF,KAAK,CAAC,GACtB5B,uBAAuB,CAAC4B,KAAK,EAAErB,OAAO,CAAC,GACvC,IAAI,cAAAsB,IAAA,cAAAA,IAAA,GAAKE,SAAS;IAAA;EAC1B,CAAC;AACH,CAAC","ignoreList":[]}