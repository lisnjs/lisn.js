{"version":3,"file":"dom-alter.js","names":["MC","MH","settings","hideElement","hasClass","addClassesNow","getData","setDataNow","setBooleanData","waitForMutateTime","isInlineTag","logWarn","randId","wrapElementNow","element","options","wrapper","createWrapperFor","ignoreMove","from","parentOf","to","replaceWith","append","wrapElement","then","wrapChildrenNow","moveChildrenNow","moveElementNow","wrapChildren","replaceElementNow","newElement","replaceElement","swapElementsNow","elementA","elementB","temp","createElement","swapElements","oldParent","newParent","child","childrenOf","moveChildren","parentEl","position","remove","moveElement","hideAndRemoveElement","delay","getOrAssignID","prefix","domID","id","isAllowedToWrap","contentWrappingAllowed","PREFIX_NO_WRAP","getWrapper","tagName","className","PREFIX_WRAPPER","parent","lengthOf","isHTMLElement","toLowerCase","getContentWrapper","firstChild","tryWrapNow","_tryWrapNow","tryWrap","_tryWrap","tryWrapContentNow","tryWrapContent","cloneElement","clone","cloneNode","prefixName","insertGhostCloneNow","insertBefore","PREFIX_GHOST","PREFIX_TRANSITION_DISABLE","PREFIX_ANIMATE_DISABLE","required","_wrapper","_clone","insertGhostClone","target","recordsToSkipOnce","set","getIgnoreMove","get","clearIgnoreMove","setTimer","deleteKey","insertArrow","direction","tag","arrow","S_ARROW","newMap","isElement","wrapContent","requiredBy","getWrapperFn","wrapFn","allowedToWrap","PREFIX_INLINE_WRAPPER"],"sources":["../../../src/ts/utils/dom-alter.ts"],"sourcesContent":["/**\n * @module Utils\n *\n * @categoryDescription DOM: Altering\n * These functions alter the DOM tree, but could lead to forced layout if not\n * scheduled using {@link waitForMutateTime}.\n *\n * @categoryDescription DOM: Altering (optimized)\n * These functions alter the DOM tree in an optimized way using\n * {@link waitForMutateTime} and so are asynchronous.\n */\n\nimport * as MC from \"@lisn/globals/minification-constants\";\nimport * as MH from \"@lisn/globals/minification-helpers\";\n\nimport { settings } from \"@lisn/globals/settings\";\n\nimport {\n  hideElement,\n  hasClass,\n  addClassesNow,\n  getData,\n  setDataNow,\n  setBooleanData,\n} from \"@lisn/utils/css-alter\";\nimport { waitForMutateTime } from \"@lisn/utils/dom-optimize\";\nimport { isInlineTag } from \"@lisn/utils/dom-query\";\nimport { logWarn } from \"@lisn/utils/log\";\nimport { randId } from \"@lisn/utils/text\";\n\n/**\n * Wraps the element in the given wrapper, or a newly created element if not given.\n *\n * @param {} [options.wrapper]\n *              If it's an element, it is used as the wrapper. If it's a string\n *              tag name, then a new element with this tag is created as the\n *              wrapper. If not given, then `div` is used if the element to be\n *              wrapped has an block-display tag, or otherwise `span` (if the\n *              element to be wrapped has an inline tag name).\n * @param {} [options.ignoreMove]\n *              If true, the DOM watcher instances will ignore the operation of\n *              replacing the element (so as to not trigger relevant callbacks).\n * @returns {} The wrapper element that was either passed in options or created.\n *\n * @category DOM: Altering\n */\nexport const wrapElementNow = (\n  element: Element,\n  options?: {\n    wrapper?: HTMLElement | keyof HTMLElementTagNameMap;\n    ignoreMove?: boolean;\n  },\n) => {\n  const wrapper = createWrapperFor(element, options?.wrapper);\n\n  if (options?.ignoreMove === true) {\n    ignoreMove(element, {\n      from: MH.parentOf(element),\n      to: wrapper,\n    });\n\n    ignoreMove(wrapper, {\n      to: MH.parentOf(element),\n    });\n  }\n\n  element.replaceWith(wrapper);\n  wrapper.append(element);\n\n  return wrapper;\n};\n\n/**\n * Like {@link wrapElementNow} except it will {@link waitForMutateTime}.\n *\n * @category DOM: Altering (optimized)\n */\nexport const wrapElement = async (\n  element: Element,\n  options?: {\n    wrapper?: HTMLElement | keyof HTMLElementTagNameMap;\n    ignoreMove?: boolean;\n  },\n) => waitForMutateTime().then(() => wrapElementNow(element, options));\n\n/**\n * Wraps the element's children in the given wrapper, or a newly created element\n * if not given.\n *\n * @see {@link wrapElementNow}.\n *\n * @category DOM: Altering\n */\nexport const wrapChildrenNow = (\n  element: Element,\n  options?: {\n    wrapper?: HTMLElement | keyof HTMLElementTagNameMap;\n    ignoreMove?: boolean;\n  },\n) => {\n  const wrapper = createWrapperFor(element, options?.wrapper);\n\n  moveChildrenNow(element, wrapper, { ignoreMove: true });\n  moveElementNow(wrapper, {\n    to: element,\n    ignoreMove: true,\n  });\n\n  return wrapper;\n};\n\n/**\n * Like {@link wrapChildrenNow} except it will {@link waitForMutateTime}.\n *\n * @category DOM: Altering (optimized)\n */\nexport const wrapChildren = async (\n  element: Element,\n  options?: {\n    wrapper?: HTMLElement | keyof HTMLElementTagNameMap;\n    ignoreMove?: boolean;\n  },\n) => waitForMutateTime().then(() => wrapChildrenNow(element, options));\n\n/**\n * Replace an element with another one.\n *\n * @param {} [options.ignoreMove]\n *              If true, the DOM watcher instances will ignore the operation of\n *              moving the element (so as to not trigger relevant callbacks).\n *\n * @category DOM: Altering\n */\nexport const replaceElementNow = (\n  element: Element,\n  newElement: Element,\n  options?: {\n    ignoreMove?: boolean;\n  },\n) => {\n  if (options?.ignoreMove === true) {\n    ignoreMove(\n      // remove element\n      element,\n      { from: MH.parentOf(element) },\n    );\n\n    ignoreMove(\n      // move newElement to element's current parent\n      newElement,\n      { from: MH.parentOf(newElement), to: MH.parentOf(element) },\n    );\n  }\n\n  element.replaceWith(newElement);\n};\n\n/**\n * Like {@link replaceElementNow} except it will {@link waitForMutateTime}.\n *\n * @category DOM: Altering (optimized)\n */\nexport const replaceElement = async (\n  element: Element,\n  newElement: Element,\n  options?: {\n    ignoreMove?: boolean;\n  },\n) =>\n  waitForMutateTime().then(() =>\n    replaceElementNow(element, newElement, options),\n  );\n\n/**\n * Replace an element with another one.\n *\n * @param {} [options.ignoreMove]\n *              If true, the DOM watcher instances will ignore the operation of\n *              moving the element (so as to not trigger relevant callbacks).\n *\n * @category DOM: Altering\n */\nexport const swapElementsNow = (\n  elementA: Element,\n  elementB: Element,\n  options?: {\n    ignoreMove?: boolean;\n  },\n) => {\n  const temp = MH.createElement(\"div\");\n  replaceElementNow(elementA, temp, options);\n  replaceElementNow(elementB, elementA, options);\n  replaceElementNow(temp, elementB, options);\n};\n\n/**\n * Like {@link swapElementsNow} except it will {@link waitForMutateTime}.\n *\n * @category DOM: Altering (optimized)\n */\nexport const swapElements = async (\n  elementA: Element,\n  elementB: Element,\n  options?: {\n    ignoreMove?: boolean;\n  },\n) =>\n  waitForMutateTime().then(() => swapElementsNow(elementA, elementB, options));\n\n/**\n * Move an element's children to a new element\n *\n * @param {} [options.ignoreMove]\n *              If true, the DOM watcher instances will ignore the operation of\n *              moving the children (so as to not trigger relevant callbacks).\n *\n * @category DOM: Altering\n */\nexport const moveChildrenNow = (\n  oldParent: Element,\n  newParent: Element,\n  options?: {\n    ignoreMove?: boolean;\n  },\n) => {\n  if (options?.ignoreMove === true) {\n    for (const child of MH.childrenOf(oldParent)) {\n      ignoreMove(child, {\n        from: oldParent,\n        to: newParent,\n      });\n    }\n  }\n\n  newParent.append(...MH.childrenOf(oldParent));\n};\n\n/**\n * Like {@link moveChildrenNow} except it will {@link waitForMutateTime}.\n *\n * @category DOM: Altering (optimized)\n */\nexport const moveChildren = async (\n  oldParent: Element,\n  newParent: Element,\n  options?: {\n    ignoreMove?: boolean;\n  },\n) =>\n  waitForMutateTime().then(() =>\n    moveChildrenNow(oldParent, newParent, options),\n  );\n\n/**\n * Moves an element to a new position.\n *\n * @param {} [options.to]         The new parent or sibling (depending on\n *                                `options.position`). If not given, the\n *                                element is removed from the DOM.\n * @param {} [options.position]   - append (default): append to `options.to`\n *                                - prepend: prepend to `options.to`\n *                                - before: insert before `options.to`\n *                                - after: insert after `options.to`\n * @param {} [options.ignoreMove] If true, the DOM watcher instances will\n *                                ignore the operation of moving the element\n *                                (so as to not trigger relevant callbacks).\n *\n * @category DOM: Altering\n */\nexport const moveElementNow = (\n  element: Element,\n  options?: {\n    to?: Element;\n    position?: \"append\" | \"prepend\" | \"before\" | \"after\";\n    ignoreMove?: boolean;\n  },\n) => {\n  let parentEl = options?.to || null;\n  const position = options?.position || \"append\";\n  if (position === \"before\" || position === \"after\") {\n    parentEl = MH.parentOf(options?.to);\n  }\n\n  if (options?.ignoreMove === true) {\n    ignoreMove(element, {\n      from: MH.parentOf(element),\n      to: parentEl,\n    });\n  }\n\n  if (options?.to) {\n    options.to[position](element);\n  } else {\n    MH.remove(element);\n  }\n};\n\n/**\n * Like {@link moveElementNow} except it will {@link waitForMutateTime}.\n *\n * @category DOM: Altering (optimized)\n */\nexport const moveElement = async (\n  element: Element,\n  options?: {\n    to?: Element;\n    position?: \"append\" | \"prepend\" | \"before\" | \"after\";\n    ignoreMove?: boolean;\n  },\n) => waitForMutateTime().then(() => moveElementNow(element, options));\n\n/**\n * It will {@link hideElement} and then remove it from the DOM.\n *\n * @param {} [options.ignoreMove]\n *              If true, the DOM watcher instances will ignore the operation of\n *              replacing the element (so as to not trigger relevant callbacks).\n *\n * @category DOM: Altering (optimized)\n */\nexport const hideAndRemoveElement = async (\n  element: Element,\n  delay = 0,\n  options?: {\n    ignoreMove?: boolean;\n  },\n) => {\n  await hideElement(element, delay);\n  moveElementNow(element, options);\n};\n\n/**\n * @ignore\n * @internal\n */\nexport const getOrAssignID = (element: Element, prefix = \"\") => {\n  let domID = element.id;\n  if (!domID) {\n    domID = `${prefix}-${randId()}`;\n    element.id = domID;\n  }\n\n  return domID;\n};\n\n/**\n * @ignore\n * @internal\n */\nexport const isAllowedToWrap = (element: Element) =>\n  settings.contentWrappingAllowed === true &&\n  getData(element, MC.PREFIX_NO_WRAP) === null;\n\n/**\n * @ignore\n * @internal\n */\nexport const getWrapper = (\n  element: Element,\n  options?: {\n    tagName?: keyof HTMLElementTagNameMap;\n    className?: string;\n  },\n) => {\n  const { tagName, className = MC.PREFIX_WRAPPER } = options ?? {};\n  const parent = MH.parentOf(element);\n  if (\n    MH.lengthOf(MH.childrenOf(parent)) === 1 &&\n    MH.isHTMLElement(parent) &&\n    (!tagName ||\n      MH.toLowerCase(MH.tagName(parent)) === MH.toLowerCase(tagName)) &&\n    (!className || hasClass(parent, className))\n  ) {\n    // Already wrapped\n    return parent;\n  }\n\n  return null; // don't check the element itself, only its parent\n};\n\n/**\n * @ignore\n * @internal\n */\nexport const getContentWrapper = (\n  element: Element,\n  options?: {\n    tagName?: keyof HTMLElementTagNameMap;\n    className?: string;\n  },\n) => {\n  const { tagName, className = MC.PREFIX_WRAPPER } = options ?? {};\n  const firstChild = MH.childrenOf(element)[0];\n  if (\n    MH.lengthOf(MH.childrenOf(element)) === 1 &&\n    MH.isHTMLElement(firstChild) &&\n    (!tagName ||\n      MH.toLowerCase(MH.tagName(firstChild)) === MH.toLowerCase(tagName)) &&\n    (!className || hasClass(firstChild, className))\n  ) {\n    // Already wrapped\n    return firstChild;\n  }\n\n  return null;\n};\n\n/**\n * @ignore\n * @internal\n */\nexport const tryWrapNow = <O extends ContentWrappingOptions>(\n  element: Element,\n  options?: O,\n) => _tryWrapNow(element, options);\n\n/**\n * @ignore\n * @internal\n */\nexport const tryWrap = <O extends ContentWrappingOptions>(\n  element: Element,\n  options?: O,\n) => _tryWrap(element, options);\n\n/**\n * @ignore\n * @internal\n */\nexport const tryWrapContentNow = <O extends ContentWrappingOptions>(\n  element: Element,\n  options?: O,\n) => _tryWrapNow(element, options, true);\n\n/**\n * @ignore\n * @internal\n */\nexport const tryWrapContent = <O extends ContentWrappingOptions>(\n  element: Element,\n  options?: O,\n) => _tryWrap(element, options, true);\n\n/**\n * @ignore\n * @internal\n */\nexport const cloneElement = <E extends Element>(element: E) => {\n  const clone = element.cloneNode(true) as E;\n  setBooleanData(clone, MH.prefixName(\"clone\"));\n  return clone;\n};\n\n/**\n * Creates a dummy hidden clone that's got animation and transitions disabled\n * and absolute position, wrapped in a wrapper (of size 0) and inserts it just\n * before the `insertBefore` element (or if not given, the original element),\n * so that the hidden clone overlaps the actual element's regular\n * (pre-transformed) position.\n *\n * It clears the ID of the clone.\n *\n * Returns the clone.\n *\n * @ignore\n * @internal\n */\nexport const insertGhostCloneNow = <E extends Element>(\n  element: E,\n  insertBefore: Element | null = null,\n) => {\n  const clone = cloneElement(element);\n  clone.id = \"\";\n\n  addClassesNow(\n    clone,\n    MC.PREFIX_GHOST,\n    MC.PREFIX_TRANSITION_DISABLE,\n    MC.PREFIX_ANIMATE_DISABLE,\n  );\n\n  const wrapper = _tryWrapNow(clone, { required: true });\n\n  moveElementNow(wrapper, {\n    to: insertBefore || element,\n    position: \"before\",\n    ignoreMove: true,\n  });\n\n  return { _wrapper: wrapper, _clone: clone };\n};\n\n/**\n * @ignore\n * @internal\n *\n * Exposed via DOMWatcher\n */\nexport const insertGhostClone = <E extends Element>(\n  element: E,\n  insertBefore: Element | null = null,\n) => waitForMutateTime().then(() => insertGhostCloneNow(element, insertBefore));\n\n/**\n * @ignore\n * @internal\n *\n * Exposed via DOMWatcher\n */\nexport const ignoreMove = (\n  target: Element,\n  options: { from?: Element | null; to?: Element | null },\n) =>\n  recordsToSkipOnce.set(target, {\n    from: options.from || null,\n    to: options.to || null,\n  });\n\n/**\n * @ignore\n * @internal\n */\nexport const getIgnoreMove = (\n  target: Element,\n): { from: Element | null; to: Element | null } | null =>\n  recordsToSkipOnce.get(target) || null;\n\n/**\n * @ignore\n * @internal\n */\nexport const clearIgnoreMove = (target: Element) => {\n  // We should not clear the entry the first time the operation is observed\n  // (when we return true here), because there may be multiple DOMWatcher\n  // instances that will observe it and need to query it. Instead do it shortly.\n  MH.setTimer(() => {\n    MH.deleteKey(recordsToSkipOnce, target);\n  }, 100);\n};\n\n/**\n * @ignore\n * @internal\n */\nexport const insertArrow = (\n  target: Element,\n  direction: \"up\" | \"down\" | \"left\" | \"right\",\n  position: \"prepend\" | \"append\" | \"before\" | \"after\" = \"append\",\n  tag = \"span\",\n) => {\n  const arrow = MH.createElement(tag);\n  addClassesNow(arrow, MH.prefixName(MC.S_ARROW));\n  setDataNow(arrow, MH.prefixName(\"direction\"), direction);\n  moveElement(arrow, { to: target, position, ignoreMove: true });\n  return arrow;\n};\n\n// ----------------------------------------\n\ntype ContentWrappingOptions = {\n  tagName?: keyof HTMLElementTagNameMap;\n  className?: string;\n  ignoreMove?: boolean; // default is true here\n  required?: boolean; // if true, will ignore contentWrappingAllowed and data-lisn-no-wrap\n  requiredBy?: string; // for logging purposes\n};\n\nconst recordsToSkipOnce = MH.newMap<\n  /* target being moved */ Element,\n  { from: Element | null; to: Element | null }\n>();\n\nconst createWrapperFor = (\n  element: Element,\n  wrapper: HTMLElement | keyof HTMLElementTagNameMap | undefined,\n) => {\n  if (MH.isElement(wrapper)) {\n    return wrapper;\n  }\n\n  let tag = wrapper;\n  if (!tag) {\n    if (isInlineTag(MH.tagName(element))) {\n      tag = \"span\";\n    } else {\n      tag = \"div\";\n    }\n  }\n\n  return MH.createElement(tag);\n};\n\nconst _tryWrapNow = <O extends ContentWrappingOptions>(\n  element: Element,\n  options: O | undefined,\n  wrapContent = false, // if true, wrap its children, otherwise given element\n) => {\n  const {\n    tagName,\n    className = MC.PREFIX_WRAPPER,\n    ignoreMove = true,\n    required = false,\n    requiredBy = \"\",\n  } = options ?? {};\n\n  const getWrapperFn = wrapContent ? getContentWrapper : getWrapper;\n  const wrapFn = wrapContent ? wrapChildrenNow : wrapElementNow;\n  const allowedToWrap = isAllowedToWrap(element);\n\n  let wrapper = getWrapperFn(element, options);\n  if (!wrapper && (required || allowedToWrap)) {\n    wrapper = wrapFn(element, { wrapper: tagName, ignoreMove });\n    addClassesNow(wrapper, className);\n    if (isInlineTag(MH.tagName(wrapper))) {\n      addClassesNow(wrapper, MC.PREFIX_INLINE_WRAPPER);\n    }\n\n    if (!allowedToWrap && requiredBy) {\n      logWarn(\n        `content wrapping is disabled for element but wrapping is required by ${requiredBy}`,\n      );\n    }\n  }\n\n  return wrapper as O extends { required: true }\n    ? HTMLElement\n    : HTMLElement | null;\n};\n\nconst _tryWrap = <O extends ContentWrappingOptions>(\n  element: Element,\n  options: O | undefined,\n  wrapContent = false, // if true, wrap its children, otherwise given element\n) => waitForMutateTime().then(() => _tryWrapNow(element, options, wrapContent));\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,KAAKA,EAAE;AACd,OAAO,KAAKC,EAAE;AAEd,SAASC,QAAQ;AAEjB,SACEC,WAAW,EACXC,QAAQ,EACRC,aAAa,EACbC,OAAO,EACPC,UAAU,EACVC,cAAc;AAEhB,SAASC,iBAAiB;AAC1B,SAASC,WAAW;AACpB,SAASC,OAAO;AAChB,SAASC,MAAM;;AAEf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,cAAc,GAAGA,CAC5BC,OAAgB,EAChBC,OAGC,KACE;EACH,MAAMC,OAAO,GAAGC,gBAAgB,CAACH,OAAO,EAAEC,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEC,OAAO,CAAC;EAE3D,IAAI,CAAAD,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEG,UAAU,MAAK,IAAI,EAAE;IAChCA,UAAU,CAACJ,OAAO,EAAE;MAClBK,IAAI,EAAElB,EAAE,CAACmB,QAAQ,CAACN,OAAO,CAAC;MAC1BO,EAAE,EAAEL;IACN,CAAC,CAAC;IAEFE,UAAU,CAACF,OAAO,EAAE;MAClBK,EAAE,EAAEpB,EAAE,CAACmB,QAAQ,CAACN,OAAO;IACzB,CAAC,CAAC;EACJ;EAEAA,OAAO,CAACQ,WAAW,CAACN,OAAO,CAAC;EAC5BA,OAAO,CAACO,MAAM,CAACT,OAAO,CAAC;EAEvB,OAAOE,OAAO;AAChB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMQ,WAAW,GAAG,MAAAA,CACzBV,OAAgB,EAChBC,OAGC,KACEN,iBAAiB,CAAC,CAAC,CAACgB,IAAI,CAAC,MAAMZ,cAAc,CAACC,OAAO,EAAEC,OAAO,CAAC,CAAC;;AAErE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMW,eAAe,GAAGA,CAC7BZ,OAAgB,EAChBC,OAGC,KACE;EACH,MAAMC,OAAO,GAAGC,gBAAgB,CAACH,OAAO,EAAEC,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEC,OAAO,CAAC;EAE3DW,eAAe,CAACb,OAAO,EAAEE,OAAO,EAAE;IAAEE,UAAU,EAAE;EAAK,CAAC,CAAC;EACvDU,cAAc,CAACZ,OAAO,EAAE;IACtBK,EAAE,EAAEP,OAAO;IACXI,UAAU,EAAE;EACd,CAAC,CAAC;EAEF,OAAOF,OAAO;AAChB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMa,YAAY,GAAG,MAAAA,CAC1Bf,OAAgB,EAChBC,OAGC,KACEN,iBAAiB,CAAC,CAAC,CAACgB,IAAI,CAAC,MAAMC,eAAe,CAACZ,OAAO,EAAEC,OAAO,CAAC,CAAC;;AAEtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMe,iBAAiB,GAAGA,CAC/BhB,OAAgB,EAChBiB,UAAmB,EACnBhB,OAEC,KACE;EACH,IAAI,CAAAA,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEG,UAAU,MAAK,IAAI,EAAE;IAChCA,UAAU;IACR;IACAJ,OAAO,EACP;MAAEK,IAAI,EAAElB,EAAE,CAACmB,QAAQ,CAACN,OAAO;IAAE,CAC/B,CAAC;IAEDI,UAAU;IACR;IACAa,UAAU,EACV;MAAEZ,IAAI,EAAElB,EAAE,CAACmB,QAAQ,CAACW,UAAU,CAAC;MAAEV,EAAE,EAAEpB,EAAE,CAACmB,QAAQ,CAACN,OAAO;IAAE,CAC5D,CAAC;EACH;EAEAA,OAAO,CAACQ,WAAW,CAACS,UAAU,CAAC;AACjC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,cAAc,GAAG,MAAAA,CAC5BlB,OAAgB,EAChBiB,UAAmB,EACnBhB,OAEC,KAEDN,iBAAiB,CAAC,CAAC,CAACgB,IAAI,CAAC,MACvBK,iBAAiB,CAAChB,OAAO,EAAEiB,UAAU,EAAEhB,OAAO,CAChD,CAAC;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMkB,eAAe,GAAGA,CAC7BC,QAAiB,EACjBC,QAAiB,EACjBpB,OAEC,KACE;EACH,MAAMqB,IAAI,GAAGnC,EAAE,CAACoC,aAAa,CAAC,KAAK,CAAC;EACpCP,iBAAiB,CAACI,QAAQ,EAAEE,IAAI,EAAErB,OAAO,CAAC;EAC1Ce,iBAAiB,CAACK,QAAQ,EAAED,QAAQ,EAAEnB,OAAO,CAAC;EAC9Ce,iBAAiB,CAACM,IAAI,EAAED,QAAQ,EAAEpB,OAAO,CAAC;AAC5C,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMuB,YAAY,GAAG,MAAAA,CAC1BJ,QAAiB,EACjBC,QAAiB,EACjBpB,OAEC,KAEDN,iBAAiB,CAAC,CAAC,CAACgB,IAAI,CAAC,MAAMQ,eAAe,CAACC,QAAQ,EAAEC,QAAQ,EAAEpB,OAAO,CAAC,CAAC;;AAE9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMY,eAAe,GAAGA,CAC7BY,SAAkB,EAClBC,SAAkB,EAClBzB,OAEC,KACE;EACH,IAAI,CAAAA,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEG,UAAU,MAAK,IAAI,EAAE;IAChC,KAAK,MAAMuB,KAAK,IAAIxC,EAAE,CAACyC,UAAU,CAACH,SAAS,CAAC,EAAE;MAC5CrB,UAAU,CAACuB,KAAK,EAAE;QAChBtB,IAAI,EAAEoB,SAAS;QACflB,EAAE,EAAEmB;MACN,CAAC,CAAC;IACJ;EACF;EAEAA,SAAS,CAACjB,MAAM,CAAC,GAAGtB,EAAE,CAACyC,UAAU,CAACH,SAAS,CAAC,CAAC;AAC/C,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMI,YAAY,GAAG,MAAAA,CAC1BJ,SAAkB,EAClBC,SAAkB,EAClBzB,OAEC,KAEDN,iBAAiB,CAAC,CAAC,CAACgB,IAAI,CAAC,MACvBE,eAAe,CAACY,SAAS,EAAEC,SAAS,EAAEzB,OAAO,CAC/C,CAAC;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMa,cAAc,GAAGA,CAC5Bd,OAAgB,EAChBC,OAIC,KACE;EACH,IAAI6B,QAAQ,GAAG,CAAA7B,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEM,EAAE,KAAI,IAAI;EAClC,MAAMwB,QAAQ,GAAG,CAAA9B,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAE8B,QAAQ,KAAI,QAAQ;EAC9C,IAAIA,QAAQ,KAAK,QAAQ,IAAIA,QAAQ,KAAK,OAAO,EAAE;IACjDD,QAAQ,GAAG3C,EAAE,CAACmB,QAAQ,CAACL,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEM,EAAE,CAAC;EACrC;EAEA,IAAI,CAAAN,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEG,UAAU,MAAK,IAAI,EAAE;IAChCA,UAAU,CAACJ,OAAO,EAAE;MAClBK,IAAI,EAAElB,EAAE,CAACmB,QAAQ,CAACN,OAAO,CAAC;MAC1BO,EAAE,EAAEuB;IACN,CAAC,CAAC;EACJ;EAEA,IAAI7B,OAAO,aAAPA,OAAO,eAAPA,OAAO,CAAEM,EAAE,EAAE;IACfN,OAAO,CAACM,EAAE,CAACwB,QAAQ,CAAC,CAAC/B,OAAO,CAAC;EAC/B,CAAC,MAAM;IACLb,EAAE,CAAC6C,MAAM,CAAChC,OAAO,CAAC;EACpB;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMiC,WAAW,GAAG,MAAAA,CACzBjC,OAAgB,EAChBC,OAIC,KACEN,iBAAiB,CAAC,CAAC,CAACgB,IAAI,CAAC,MAAMG,cAAc,CAACd,OAAO,EAAEC,OAAO,CAAC,CAAC;;AAErE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMiC,oBAAoB,GAAG,MAAAA,CAClClC,OAAgB,EAChBmC,KAAK,GAAG,CAAC,EACTlC,OAEC,KACE;EACH,MAAMZ,WAAW,CAACW,OAAO,EAAEmC,KAAK,CAAC;EACjCrB,cAAc,CAACd,OAAO,EAAEC,OAAO,CAAC;AAClC,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMmC,aAAa,GAAGA,CAACpC,OAAgB,EAAEqC,MAAM,GAAG,EAAE,KAAK;EAC9D,IAAIC,KAAK,GAAGtC,OAAO,CAACuC,EAAE;EACtB,IAAI,CAACD,KAAK,EAAE;IACVA,KAAK,GAAG,GAAGD,MAAM,IAAIvC,MAAM,CAAC,CAAC,EAAE;IAC/BE,OAAO,CAACuC,EAAE,GAAGD,KAAK;EACpB;EAEA,OAAOA,KAAK;AACd,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAME,eAAe,GAAIxC,OAAgB,IAC9CZ,QAAQ,CAACqD,sBAAsB,KAAK,IAAI,IACxCjD,OAAO,CAACQ,OAAO,EAAEd,EAAE,CAACwD,cAAc,CAAC,KAAK,IAAI;;AAE9C;AACA;AACA;AACA;AACA,OAAO,MAAMC,UAAU,GAAGA,CACxB3C,OAAgB,EAChBC,OAGC,KACE;EACH,MAAM;IAAE2C,OAAO;IAAEC,SAAS,GAAG3D,EAAE,CAAC4D;EAAe,CAAC,GAAG7C,OAAO,aAAPA,OAAO,cAAPA,OAAO,GAAI,CAAC,CAAC;EAChE,MAAM8C,MAAM,GAAG5D,EAAE,CAACmB,QAAQ,CAACN,OAAO,CAAC;EACnC,IACEb,EAAE,CAAC6D,QAAQ,CAAC7D,EAAE,CAACyC,UAAU,CAACmB,MAAM,CAAC,CAAC,KAAK,CAAC,IACxC5D,EAAE,CAAC8D,aAAa,CAACF,MAAM,CAAC,KACvB,CAACH,OAAO,IACPzD,EAAE,CAAC+D,WAAW,CAAC/D,EAAE,CAACyD,OAAO,CAACG,MAAM,CAAC,CAAC,KAAK5D,EAAE,CAAC+D,WAAW,CAACN,OAAO,CAAC,CAAC,KAChE,CAACC,SAAS,IAAIvD,QAAQ,CAACyD,MAAM,EAAEF,SAAS,CAAC,CAAC,EAC3C;IACA;IACA,OAAOE,MAAM;EACf;EAEA,OAAO,IAAI,CAAC,CAAC;AACf,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMI,iBAAiB,GAAGA,CAC/BnD,OAAgB,EAChBC,OAGC,KACE;EACH,MAAM;IAAE2C,OAAO;IAAEC,SAAS,GAAG3D,EAAE,CAAC4D;EAAe,CAAC,GAAG7C,OAAO,aAAPA,OAAO,cAAPA,OAAO,GAAI,CAAC,CAAC;EAChE,MAAMmD,UAAU,GAAGjE,EAAE,CAACyC,UAAU,CAAC5B,OAAO,CAAC,CAAC,CAAC,CAAC;EAC5C,IACEb,EAAE,CAAC6D,QAAQ,CAAC7D,EAAE,CAACyC,UAAU,CAAC5B,OAAO,CAAC,CAAC,KAAK,CAAC,IACzCb,EAAE,CAAC8D,aAAa,CAACG,UAAU,CAAC,KAC3B,CAACR,OAAO,IACPzD,EAAE,CAAC+D,WAAW,CAAC/D,EAAE,CAACyD,OAAO,CAACQ,UAAU,CAAC,CAAC,KAAKjE,EAAE,CAAC+D,WAAW,CAACN,OAAO,CAAC,CAAC,KACpE,CAACC,SAAS,IAAIvD,QAAQ,CAAC8D,UAAU,EAAEP,SAAS,CAAC,CAAC,EAC/C;IACA;IACA,OAAOO,UAAU;EACnB;EAEA,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMC,UAAU,GAAGA,CACxBrD,OAAgB,EAChBC,OAAW,KACRqD,WAAW,CAACtD,OAAO,EAAEC,OAAO,CAAC;;AAElC;AACA;AACA;AACA;AACA,OAAO,MAAMsD,OAAO,GAAGA,CACrBvD,OAAgB,EAChBC,OAAW,KACRuD,QAAQ,CAACxD,OAAO,EAAEC,OAAO,CAAC;;AAE/B;AACA;AACA;AACA;AACA,OAAO,MAAMwD,iBAAiB,GAAGA,CAC/BzD,OAAgB,EAChBC,OAAW,KACRqD,WAAW,CAACtD,OAAO,EAAEC,OAAO,EAAE,IAAI,CAAC;;AAExC;AACA;AACA;AACA;AACA,OAAO,MAAMyD,cAAc,GAAGA,CAC5B1D,OAAgB,EAChBC,OAAW,KACRuD,QAAQ,CAACxD,OAAO,EAAEC,OAAO,EAAE,IAAI,CAAC;;AAErC;AACA;AACA;AACA;AACA,OAAO,MAAM0D,YAAY,GAAuB3D,OAAU,IAAK;EAC7D,MAAM4D,KAAK,GAAG5D,OAAO,CAAC6D,SAAS,CAAC,IAAI,CAAM;EAC1CnE,cAAc,CAACkE,KAAK,EAAEzE,EAAE,CAAC2E,UAAU,CAAC,OAAO,CAAC,CAAC;EAC7C,OAAOF,KAAK;AACd,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMG,mBAAmB,GAAGA,CACjC/D,OAAU,EACVgE,YAA4B,GAAG,IAAI,KAChC;EACH,MAAMJ,KAAK,GAAGD,YAAY,CAAC3D,OAAO,CAAC;EACnC4D,KAAK,CAACrB,EAAE,GAAG,EAAE;EAEbhD,aAAa,CACXqE,KAAK,EACL1E,EAAE,CAAC+E,YAAY,EACf/E,EAAE,CAACgF,yBAAyB,EAC5BhF,EAAE,CAACiF,sBACL,CAAC;EAED,MAAMjE,OAAO,GAAGoD,WAAW,CAACM,KAAK,EAAE;IAAEQ,QAAQ,EAAE;EAAK,CAAC,CAAC;EAEtDtD,cAAc,CAACZ,OAAO,EAAE;IACtBK,EAAE,EAAEyD,YAAY,IAAIhE,OAAO;IAC3B+B,QAAQ,EAAE,QAAQ;IAClB3B,UAAU,EAAE;EACd,CAAC,CAAC;EAEF,OAAO;IAAEiE,QAAQ,EAAEnE,OAAO;IAAEoE,MAAM,EAAEV;EAAM,CAAC;AAC7C,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMW,gBAAgB,GAAGA,CAC9BvE,OAAU,EACVgE,YAA4B,GAAG,IAAI,KAChCrE,iBAAiB,CAAC,CAAC,CAACgB,IAAI,CAAC,MAAMoD,mBAAmB,CAAC/D,OAAO,EAAEgE,YAAY,CAAC,CAAC;;AAE/E;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAM5D,UAAU,GAAGA,CACxBoE,MAAe,EACfvE,OAAuD,KAEvDwE,iBAAiB,CAACC,GAAG,CAACF,MAAM,EAAE;EAC5BnE,IAAI,EAAEJ,OAAO,CAACI,IAAI,IAAI,IAAI;EAC1BE,EAAE,EAAEN,OAAO,CAACM,EAAE,IAAI;AACpB,CAAC,CAAC;;AAEJ;AACA;AACA;AACA;AACA,OAAO,MAAMoE,aAAa,GACxBH,MAAe,IAEfC,iBAAiB,CAACG,GAAG,CAACJ,MAAM,CAAC,IAAI,IAAI;;AAEvC;AACA;AACA;AACA;AACA,OAAO,MAAMK,eAAe,GAAIL,MAAe,IAAK;EAClD;EACA;EACA;EACArF,EAAE,CAAC2F,QAAQ,CAAC,MAAM;IAChB3F,EAAE,CAAC4F,SAAS,CAACN,iBAAiB,EAAED,MAAM,CAAC;EACzC,CAAC,EAAE,GAAG,CAAC;AACT,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMQ,WAAW,GAAGA,CACzBR,MAAe,EACfS,SAA2C,EAC3ClD,QAAmD,GAAG,QAAQ,EAC9DmD,GAAG,GAAG,MAAM,KACT;EACH,MAAMC,KAAK,GAAGhG,EAAE,CAACoC,aAAa,CAAC2D,GAAG,CAAC;EACnC3F,aAAa,CAAC4F,KAAK,EAAEhG,EAAE,CAAC2E,UAAU,CAAC5E,EAAE,CAACkG,OAAO,CAAC,CAAC;EAC/C3F,UAAU,CAAC0F,KAAK,EAAEhG,EAAE,CAAC2E,UAAU,CAAC,WAAW,CAAC,EAAEmB,SAAS,CAAC;EACxDhD,WAAW,CAACkD,KAAK,EAAE;IAAE5E,EAAE,EAAEiE,MAAM;IAAEzC,QAAQ;IAAE3B,UAAU,EAAE;EAAK,CAAC,CAAC;EAC9D,OAAO+E,KAAK;AACd,CAAC;;AAED;;AAUA,MAAMV,iBAAiB,GAAGtF,EAAE,CAACkG,MAAM,CAGjC,CAAC;AAEH,MAAMlF,gBAAgB,GAAGA,CACvBH,OAAgB,EAChBE,OAA8D,KAC3D;EACH,IAAIf,EAAE,CAACmG,SAAS,CAACpF,OAAO,CAAC,EAAE;IACzB,OAAOA,OAAO;EAChB;EAEA,IAAIgF,GAAG,GAAGhF,OAAO;EACjB,IAAI,CAACgF,GAAG,EAAE;IACR,IAAItF,WAAW,CAACT,EAAE,CAACyD,OAAO,CAAC5C,OAAO,CAAC,CAAC,EAAE;MACpCkF,GAAG,GAAG,MAAM;IACd,CAAC,MAAM;MACLA,GAAG,GAAG,KAAK;IACb;EACF;EAEA,OAAO/F,EAAE,CAACoC,aAAa,CAAC2D,GAAG,CAAC;AAC9B,CAAC;AAED,MAAM5B,WAAW,GAAGA,CAClBtD,OAAgB,EAChBC,OAAsB,EACtBsF,WAAW,GAAG,KAAK,CAAE;AAAA,KAClB;EACH,MAAM;IACJ3C,OAAO;IACPC,SAAS,GAAG3D,EAAE,CAAC4D,cAAc;IAC7B1C,UAAU,GAAG,IAAI;IACjBgE,QAAQ,GAAG,KAAK;IAChBoB,UAAU,GAAG;EACf,CAAC,GAAGvF,OAAO,aAAPA,OAAO,cAAPA,OAAO,GAAI,CAAC,CAAC;EAEjB,MAAMwF,YAAY,GAAGF,WAAW,GAAGpC,iBAAiB,GAAGR,UAAU;EACjE,MAAM+C,MAAM,GAAGH,WAAW,GAAG3E,eAAe,GAAGb,cAAc;EAC7D,MAAM4F,aAAa,GAAGnD,eAAe,CAACxC,OAAO,CAAC;EAE9C,IAAIE,OAAO,GAAGuF,YAAY,CAACzF,OAAO,EAAEC,OAAO,CAAC;EAC5C,IAAI,CAACC,OAAO,KAAKkE,QAAQ,IAAIuB,aAAa,CAAC,EAAE;IAC3CzF,OAAO,GAAGwF,MAAM,CAAC1F,OAAO,EAAE;MAAEE,OAAO,EAAE0C,OAAO;MAAExC;IAAW,CAAC,CAAC;IAC3Db,aAAa,CAACW,OAAO,EAAE2C,SAAS,CAAC;IACjC,IAAIjD,WAAW,CAACT,EAAE,CAACyD,OAAO,CAAC1C,OAAO,CAAC,CAAC,EAAE;MACpCX,aAAa,CAACW,OAAO,EAAEhB,EAAE,CAAC0G,qBAAqB,CAAC;IAClD;IAEA,IAAI,CAACD,aAAa,IAAIH,UAAU,EAAE;MAChC3F,OAAO,CACL,wEAAwE2F,UAAU,EACpF,CAAC;IACH;EACF;EAEA,OAAOtF,OAAO;AAGhB,CAAC;AAED,MAAMsD,QAAQ,GAAGA,CACfxD,OAAgB,EAChBC,OAAsB,EACtBsF,WAAW,GAAG,KAAK,CAAE;AAAA,KAClB5F,iBAAiB,CAAC,CAAC,CAACgB,IAAI,CAAC,MAAM2C,WAAW,CAACtD,OAAO,EAAEC,OAAO,EAAEsF,WAAW,CAAC,CAAC","ignoreList":[]}