{"version":3,"file":"trigger.js","names":["_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","_catch","delegateYield","_createForOfIteratorHelper","Array","isArray","_unsupportedIterableToArray","_n","F","_arrayLikeToArray","toString","from","test","asyncGeneratorStep","_asyncToGenerator","arguments","apply","_next","_throw","_classCallCheck","_defineProperties","_toPropertyKey","key","_createClass","_callSuper","_getPrototypeOf","_possibleConstructorReturn","_isNativeReflectConstruct","Reflect","construct","_assertThisInitialized","ReferenceError","Boolean","valueOf","_inherits","_setPrototypeOf","bind","_superPropGet","_get","get","_superPropBase","getOwnPropertyDescriptor","_defineProperty","_toPrimitive","toPrimitive","String","Number","MC","MH","LisnUsageError","wrapCallback","getData","waitForReferenceElement","waitForDelay","formatAsString","randId","splitOn","validateString","validateNumber","validateBoolean","fetchAction","Widget","registerWidget","fetchWidgetConfig","debug","Trigger","_Widget","element","actions","config","_config$once","_config$oneWay","_config$doDelay","_config$undoDelay","_this","logger","Logger","concat","logAtCreation","once","oneWay","delay","doDelay","undoDelay","lastCallId","toggleState","callActions","_ref","_callee","callFn","newToggleState","myCallId","_iterator","_step","action","_callee$","_context","isDisabled","debug10","err","remove","run","toggle","_x","_x2","_x3","undo","S_TOGGLE","getActions","_toConsumableArray","getConfig","copyObject","id","instance","isInstanceOf","register","registerTrigger","newTrigger","configValidator","clsPref","prefixName","newWidget","_ref2","_callee2","_getData","widgets","baseConfigValidator","thisConfigValidator","allSpecs","_iterator2","_step2","cls","_iterator3","_step3","_config$actOn","spec","_splitOn","_splitOn2","tmp","configSpec","_splitOn3","_splitOn4","argSpec","allActionSpecs","_args2","_config","actionTarget","_actions","_iterator4","_step4","actionSpec","_splitOn5","_splitOn6","_name","actionArgsAndOptions","_callee2$","_context2","newBaseConfigValidator","isFunction","t0","TRIGGER_SEP","classList","startsWith","lengthOf","OPTION_PREF_CHAR","_slicedToArray","ACTION_PREF_CHAR","args","filterBlank","assign","actOn","ACTION_ARGS_PREF_CHAR","t1","t2","t3","t4","t5","t6","t7","_x4","selector","_ref3","isLiteralString","undefined"],"sources":["../../../src/ts/triggers/trigger.ts"],"sourcesContent":["/**\n * ## Specification for the HTML API for triggers\n *\n * The following describes the general syntax when using the HTML API and\n * automatic widgets\n * ({@link Settings.settings.autoWidgets | settings.autoWidgets} is true)\n * specifically for triggers and actions.\n *\n * A trigger specification should be given as a\n * `data-lisn-on-<TriggerName>=\"<TriggerSpecList>\"` attribute.\n * A fallback option of using a CSS class of the form\n * `lisn-on-<TriggerName>--<TriggerSpec>` is also supported but not recommended.\n *\n * The general specification for a trigger is of the form:\n *\n * ```\n * <TriggerSpecList> ::= <TriggerSpec> { \";\" <TriggerSpec> }\n *\n * <TriggerSpec> ::= [ <TriggerArg> { \",\" <TriggerArg> } ]\n *                   \"@\" <ActionSpec> { \"@\" <ActionSpec> }\n *                   { \"+\" <TriggerOption> }\n *\n * <TriggerOption> ::=\n *     <BooleanOptionName> [ \"=\" ( \"false\" | \"true\" ) ] |\n *     <OptionName> \"=\" <OptionValue>\n *\n * <ActionSpec> ::= <ActionName> [ \":\" <ActionArgOrOption> { \",\" <ActionArgOrOption> } ]\n *\n * <ActionArgOrOption> ::= <ActionArg> | <OptionName> \"=\" <OptionValue>\n * ```\n *\n * where `<TriggerArg>` is the particular trigger's main argument, which could\n * be required or optional (and not all triggers accept an argument). See each\n * trigger's specification for their arguments and options.\n *\n * Also refer to each action for their accepted arguments and/or options if any.\n *\n * **NOTE:**\n *\n * There can be 0 or more spaces around any of the separator characters.\n *\n * At least one action (with a preceding \"@\" character) is always required.\n *\n * The characters \";\", \",\", \"=\", \"@\", \"+\" and \":\" are reserved separators and\n * cannot be used literally as part of an argument or option value.\n *\n * @module Triggers\n *\n * @categoryDescription Manual run\n * {@link Trigger} is the base trigger class that you can extend when building\n * custom triggers and it also registers a trigger that needs to be run\n * manually (by e.g. the {@link Actions.Run | Run} action).\n */\n\nimport * as MC from \"@lisn/globals/minification-constants\";\nimport * as MH from \"@lisn/globals/minification-helpers\";\n\nimport { LisnUsageError } from \"@lisn/globals/errors\";\n\nimport { wrapCallback } from \"@lisn/modules/callback\";\n\nimport { getData } from \"@lisn/utils/css-alter\";\nimport { waitForReferenceElement } from \"@lisn/utils/dom-search\";\nimport { waitForDelay } from \"@lisn/utils/tasks\";\nimport { formatAsString, randId, splitOn } from \"@lisn/utils/text\";\nimport {\n  validateString,\n  validateNumber,\n  validateBoolean,\n} from \"@lisn/utils/validation\";\n\nimport { Action, fetchAction } from \"@lisn/actions/action\";\n\nimport {\n  Widget,\n  WidgetConfigValidator,\n  WidgetConfigValidatorFunc,\n  WidgetConfigAsyncValidatorObject,\n  registerWidget,\n  fetchWidgetConfig,\n} from \"@lisn/widgets/widget\";\n\nimport debug from \"@lisn/debug/debug\";\n\n/**\n * {@link Trigger} is the base trigger class that you can extend when building\n * custom triggers and it also registers a trigger that needs to be run\n * manually (by e.g. the {@link Actions.Run | Run} action).\n *\n * -------\n *\n * To use with auto-widgets (HTML API), see {@link registerTrigger} for the\n * specification.\n *\n * @example\n * Show the element 1000ms after the first time the trigger is run.\n *\n * ```html\n * <div data-lisn-on-run=\"@show +once +delay=1000\"></div>\n * ```\n *\n * @category Manual run\n */\nexport class Trigger extends Widget {\n  /**\n   * \"Do\"es all the {@link Action}s linked to the trigger.\n   */\n  readonly run: () => Promise<void>;\n\n  /**\n   * \"Undo\"es all the {@link Action}s linked to the trigger.\n   */\n  readonly reverse: () => Promise<void>;\n\n  /**\n   * \"Toggle\"s all the {@link Action}s linked to the trigger.\n   */\n  readonly toggle: () => Promise<void>;\n\n  /**\n   * Returns the trigger's actions.\n   */\n  readonly getActions: () => Action[];\n\n  /**\n   * Returns the trigger config.\n   */\n  readonly getConfig: () => TriggerConfig;\n\n  static get(element: Element, id: string): Trigger | null {\n    const instance = super.get(element, id);\n    if (MH.isInstanceOf(instance, Trigger)) {\n      return instance;\n    }\n    return null;\n  }\n\n  static register() {\n    registerTrigger(\n      \"run\",\n      (element, a, actions, config) => new Trigger(element, actions, config),\n      {},\n    );\n  }\n\n  /**\n   * If no actions are supplied, nothing is done.\n   *\n   * @throws {@link Errors.LisnUsageError | LisnUsageError}\n   *                If the config is invalid.\n   */\n  constructor(element: Element, actions: Action[], config?: TriggerConfig) {\n    super(element, config);\n\n    const logger = debug\n      ? new debug.Logger({\n          name: `Trigger-${formatAsString(element)}`,\n          logAtCreation: { actions, config },\n        })\n      : null;\n\n    const once = config?.once ?? false;\n    const oneWay = config?.oneWay ?? false;\n    const delay = config?.delay || 0;\n    const doDelay = config?.doDelay ?? delay;\n    const undoDelay = config?.undoDelay ?? delay;\n\n    let lastCallId: string;\n    // false if next should be do; true if next should be undo.\n    // Used for determining delays only.\n    let toggleState = false;\n\n    const callActions = async (\n      delay: number,\n      callFn: (action: Action) => void,\n      newToggleState: boolean,\n    ) => {\n      if (this.isDisabled()) {\n        return;\n      }\n\n      const myCallId = randId();\n      lastCallId = myCallId;\n      debug: logger?.debug10(\n        `callActions [${myCallId}] (new toggle state ${newToggleState})`,\n        callFn,\n      );\n\n      if (delay) {\n        await waitForDelay(delay);\n        if (lastCallId !== myCallId) {\n          // overriden by subsequent call\n          debug: logger?.debug10(\n            `callActions [${myCallId}]: overriden by ${lastCallId}`,\n          );\n          return;\n        }\n      }\n\n      for (const action of actions) {\n        debug: logger?.debug10(`callActions [${myCallId}]`, action);\n        callFn(action);\n      }\n\n      toggleState = newToggleState;\n\n      if (toggleState && once) {\n        MH.remove(run);\n        MH.remove(reverse);\n        MH.remove(toggle);\n      }\n    };\n\n    const run = wrapCallback(() => {\n      callActions(\n        doDelay,\n        (action) => {\n          action.do();\n        },\n        true,\n      ); // don't await\n    });\n\n    const reverse = wrapCallback(() => {\n      if (!oneWay) {\n        callActions(\n          undoDelay,\n          (action) => {\n            action.undo();\n          },\n          false,\n        ); // don't await\n      }\n    });\n\n    const toggle = wrapCallback(() => {\n      callActions(\n        toggleState ? undoDelay : doDelay,\n        (action) => {\n          action[MC.S_TOGGLE]();\n        },\n        !toggleState,\n      ); // don't await\n    });\n\n    // ----------\n\n    this.run = run.invoke;\n    this.reverse = reverse.invoke;\n    this[MC.S_TOGGLE] = oneWay ? run.invoke : toggle.invoke;\n    this.getActions = () => [...actions]; // copy\n    this.getConfig = () => MH.copyObject(config || {});\n  }\n}\n\n/**\n * @interface\n */\nexport type TriggerConfig = {\n  /**\n   * An ID for the trigger so that it can be looked up by ID. It has to be\n   * unique for each element, but you can use the same ID on different\n   * elements.\n   *\n   * @defaultValue undefined\n   */\n  id?: string;\n\n  /**\n   * If true, the trigger will run at most once. This will result in the `run`\n   * or `toggle` methods removing all three of `run`, `reverse` and `toggle`\n   * when called, so that the actions are done at most once.\n   *\n   * @defaultValue false\n   */\n  once?: boolean;\n\n  /**\n   * If true, then the `reverse` method of the trigger will do nothing and the\n   * `toggle` method will always do the actions, i.e. will be equivalent to\n   * `run`.\n   *\n   * @defaultValue false\n   */\n  oneWay?: boolean;\n\n  /**\n   * Delay in milliseconds before doing, undoing or toggling actions.\n   *\n   * @defaultValue 0\n   */\n  delay?: number;\n\n  /**\n   * Delay in milliseconds before doing actions.\n   *\n   * @defaultValue {@link TriggerConfig.delay}\n   */\n  doDelay?: number;\n\n  /**\n   * Delay in milliseconds before undoing actions.\n   *\n   * @defaultValue {@link TriggerConfig.delay}\n   */\n  undoDelay?: number;\n\n  /**\n   * The element to instantiate all actions on this trigger for.\n   *\n   * @defaultValue The element on which the {@link Trigger} is defined\n   */\n  actOn?: Element;\n};\n\nexport type TriggerCreateFn<Config extends TriggerConfig> = (\n  element: Element,\n  args: string[],\n  actions: Action[],\n  config: Config,\n) => Trigger | Promise<Trigger>;\n\n/**\n * Registers the given trigger as a widget to be automatically configured for\n * all elements that have a trigger specification with the given name.\n *\n * A trigger specification can be given as a\n * `data-lisn-on-<TriggerName>=\"<TriggerSpec> { \";\" <TriggerSpec> }\"` attribute\n * or as one or more `lisn-on-<TriggerName>--<TriggerSpec>` classes.\n *\n * See the top of the {@link Triggers} page for an explanation of `<TriggerSpec>`.\n *\n * Using classes instead of attributes is not recommended and only available as\n * a fallback option.\n *\n * **IMPORTANT:** If a trigger by that name is already registered, the current\n * call does nothing, even if the remaining arguments differ.\n *\n * @param {} name       The name of the trigger. Should be in kebab-case.\n * @param {} newTrigger Called for every trigger specification on any element\n *                      that has one or more trigger specifications.\n * @param {} configValidator\n *                      A validator object, or a function that returns such an\n *                      object, for all options that are specific to the\n *                      trigger. Base options (in {@link TriggerConfig}) will\n *                      be parsed automatically and don't need to be handled by\n *                      `configValidator`.\n *                      If the parameter is a function, it will be called with\n *                      the element on which the trigger is being defined.\n *\n * @see {@link registerWidget}\n */\nexport const registerTrigger = <Config extends TriggerConfig = TriggerConfig>(\n  name: string,\n  newTrigger: TriggerCreateFn<Config>,\n  configValidator?: null | WidgetConfigValidator<Config>,\n) => {\n  const clsPref = MH.prefixName(`on-${name}`);\n\n  const newWidget = async (element: Element) => {\n    const widgets: Widget[] = [];\n    const baseConfigValidator = newBaseConfigValidator(element);\n    const thisConfigValidator = MH.isFunction(configValidator)\n      ? await configValidator(element)\n      : configValidator;\n\n    const allSpecs = splitOn(\n      getData(element, MH.prefixName(`on-${name}`)) ?? \"\",\n      TRIGGER_SEP,\n      true,\n    );\n\n    for (const cls of MH.classList(element)) {\n      if (cls.startsWith(`${clsPref}--`)) {\n        allSpecs.push(cls.slice(MH.lengthOf(clsPref) + 2));\n      }\n    }\n\n    for (const spec of allSpecs) {\n      const [tmp, configSpec] = splitOn(spec, OPTION_PREF_CHAR, true, 1);\n      const [argSpec, allActionSpecs] = splitOn(tmp, ACTION_PREF_CHAR, true, 1);\n\n      const args = MH.filterBlank(splitOn(argSpec, \",\", true)) || [];\n\n      const config = await fetchWidgetConfig(\n        configSpec,\n        MH.assign(\n          baseConfigValidator,\n          thisConfigValidator,\n        ) as WidgetConfigAsyncValidatorObject<Required<TriggerConfig> & Config>,\n        OPTION_PREF_CHAR,\n      );\n\n      const actionTarget = config.actOn ?? element;\n\n      const actions = [];\n      for (const actionSpec of splitOn(\n        allActionSpecs || \"\",\n        ACTION_PREF_CHAR,\n        true,\n      )) {\n        const [name, actionArgsAndOptions] = splitOn(\n          actionSpec,\n          ACTION_ARGS_PREF_CHAR,\n          true,\n          1,\n        );\n\n        try {\n          actions.push(\n            await fetchAction(actionTarget, name, actionArgsAndOptions || \"\"),\n          );\n        } catch (err) {\n          if (MH.isInstanceOf(err, LisnUsageError)) {\n            // fetchAction would have logged an error\n            continue;\n          }\n\n          throw err;\n        }\n      }\n\n      widgets.push(await newTrigger(element, args, actions, config));\n    }\n\n    return widgets;\n  };\n\n  registerWidget(name, newWidget, null, {\n    selector: `[class^=\"${clsPref}--\"],[class*=\" ${clsPref}--\"],[data-${clsPref}]`,\n  });\n};\n\n// --------------------\n\nconst TRIGGER_SEP = \";\";\nconst OPTION_PREF_CHAR = \"+\";\nconst ACTION_PREF_CHAR = \"@\";\nconst ACTION_ARGS_PREF_CHAR = \":\";\n\nconst newBaseConfigValidator: WidgetConfigValidatorFunc<TriggerConfig> = (\n  element,\n) => {\n  return {\n    id: validateString,\n    once: validateBoolean,\n    oneWay: validateBoolean,\n    delay: validateNumber,\n    doDelay: validateNumber,\n    undoDelay: validateNumber,\n    actOn: (key, value) =>\n      (MH.isLiteralString(value)\n        ? waitForReferenceElement(value, element)\n        : null) ?? undefined,\n  };\n};\n"],"mappings":"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","ignoreList":[]}