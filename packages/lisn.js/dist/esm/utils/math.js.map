{"version":3,"file":"math.js","names":["MC","MH","roundNumTo","value","numDecimal","arguments","length","undefined","multiplicationFactor","pow","round","isValidNum","isNumber","NUMBER","isFinite","toNum","defaultValue","numValue","isLiteralString","parseFloat","toInt","floor","toNonNegNum","toPosNum","toNumWithBounds","limits","_limits$min","_limits$max","isDefaultGiven","min","max","result","_ref","maxAbs","_len","values","Array","_key","apply","_toConsumableArray","map","v","abs","minAbs","_len2","_key2","havingMaxAbs","_len3","_key3","lengthOf","sort","a","b","INFINITY","havingMinAbs","_len4","_key4","hAngle","x","y","normalizeAngle","MATH","atan2","PI","degToRad","radToDeg","areParallel","vA","vB","angleDiffThreshold","angleA","angleB","areAntiParallel","distanceBetween","ptA","ptB","sqrt","quadraticRoots","c","z","easeInOutQuad","sortedKeysByVal","obj","descending","keysOf","keyWithMaxVal","slice","keyWithMinVal","getBitmask","start","end","_getBitmask"],"sources":["../../../src/ts/utils/math.ts"],"sourcesContent":["/**\n * @module Utils\n */\n\nimport * as MC from \"@lisn/globals/minification-constants\";\nimport * as MH from \"@lisn/globals/minification-helpers\";\n\nimport { Point, Vector, AtLeastOne } from \"@lisn/globals/types\";\n\n/**\n * Round a number to the given decimal precision (default is 0).\n *\n * @param {} [numDecimal = 0]\n *\n * @category Math\n */\nexport const roundNumTo = (value: number, numDecimal = 0) => {\n  const multiplicationFactor = MH.pow(10, numDecimal);\n  return MH.round(value * multiplicationFactor) / multiplicationFactor;\n};\n\n/**\n * Returns true if the given value is a valid _finite_ number.\n *\n * @category Validation\n */\nexport const isValidNum = (value: unknown): value is number =>\n  MH.isNumber(value) && MC.NUMBER.isFinite(value);\n\n/**\n * If the given value is a valid _finite_ number, it is returned, otherwise\n * the default is returned.\n *\n * @category Math\n */\nexport const toNum = <D extends number | false | null = 0>(\n  value: unknown,\n  defaultValue: D | 0 = 0,\n): number | D => {\n  const numValue = MH.isLiteralString(value) ? MH.parseFloat(value) : value;\n\n  // parseFloat will strip trailing non-numeric characters, so we check that\n  // the parsed number is equal to the string, if it was a string, using loose\n  // equality, in order to make sure the entire string was a number.\n  return isValidNum(numValue) && numValue == value ? numValue : defaultValue;\n};\n\n/**\n * If the given value is a valid _finite integer_ number, it is returned,\n * otherwise the default is returned.\n *\n * @category Math\n */\nexport const toInt = <D extends number | false | null = 0>(\n  value: unknown,\n  defaultValue: D | 0 = 0,\n): number | D => {\n  let numValue = toNum(value, null);\n  numValue = numValue === null ? numValue : MH.floor(numValue);\n\n  // Ensure that the parsed int equaled the original by loose equality.\n  return isValidNum(numValue) && numValue == value ? numValue : defaultValue;\n};\n\n/**\n * If the given value is a valid non-negative _finite_ number, it is returned,\n * otherwise the default is returned.\n *\n * @category Math\n */\nexport const toNonNegNum = <D extends number | false | null = 0>(\n  value: unknown,\n  defaultValue: D | 0 = 0,\n): number | D => {\n  const numValue = toNum(value, null);\n  return numValue !== null && numValue >= 0 ? numValue : defaultValue;\n};\n\n/**\n * If the given value is a valid positive number, it is returned, otherwise the\n * default is returned.\n *\n * @category Math\n */\nexport const toPosNum = <D extends number | false | null = 0>(\n  value: unknown,\n  defaultValue: D | 0 = 0,\n): number | D => {\n  const numValue = toNum(value, null);\n  return numValue !== null && numValue > 0 ? numValue : defaultValue;\n};\n\n/**\n * Returns the given number bound by min and/or max value.\n *\n * If the value is not a valid number, then `defaultValue` is returned if given\n * (_including if it is null_), otherwise `limits.min` if given and not null,\n * otherwise `limits.max` if given and not null, or finally 0.\n *\n * If the value is outside the bounds, then:\n * - if `defaultValue` is given, `defaultValue` is returned (_including if it\n *   is null_)\n * - otherwise, the min or the max value (whichever one is violated) is\n *   returned\n *\n * @category Math\n */\nexport const toNumWithBounds = <D extends number | false | null = number>(\n  value: unknown,\n  limits: AtLeastOne<{ min: number | null; max: number | null }>,\n  defaultValue?: D,\n): number | D => {\n  const isDefaultGiven = defaultValue !== undefined;\n  const numValue = toNum(value, null);\n  const min = limits?.min ?? null;\n  const max = limits?.max ?? null;\n\n  let result: number | D;\n  if (!isValidNum(numValue)) {\n    result = isDefaultGiven ? defaultValue : (min ?? max ?? 0);\n  } else if (min !== null && numValue < min) {\n    result = isDefaultGiven ? defaultValue : min;\n  } else if (max !== null && numValue > max) {\n    result = isDefaultGiven ? defaultValue : max;\n  } else {\n    result = numValue;\n  }\n\n  return result;\n};\n\n/**\n * Returns the largest absolute value among the given ones.\n *\n * The result is always positive.\n *\n * @category Math\n */\nexport const maxAbs = (...values: number[]) =>\n  MH.max(...values.map((v) => MH.abs(v)));\n\n/**\n * Returns the smallest absolute value among the given ones.\n *\n * The result is always positive.\n *\n * @category Math\n */\nexport const minAbs = (...values: number[]) =>\n  MH.min(...values.map((v) => MH.abs(v)));\n\n/**\n * Returns the value with the largest absolute value among the given ones.\n *\n * The result can be negative.\n *\n * @category Math\n */\nexport const havingMaxAbs = (...values: number[]): number =>\n  MH.lengthOf(values)\n    ? values.sort((a, b) => MH.abs(b) - MH.abs(a))[0]\n    : -MC.INFINITY;\n\n/**\n * Returns the value with the smallest absolute value among the given ones.\n *\n * The result can be negative.\n *\n * @category Math\n */\nexport const havingMinAbs = (...values: number[]) =>\n  MH.lengthOf(values)\n    ? values.sort((a, b) => MH.abs(a) - MH.abs(b))[0]\n    : MC.INFINITY;\n\n/**\n * Returns the angle (in radians) that the vector defined by the given x, y\n * makes with the positive horizontal axis.\n *\n * The angle returned is in the range -PI to PI, not including -PI.\n *\n * @category Math\n */\nexport const hAngle = (x: number, y: number) =>\n  normalizeAngle(MC.MATH.atan2(y, x)); // ensure that -PI is transformed to +PI\n\n/**\n * Normalizes the given angle (in radians) so that it's in the range -PI to PI,\n * not including -PI.\n *\n * @category Math\n */\nexport const normalizeAngle = (a: number) => {\n  // ensure it's positive in the range 0 to 2 PI\n  while (a < 0 || a > MC.PI * 2) {\n    a += (a < 0 ? 1 : -1) * MC.PI * 2;\n  }\n\n  // then, if > PI, offset by - 2PI\n  return a > MC.PI ? a - MC.PI * 2 : a;\n};\n\n/**\n * Converts the given angle in degrees to radians.\n *\n * @category Math\n */\nexport const degToRad = (a: number) => (a * MC.PI) / 180;\n\n/**\n * Converts the given angle in radians to degrees.\n *\n * @category Math\n */\nexport const radToDeg = (a: number) => (a * 180) / MC.PI;\n\n/**\n * Returns true if the given vectors point in the same direction.\n *\n * @param {} angleDiffThreshold\n *                  Sets the threshold in degrees when comparing the angles of\n *                  two vectors. E.g. for 5 degrees threshold, directions\n *                  whose vectors are within 5 degrees of each other are\n *                  considered parallel.\n *                  It doesn't make sense for this value to be < 0 or >= 90\n *                  degrees. If it is, it's forced to be positive (absolute)\n *                  and <= 89.99.\n *\n * @category Math\n */\nexport const areParallel = (vA: Vector, vB: Vector, angleDiffThreshold = 0) => {\n  const angleA = hAngle(vA[0], vA[1]);\n  const angleB = hAngle(vB[0], vB[1]);\n  angleDiffThreshold = MH.min(89.99, MH.abs(angleDiffThreshold));\n\n  return (\n    MH.abs(normalizeAngle(angleA - angleB)) <= degToRad(angleDiffThreshold)\n  );\n};\n\n/**\n * Returns true if the given vectors point in the opposite direction.\n *\n * @param {} angleDiffThreshold\n *                  Sets the threshold in degrees when comparing the angles of\n *                  two vectors. E.g. for 5 degrees threshold, directions\n *                  whose vectors are within 175-185 degrees of each other are\n *                  considered antiparallel.\n *                  It doesn't make sense for this value to be < 0 or >= 90\n *                  degrees. If it is, it's forced to be positive (absolute)\n *                  and <= 89.99.\n *\n * @category Math\n */\nexport const areAntiParallel = (\n  vA: Vector,\n  vB: Vector,\n  angleDiffThreshold = 0,\n) => areParallel(vA, [-vB[0], -vB[1]], angleDiffThreshold);\n\n/**\n * Returns the distance between two points on the screen.\n *\n * @category Math\n */\nexport const distanceBetween = (ptA: Point, ptB: Point) =>\n  MH.sqrt(MH.pow(ptA[0] - ptB[0], 2) + MH.pow(ptA[1] - ptB[1], 2));\n\n/**\n * Returns the two roots of the quadratic equation with coefficients\n * `a`, `b` & `c`, i.e. `a * x^2 + b * x + c = 0`\n *\n * The roots may be `NaN` if the quadratic has no real solutions.\n *\n * @category Math\n */\nexport const quadraticRoots = (a: number, b: number, c: number) => {\n  const z = MH.sqrt(b * b - 4 * a * c);\n  return [(-b + z) / (2 * a), (-b - z) / (2 * a)];\n};\n\n/**\n * Returns the value that an \"easing\" quadratic function would have at the\n * given x.\n *\n * @see https://easings.net/#easeInOutQuad\n *\n * @category Math\n */\nexport const easeInOutQuad = (x: number) =>\n  x < 0.5 ? 2 * x * x : 1 - MH.pow(-2 * x + 2, 2) / 2;\n\n/**\n * Returns an array of object's keys sorted by the numeric value they hold.\n *\n * @category Math\n */\nexport const sortedKeysByVal = <T extends Record<string, number>>(\n  obj: T,\n  descending = false,\n): Array<keyof T> => {\n  if (descending) {\n    return MH.keysOf(obj).sort((x: keyof T, y: keyof T) => obj[y] - obj[x]);\n  }\n\n  return MH.keysOf(obj).sort((x: keyof T, y: keyof T) => obj[x] - obj[y]);\n};\n\n/**\n * Returns the key in the given object which holds the largest numeric value.\n *\n * If the object is empty, returns `undefined`.\n *\n * @category Math\n */\nexport const keyWithMaxVal = (\n  obj: Record<string, number>,\n): string | undefined => {\n  return sortedKeysByVal(obj).slice(-1)[0];\n};\n\n/**\n * Returns the key in the given object which holds the smallest numeric value.\n *\n * If the object is empty, returns `undefined`.\n *\n * @category Math\n */\nexport const keyWithMinVal = (\n  obj: Record<string, number>,\n): string | undefined => {\n  return sortedKeysByVal(obj).slice(0, 1)[0];\n};\n\n/**\n * Takes two integers and returns a bitmask that covers all values between\n * 1 << start and 1 << end, _including the starting and ending one_.\n *\n * If pStart > pEnd, they are reversed.\n *\n * getBitmask(start, start) always returns 1 << start\n * getBitmask(start, end) always returns same as getBitmask(end, start)\n *\n * @category Math\n */\nexport const getBitmask = (start: number, end: number): number =>\n  start > end\n    ? getBitmask(end, start)\n    : (~0 >>> (32 - end - 1 + start)) << start;\n"],"mappings":"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","ignoreList":[]}