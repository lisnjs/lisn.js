{"version":3,"file":"layout-watcher.js","names":["_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","_catch","delegateYield","asyncGeneratorStep","_asyncToGenerator","arguments","apply","_next","_throw","_classCallCheck","_defineProperties","_toPropertyKey","key","_createClass","_defineProperty","_toPrimitive","toPrimitive","String","Number","MC","MH","settings","getData","getLayoutBitmask","NUM_LAYOUTS","ORDERED_DEVICES","ORDERED_ASPECTR","logError","logWarn","omitKeys","copyExistingKeys","createOverlay","objToStrKey","wrapCallback","newXMap","SizeWatcher","debug","LayoutWatcher","config","CONSTRUCTOR_KEY","illegalConstructorError","logger","Logger","logAtCreation","nonIntersectingBitmask","currentLayoutData","device","aspectRatio","allCallbacks","newMap","fetchCurrentLayout","_ref","_callee","_callee$","_context","readyPromise","copyObject","setupOverlays","_ref2","_callee2","_yield$createOverlays","root","overlays","_callee2$","_context2","createOverlays","_root","_deviceBreakpoints","_aspectRatioBreakpoints","newPromise","isReady","intersectionHandler","entries","numEntries","lengthOf","debug9","concat","bugError","_iterator","_createForOfIteratorHelper","_step","entry","getNonIntersecting","err","processLayoutChange","observeOptions","rootMargin","observer","newIntersectionObserver","_iterator2","_step2","triggerOverlay","observe","createCallback","handler","layoutBitmask","_allCallbacks$get","remove","get","_callback","debug5","callback","onRemove","deleteHandler","set","_layoutBitmask","setupOnLayout","_ref3","_callee3","options","layoutData","_callee3$","_context3","skipInitial","isRemoved","changeMatches","invokeCallback","_x","_x2","deleteKey","skipCallbacks","deviceBit","floor","log2","bitmask","aspectRatioBit","INFINITY","nameOf","debug8","_iterator3","_step3","onLayout","offLayout","_allCallbacks$get2","undefined","getConfig","reuse","_instances$get","myConfig","configStrKey","instance","instances","sGet","SYMBOL","VAR_BORDER_HEIGHT","prefixCssJsVar","PREFIX_DEVICE","prefixName","PREFIX_ASPECTR","deviceBreakpoints","aspectRatioBreakpoints","_ref4","_callee4","overlayPromises","overlayParent","parentHeightCss","_callee4$","_context4","style","position","S_WIDTH","parent","data","trackSize","target","promiseAll","_x3","_x4","_x5","getOverlayLayout","overlay","layout","has","thisLayoutData","prevLayoutData","bit","targetOf","isHTMLElement","typeOrClassOf","isIntersecting"],"sources":["../../../src/ts/watchers/layout-watcher.ts"],"sourcesContent":["/**\n * @module Watchers/LayoutWatcher\n */\n\n// NOTES FOR DEVELOPERS\n//\n// For each layout (device or aspect ratio), we create an overlay that has a\n// a width that corresponds to the layout:\n//  - for device layouts, it's a fixed width in pixels, equal to the minimum\n//    width of the device\n//  - for aspect ratio layouts, the overlay has a width that's relative to\n//    the root's height, equal to the minimum width of the aspect ratio\n//\n// Then we observe each overlay with an IntersectionObserver whose root\n// is this Watcher's root and whose root margin is -100% from the left (i.e.\n// right-most edge of the root).\n//\n// If the root is null, i.e. the viewport, the overlays will have a \"fixed\"\n// position and be inserted in document.body. Otherwise, they'll be inserted\n// in the root element with an \"absolute\" position. The root element, if not\n// body must be positioned. It gets a default position of \"relative\" through\n// the class `.lisn-overlay-container`, which Overlays ensures it gets.\n//\n// If using custom root we track its size through SizeWatcher as the\n// aspectRatio overlays are relative to the height, and we can't rely on CSS\n// alone as the root may not have a fixed height through CSS.\n//\n// Whenever any overlay intersects the root, this means that the viewport\n// width is now equal to or narrower than the overlay.\n//\n// ~~~~ The current device or aspect ratio corresponds to the _widest_\n// ~~~~ overlay that does not intersect.\n//\n// For example:\n//\n// | mobile\n// ========| mobile-wide\n// ======================| tablet\n// =========================================| desktop\n//\n// _________________________________| viewport width\n//\n// Here, mobile, mobile-wide and tablet overlays are _not_ intersecting, only\n// desktop intersects. The device layout is therefore tablet.\n//\n// Therefore:\n// - have the layout bit spaces ordered from narrowest layout at lowest bit\n//   to widest layout at hightest bit\n// - keep a running bitmask of which overlays are not intersecting and update\n//   it each time there is an IntersectionObserverEntry.\n// - get the highest device or aspect ratio bit in that bitmask to find out\n//   the widest non-intersecting overlay\n//\n// For simplicity we create overlays also for layouts that have a 0-width.\n\nimport * as MC from \"@lisn/globals/minification-constants\";\nimport * as MH from \"@lisn/globals/minification-helpers\";\n\nimport { settings } from \"@lisn/globals/settings\";\n\nimport {\n  Layout,\n  DeviceSpec,\n  Device,\n  AspectRatioSpec,\n  AspectRatio,\n} from \"@lisn/globals/types\";\n\nimport { getData } from \"@lisn/utils/css-alter\";\nimport {\n  getLayoutBitmask,\n  NUM_LAYOUTS,\n  ORDERED_DEVICES,\n  ORDERED_ASPECTR,\n} from \"@lisn/utils/layout\";\nimport { logError, logWarn } from \"@lisn/utils/log\";\nimport { omitKeys, copyExistingKeys } from \"@lisn/utils/misc\";\nimport { createOverlay } from \"@lisn/utils/overlays\";\nimport { objToStrKey } from \"@lisn/utils/text\";\n\nimport {\n  CallbackHandler,\n  Callback,\n  wrapCallback,\n} from \"@lisn/modules/callback\";\nimport { newXMap } from \"@lisn/modules/x-map\";\n\nimport { SizeWatcher } from \"@lisn/watchers/size-watcher\";\n\nimport debug from \"@lisn/debug/debug\";\n\n/**\n * {@link LayoutWatcher} listens for changes in either the width or aspect\n * ratio of the viewport or the given {@link LayoutWatcherConfig.root | root}.\n *\n * It does not track resize events; rather it's built on top of\n * {@link https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver | IntersectionObserver}.\n *\n * It manages registered callbacks globally and reuses IntersectionObservers\n * for more efficient performance.\n */\nexport class LayoutWatcher {\n  /**\n   * Call the given handler whenever the layout changes.\n   *\n   * Unless {@link OnLayoutOptions.skipInitial} is true, the handler is also\n   * called (almost) immediately with the current layout.\n   *\n   * **IMPORTANT:** The same handler can _not_ be added multiple times, even if\n   * the options differ. If the handler has already been added, it is removed\n   * and re-added with the current options.\n   *\n   * @throws {@link Errors.LisnUsageError | LisnUsageError}\n   *                If the options are invalid.\n   */\n  readonly onLayout: (\n    handler: OnLayoutHandler,\n    options?: OnLayoutOptions,\n  ) => Promise<void>;\n\n  /**\n   * Removes a previously added handler.\n   */\n  readonly offLayout: (handler: OnLayoutHandler) => void;\n\n  /**\n   * Get the current screen layout.\n   */\n  readonly fetchCurrentLayout: () => Promise<LayoutData>;\n\n  /**\n   * Creates a new instance of LayoutWatcher with the given\n   * {@link LayoutWatcherConfig}. It does not save it for future reuse.\n   */\n  static create(config: LayoutWatcherConfig = {}) {\n    return new LayoutWatcher(getConfig(config), CONSTRUCTOR_KEY);\n  }\n\n  /**\n   * Returns an existing instance of LayoutWatcher with the given\n   * {@link LayoutWatcherConfig}, or creates a new one.\n   *\n   * **NOTE:** It saves it for future reuse, so don't use this for temporary\n   * short-lived watchers.\n   */\n  static reuse(config: LayoutWatcherConfig = {}) {\n    const myConfig = getConfig(config);\n    const configStrKey = objToStrKey(omitKeys(myConfig, { _root: null }));\n\n    let instance = instances.get(myConfig._root)?.get(configStrKey);\n    if (!instance) {\n      instance = new LayoutWatcher(myConfig, CONSTRUCTOR_KEY);\n      instances.sGet(myConfig._root).set(configStrKey, instance);\n    }\n\n    return instance;\n  }\n\n  private constructor(\n    config: LayoutWatcherConfigInternal,\n    key: typeof CONSTRUCTOR_KEY,\n  ) {\n    if (key !== CONSTRUCTOR_KEY) {\n      throw MH.illegalConstructorError(\"LayoutWatcher.create\");\n    }\n\n    const logger = debug\n      ? new debug.Logger({ name: \"LayoutWatcher\", logAtCreation: config })\n      : null;\n    let nonIntersectingBitmask = 0;\n    let currentLayoutData: LayoutData = {\n      device: null,\n      aspectRatio: null,\n    };\n\n    const allCallbacks = MH.newMap<\n      OnLayoutHandler,\n      {\n        _callback: OnLayoutCallback;\n        _layoutBitmask: number;\n      }\n    >();\n\n    // ----------\n\n    const fetchCurrentLayout = async (): Promise<LayoutData> => {\n      await readyPromise;\n\n      return MH.copyObject(currentLayoutData);\n    };\n\n    // ----------\n\n    const setupOverlays = async () => {\n      const { root, overlays } = await createOverlays(\n        config._root,\n        config._deviceBreakpoints,\n        config._aspectRatioBreakpoints,\n      );\n\n      return MH.newPromise<void>((resolve) => {\n        let isReady = false;\n\n        const intersectionHandler = (entries: IntersectionObserverEntry[]) => {\n          const numEntries = MH.lengthOf(entries);\n          debug: logger?.debug9(`Got ${numEntries} new entries`, entries);\n\n          if (!isReady) {\n            /* istanbul ignore next */ // shouldn't happen\n            if (numEntries < NUM_LAYOUTS) {\n              logWarn(\n                MH.bugError(\n                  `Got IntersectionObserver ${numEntries}, ` +\n                    `expected >= ${NUM_LAYOUTS}`,\n                ),\n              );\n            }\n          }\n\n          for (const entry of entries) {\n            nonIntersectingBitmask = getNonIntersecting(\n              nonIntersectingBitmask,\n              entry,\n            );\n          }\n\n          // If this is the initial call from IntersectionObserver, skip callbacks.\n          // Those that have skipInitial: false would be called elsewhere, by\n          // setupOnLayout\n          processLayoutChange(!isReady);\n          isReady = true;\n          resolve(); // ready after IntersectionObserver has called us the 1st time\n        };\n\n        // ----------\n\n        const observeOptions = {\n          root,\n          rootMargin: \"5px 0% 5px -100%\",\n        };\n\n        const observer = MH.newIntersectionObserver(\n          intersectionHandler,\n          observeOptions,\n        );\n\n        for (const triggerOverlay of overlays) {\n          observer.observe(triggerOverlay);\n        }\n      });\n    };\n\n    // ----------\n\n    const createCallback = (\n      handler: OnLayoutHandler,\n      layoutBitmask: number,\n    ): OnLayoutCallback => {\n      MH.remove(allCallbacks.get(handler)?._callback);\n\n      debug: logger?.debug5(\"Adding/updating handler\", layoutBitmask);\n      const callback = wrapCallback(handler);\n      callback.onRemove(() => {\n        deleteHandler(handler);\n      });\n\n      allCallbacks.set(handler, {\n        _callback: callback,\n        _layoutBitmask: layoutBitmask,\n      });\n      return callback;\n    };\n\n    const setupOnLayout = async (\n      handler: OnLayoutHandler,\n      options: OnLayoutOptions | undefined,\n    ) => {\n      const layoutBitmask = getLayoutBitmask(options);\n      const callback = createCallback(handler, layoutBitmask);\n\n      if (options?.skipInitial) {\n        return;\n      }\n\n      const layoutData = await fetchCurrentLayout();\n\n      if (\n        !callback.isRemoved() &&\n        changeMatches(layoutBitmask, layoutData, null)\n      ) {\n        debug: logger?.debug5(\"Calling initially with\", layoutData);\n        await invokeCallback(callback, layoutData);\n      }\n    };\n\n    const deleteHandler = (handler: OnLayoutHandler) => {\n      MH.deleteKey(allCallbacks, handler);\n      // no need to unobserve the overlays\n    };\n\n    const processLayoutChange = (skipCallbacks: boolean) => {\n      const deviceBit = MH.floor(\n        MH.log2(nonIntersectingBitmask & ORDERED_DEVICES.bitmask),\n      );\n\n      const aspectRatioBit = MH.floor(\n        MH.log2(nonIntersectingBitmask & ORDERED_ASPECTR.bitmask),\n      );\n\n      const layoutData: LayoutData = { device: null, aspectRatio: null };\n\n      // -Infinity means all of the overlays are intersecting, which would only\n      // happen if the narrowest overlay is not actually 0-width (which is not the\n      // case by default and against the recommended settings).\n      if (deviceBit !== -MC.INFINITY) {\n        layoutData.device = ORDERED_DEVICES.nameOf(1 << deviceBit);\n      }\n      if (aspectRatioBit !== -MC.INFINITY) {\n        layoutData.aspectRatio = ORDERED_ASPECTR.nameOf(1 << aspectRatioBit);\n      }\n\n      debug: logger?.debug8(\"New layout\", layoutData);\n\n      if (!skipCallbacks) {\n        for (const entry of allCallbacks.values()) {\n          const layoutBitmask = entry._layoutBitmask;\n          if (!changeMatches(layoutBitmask, layoutData, currentLayoutData)) {\n            debug: logger?.debug9(\n              `Layout change does not match bitmask ${layoutBitmask}`,\n            );\n            continue;\n          }\n\n          invokeCallback(entry._callback, layoutData);\n        }\n      }\n\n      currentLayoutData = layoutData;\n    };\n\n    const readyPromise = setupOverlays(); // no need to await\n\n    // ----------\n\n    this.fetchCurrentLayout = fetchCurrentLayout;\n\n    // ----------\n\n    this.onLayout = setupOnLayout;\n\n    // ----------\n\n    this.offLayout = (handler) => {\n      debug: logger?.debug5(\"Removing handler\");\n      MH.remove(allCallbacks.get(handler)?._callback);\n    };\n  }\n}\n\n/**\n * @interface\n */\nexport type LayoutWatcherConfig = {\n  /**\n   * The root element whose layout to watch. If not given or `null`, then the\n   * viewport layout is watched.\n   *\n   * @defaultValue null\n   */\n  root?: HTMLElement | null;\n\n  /**\n   * Use custom device breakpoints. Only known device names ({@link Device})\n   * are supported. If any are missing from the given dictionary, the value\n   * from {@link settings.deviceBreakpoints} is used.\n   *\n   * @defaultValue {@link settings.deviceBreakpoints}\n   */\n  deviceBreakpoints?: typeof settings.deviceBreakpoints;\n\n  /**\n   * Use custom aspect ratio breakpoints. Only known aspect ratio names\n   * ({@link AspectRatio}) are supported. If any are missing from the given\n   * dictionary, the value from {@link settings.aspectRatioBreakpoints} is\n   * used.\n   *\n   * @defaultValue {@link settings.aspectRatioBreakpoints}\n   */\n  aspectRatioBreakpoints?: typeof settings.aspectRatioBreakpoints;\n};\n\n/**\n * @interface\n */\nexport type OnLayoutOptions = {\n  /**\n   * Specifies a list of {@link Device}s to target for.\n   *\n   * The handler will only be called if there is a change of device to a device\n   * matching the specification.\n   *\n   * It can be:\n   * - \"min <Device>\": devices at least as wide as `<Device>`\n   * - \"max <Device>\": devices at most as wide as `<Device>`\n   * - \"<DeviceMin> to <DeviceMax>\": devices at least as wide as `<DeviceMin>`\n   *                                 and at most as wide as `<DeviceMax>`\n   * - a comma-separated list of device names\n   * - an array of device names\n   *\n   * **NOTE**\n   *\n   * If only one of {@link devices} or {@link aspectRatios} is specified, the\n   * handler will only be called for matching changes of device or aspect ratio\n   * respectively.\n   *\n   * If neither is specified, the handler will be called for any change of layout\n   * (device or aspect ratio).\n   *\n   * Also note that an empty array is treated the same as not given, or `null`.\n   *\n   * @defaultValue undefined\n   */\n  devices?: DeviceSpec | Device[];\n\n  /**\n   * Specifies a list of {@link AspectRatio}s to target for.\n   *\n   * The handler will only be called if there is a change of aspect ratio to\n   * an aspect ratios matching the specification.\n   *\n   * It can be:\n   * - \"min <AspectRatio>\": aspect ratios at least as wide as `<AspectRatio>`\n   * - \"max <AspectRatio>\": aspect ratios at most as wide as `<AspectRatio>`\n   * - \"<AspectRatioMin> to <AspectRatioMax>\": aspect ratios at least as wide\n   *                        as `<AspectRatioMin>` and at most as wide as\n   *                        `<AspectRatioMax>`\n   * - a comma-separated list of aspect ratio names\n   * - an array of aspect ratio names\n   *\n   * **NOTE**\n   *\n   * If only one of {@link devices} or {@link aspectRatios} is specified, the\n   * handler will only be called for matching changes of device or aspect ratio\n   * respectively.\n   *\n   * If neither is specified, the handler will be called for any change of layout\n   * (device or aspect ratio).\n   *\n   * @defaultValue undefined\n   */\n  aspectRatios?: AspectRatioSpec | AspectRatio[];\n\n  /**\n   * Do not call the handler until there's a future change of layout.\n   *\n   * By default, we call the handler (almost) immediately with the current\n   * layout data if it matches the given {@link devices} and {@link aspectRatios}.\n   *\n   * @defaultValue false\n   */\n  skipInitial?: boolean;\n};\n\n/**\n * The handler is invoked with one argument:\n *\n * - the current {@link LayoutData}\n */\nexport type OnLayoutHandlerArgs = [LayoutData];\nexport type OnLayoutCallback = Callback<OnLayoutHandlerArgs>;\nexport type OnLayoutHandler =\n  | CallbackHandler<OnLayoutHandlerArgs>\n  | OnLayoutCallback;\n\n/**\n * Note that {@link device} or {@link aspectRatio} would only be null if the\n * viewport is narrower than the narrowest device/aspect ratio. This would only\n * happen if the narrowest device/aspect ratio is _not_ 0-width (which is not\n * the case with the default breakpoints and is against the recommendation for\n * setting breakpoints.\n */\nexport type LayoutData = {\n  device: Device | null;\n  aspectRatio: AspectRatio | null;\n};\n\n// ----------------------------------------\n\ntype LayoutWatcherConfigInternal = {\n  _root: HTMLElement | null;\n  _deviceBreakpoints: typeof settings.deviceBreakpoints;\n  _aspectRatioBreakpoints: typeof settings.aspectRatioBreakpoints;\n};\n\nconst CONSTRUCTOR_KEY: unique symbol = MC.SYMBOL() as typeof CONSTRUCTOR_KEY;\nconst instances = newXMap<HTMLElement | null, Map<string, LayoutWatcher>>(() =>\n  MH.newMap(),\n);\n\nconst VAR_BORDER_HEIGHT = MH.prefixCssJsVar(\"border-height\");\nconst PREFIX_DEVICE = MH.prefixName(\"device\");\nconst PREFIX_ASPECTR = MH.prefixName(\"aspect-ratio\");\n\nconst getConfig = (\n  config: LayoutWatcherConfig | undefined,\n): LayoutWatcherConfigInternal => {\n  const deviceBreakpoints = MH.copyObject(settings.deviceBreakpoints);\n  if (config?.deviceBreakpoints) {\n    copyExistingKeys(config.deviceBreakpoints, deviceBreakpoints);\n  }\n\n  const aspectRatioBreakpoints = MH.copyObject(settings.aspectRatioBreakpoints);\n\n  if (config?.aspectRatioBreakpoints) {\n    copyExistingKeys(config.aspectRatioBreakpoints, aspectRatioBreakpoints);\n  }\n\n  return {\n    _root: config?.root || null,\n    _deviceBreakpoints: deviceBreakpoints,\n    _aspectRatioBreakpoints: aspectRatioBreakpoints,\n  };\n};\n\n// ----------------------------------------\n\nconst createOverlays = async (\n  root: HTMLElement | null,\n  deviceBreakpoints: typeof settings.deviceBreakpoints,\n  aspectRatioBreakpoints: typeof settings.aspectRatioBreakpoints,\n) => {\n  const overlayPromises = [];\n\n  let overlayParent: HTMLElement;\n  if (root) {\n    overlayParent = root;\n  } else {\n    // Since modals remove the scrollbar on the body when active, the width of\n    // the body changes upon open/close of a modal, which would create\n    // glitching if it happens near a device breakpoint. So if the root is the\n    // viewport, we create a fixed positioned container to hold the overlays\n    // and set its width to be 100vw and use that as the root of\n    overlayParent = await createOverlay({\n      style: {\n        position: \"fixed\",\n        [MC.S_WIDTH]: \"100vw\",\n      },\n    });\n  }\n\n  let device: Device;\n  for (device in deviceBreakpoints) {\n    overlayPromises.push(\n      createOverlay({\n        parent: overlayParent,\n        style: {\n          position: \"absolute\",\n          [MC.S_WIDTH]: deviceBreakpoints[device] + \"px\",\n        },\n        data: {\n          [PREFIX_DEVICE]: device,\n        },\n      }),\n    );\n  }\n\n  const parentHeightCss = root ? `var(${VAR_BORDER_HEIGHT}, 0) * 1px` : \"100vh\";\n  if (root) {\n    SizeWatcher.reuse().trackSize(null, { target: root });\n  }\n\n  let aspectRatio: AspectRatio;\n  for (aspectRatio in aspectRatioBreakpoints) {\n    overlayPromises.push(\n      createOverlay({\n        parent: overlayParent,\n        style: {\n          position: \"absolute\",\n          [MC.S_WIDTH]:\n            `calc(${aspectRatioBreakpoints[aspectRatio]} ` +\n            `* ${parentHeightCss})`,\n        },\n        data: {\n          [PREFIX_ASPECTR]: aspectRatio,\n        },\n      }),\n    );\n  }\n\n  const overlays = await MH.promiseAll(overlayPromises);\n  return { root: overlayParent, overlays };\n};\n\nconst getOverlayLayout = (overlay: HTMLElement): Layout | null => {\n  const layout =\n    getData(overlay, PREFIX_DEVICE) || getData(overlay, PREFIX_ASPECTR);\n  /* istanbul ignore else */\n  if (layout && (ORDERED_DEVICES.has(layout) || ORDERED_ASPECTR.has(layout))) {\n    return layout;\n  } else {\n    // shouldn't happen\n    logError(MH.bugError(\"No device or aspectRatio data attribute\"));\n    return null;\n  }\n};\n\nconst changeMatches = (\n  layoutBitmask: number,\n  thisLayoutData: LayoutData,\n  prevLayoutData: LayoutData | undefined | null,\n): boolean => {\n  // True if the callback is interested in a change of device and there's a\n  // change of device and the new device is one of the ones it's interested in\n  // (or it's null, i.e. device is undefined).\n  // And the same for aspect ratios.\n\n  if (\n    prevLayoutData?.device !== thisLayoutData.device &&\n    (!thisLayoutData.device ||\n      ORDERED_DEVICES.bit[thisLayoutData.device] & layoutBitmask)\n  ) {\n    return true;\n  }\n\n  if (\n    prevLayoutData?.aspectRatio !== thisLayoutData.aspectRatio &&\n    (!thisLayoutData.aspectRatio ||\n      ORDERED_ASPECTR.bit[thisLayoutData.aspectRatio] & layoutBitmask)\n  ) {\n    return true;\n  }\n\n  return false;\n};\n\nconst getNonIntersecting = (\n  nonIntersectingBitmask: number, // current\n  entry: IntersectionObserverEntry,\n): number => {\n  const target = MH.targetOf(entry);\n  /* istanbul ignore next */ // shouldn't happen\n  if (!MH.isHTMLElement(target)) {\n    logError(\n      MH.bugError(\n        `IntersectionObserver called us with '${MH.typeOrClassOf(target)}'`,\n      ),\n    );\n    return nonIntersectingBitmask;\n  }\n\n  const layout = getOverlayLayout(target);\n  let bit = 0;\n  if (!layout) {\n    // error already logged by getOverlayLayout\n  } else if (ORDERED_DEVICES.has(layout)) {\n    bit = ORDERED_DEVICES.bit[layout];\n  } else if (ORDERED_ASPECTR.has(layout)) {\n    bit = ORDERED_ASPECTR.bit[layout];\n  } else {\n    /* istanbul ignore next */ // shouldn't happen\n    logError(\n      MH.bugError(`Unknown device or aspectRatio data attribute: ${layout}`),\n    );\n  }\n\n  if (entry.isIntersecting) {\n    nonIntersectingBitmask &= ~bit;\n  } else {\n    nonIntersectingBitmask |= bit;\n  }\n\n  return nonIntersectingBitmask;\n};\n\nconst invokeCallback = (callback: OnLayoutCallback, layoutData: LayoutData) =>\n  callback.invoke(MH.copyObject(layoutData)).catch(logError);\n"],"mappings":"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","ignoreList":[]}