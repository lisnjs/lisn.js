{"version":3,"file":"widget.cjs","names":["MC","_interopRequireWildcard","require","MH","_settings","_cssAlter","_domEvents","_log","_misc","_tasks","_text","_callback","_xMap","_domWatcher","_debug","_interopRequireDefault","e","__esModule","_getRequireWildcardCache","WeakMap","r","t","_typeof","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","o","Symbol","iterator","constructor","prototype","_slicedToArray","_arrayWithHoles","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","TypeError","l","f","next","done","push","value","length","Array","isArray","_toConsumableArray","_arrayWithoutHoles","_iterableToArray","_nonIterableSpread","from","_arrayLikeToArray","_regeneratorRuntime","c","asyncIterator","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","h","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","resolve","__await","then","callInvokeWithMethodAndArg","Error","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","resultName","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","isNaN","displayName","isGeneratorFunction","name","mark","setPrototypeOf","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","_catch","delegateYield","_createForOfIteratorHelper","_n","F","toString","test","asyncGeneratorStep","_asyncToGenerator","arguments","apply","_next","_throw","_classCallCheck","_defineProperties","_toPropertyKey","key","_createClass","_defineProperty","_toPrimitive","toPrimitive","String","Number","Widget","exports","element","config","_this","logger","debug","Logger","concat","formatAsString","logAtCreation","id","_instances$get","instances","destroy","sGet","isDisabled","isDestroyed","destroyPromise","enableCallbacks","newSet","disableCallbacks","destroyCallbacks","disable","_callee","_iterator","_step","callback","_callee$","_context","debug8","t0","enable","_callee2","_iterator2","_step2","_callee2$","_context2","toggleEnable","_callee3","_callee3$","_context3","onDisable","handler","add","wrapCallback","onEnable","_callee4","_iterator3","_step3","elInstances","_callee4$","_context4","clear","deleteKey","prune","onDestroy","getElement","_instances$get2","registerWidget","_ref5","_callee6","newWidget","configValidator","options","_options$selector","prefixedName","selector","domWatcher","_callee6$","_context6","registeredWidgets","waitForInteractive","prefixName","getDefaultWidgetSelector","settings","autoWidgets","DOMWatcher","reuse","onMutation","_ref6","_callee5","operation","thisConfigValidator","widgets","configSpecs","dataAttr","_i","_configSpecs","spec","_config","theseWidgets","_callee5$","_context5","currentTargetOf","isFunction","getData","supportsMultiple","hasClass","splitOn","fetchWidgetConfig","t1","undefined","toArrayIfSingle","lengthOf","_iterator4","_step4","w","err","target","categories","S_REMOVED","_x5","S_ADDED","_x","_x2","_x3","_x4","getWidgetConfig","input","validator","separator","toOptionsObject","_ref7","_callee7","configPromises","_key2","_args7","_callee7$","_context7","_x6","_x7","prefix","fetchUniqueWidget","_ref8","_callee8","Type","widget","_callee8$","_context8","waitForDelay","logWarn","_x8","_x9","_x10","newXWeakMap","newMap","_iterator5","filter","isEmpty","_step5","entry","_splitOn","_splitOn2","kebabToCamelCase"],"sources":["../../../src/ts/widgets/widget.ts"],"sourcesContent":["/**\n * ## Specification for the HTML API for widgets\n *\n * The following describes the general syntax when using the HTML API for\n * automatic creation of widgets based on data attributes\n * ({@link Settings.settings.autoWidgets | settings.autoWidgets} must be true.\n *\n * A widget specification should be given as a\n * `data-lisn-<WidgetName>=\"<WidgetConfList>\"` attribute.\n *\n * Alternatively, if using all default configurations, you can simply add the\n * `lisn-<WidgetName>` CSS class. Specifying a configuration using CSS classes\n * is not currently possible for widgets, only triggers.\n *\n * The general specification for a widget is of the form:\n *\n * ```\n * <WidgetConfList> ::= <WidgetConf> { \";\" <WidgetConf> }\n *\n * <WidgetConf> ::= [ <WidgetOption> { \"|\" <WidgetOption> } ]\n *\n * <WidgetOption> ::=\n *     <BooleanOptionName> [ \"=\" ( \"false\" | \"true\" ) ] |\n *     <OptionName> \"=\" <OptionValue>\n * ```\n *\n * **NOTE:**\n *\n * There can be 0 or more spaces around any of the separator characters.\n *\n * Not all widgets support multiple instances per single element and therefore\n * multiple configurations. Refer to the specific widget.\n *\n * The characters \"|\", \";\", \"=\" are reserved separators and cannot be used\n * literally as part of an option value.\n *\n * @module Widgets\n */\n\nimport * as MC from \"@lisn/globals/minification-constants\";\nimport * as MH from \"@lisn/globals/minification-helpers\";\n\nimport { settings } from \"@lisn/globals/settings\";\n\nimport { hasClass, getData } from \"@lisn/utils/css-alter\";\nimport { waitForInteractive } from \"@lisn/utils/dom-events\";\nimport { logWarn } from \"@lisn/utils/log\";\nimport { toArrayIfSingle } from \"@lisn/utils/misc\";\nimport { waitForDelay } from \"@lisn/utils/tasks\";\nimport { formatAsString, kebabToCamelCase, splitOn } from \"@lisn/utils/text\";\n\nimport {\n  CallbackHandler,\n  Callback,\n  wrapCallback,\n} from \"@lisn/modules/callback\";\nimport { newXWeakMap } from \"@lisn/modules/x-map\";\n\nimport { DOMWatcher } from \"@lisn/watchers/dom-watcher\";\n\nimport debug from \"@lisn/debug/debug\";\n\nexport class Widget {\n  /**\n   * Disables the functionality of the widget. What this means is specific to\n   * each widget.\n   */\n  readonly disable: () => Promise<void>;\n\n  /**\n   * Re-enables the functionality of the widget. What this means is specific to\n   * each widget.\n   */\n  readonly enable: () => Promise<void>;\n\n  /**\n   * Re-enables the widget if disabled, otherwise disables it.\n   */\n  readonly toggleEnable: () => Promise<void>;\n\n  /**\n   * The given handler will be called when the widget is disabled.\n   */\n  readonly onDisable: (handler: WidgetHandler) => void;\n\n  /**\n   * The given handler will be called when the widget is enabled.\n   */\n  readonly onEnable: (handler: WidgetHandler) => void;\n\n  /**\n   * Returns true if the widget is currently disabled.\n   */\n  readonly isDisabled: () => boolean;\n\n  /**\n   * Undoes all modifications to the element and returns it to its original state.\n   *\n   * You will need to recreate it if you want to enable its functionality again.\n   */\n  readonly destroy: () => Promise<void>;\n\n  /**\n   * The given handler will be called when the widget is destroyed.\n   */\n  readonly onDestroy: (handler: WidgetHandler) => void;\n\n  /**\n   * Returns true if the widget is destroyed.\n   */\n  readonly isDestroyed: () => boolean;\n\n  /**\n   * Returns the element passed to the widget constructor.\n   */\n  readonly getElement: () => Element;\n\n  /**\n   * Retrieve an existing widget by element and ID.\n   */\n  static get(element: Element, id: string): Widget | null {\n    return instances.get(element)?.get(id) || null;\n  }\n\n  /**\n   * **IMPORTANT:** If ID is given and there's already a widget with this ID on\n   * this element, it will be destroyed!\n   */\n  constructor(element: Element, config?: { id?: string }) {\n    const logger = debug\n      ? new debug.Logger({\n          name: `${this.constructor.name}-${formatAsString(element)}`,\n          logAtCreation: this,\n        })\n      : null;\n\n    const id = config?.id;\n    if (id) {\n      instances.get(element)?.get(id)?.destroy(); // don't await here\n      instances.sGet(element).set(id, this);\n    }\n\n    let isDisabled = false;\n    let isDestroyed = false;\n    let destroyPromise: Promise<void>;\n\n    const enableCallbacks = MH.newSet<WidgetCallback>();\n    const disableCallbacks = MH.newSet<WidgetCallback>();\n    const destroyCallbacks = MH.newSet<WidgetCallback>();\n\n    this.disable = async () => {\n      if (!isDisabled) {\n        debug: logger?.debug8(\"Disabling\");\n        isDisabled = true;\n\n        for (const callback of disableCallbacks) {\n          await callback.invoke(this);\n        }\n      }\n    };\n\n    this.enable = async () => {\n      if (!isDestroyed && isDisabled) {\n        debug: logger?.debug8(\"Enabling\");\n        isDisabled = false;\n\n        for (const callback of enableCallbacks) {\n          await callback.invoke(this);\n        }\n      }\n    };\n\n    this.toggleEnable = async () => {\n      if (!isDestroyed) {\n        await (isDisabled ? this.enable : this.disable)();\n      }\n    };\n\n    this.onDisable = (handler) => disableCallbacks.add(wrapCallback(handler));\n    this.onEnable = (handler) => enableCallbacks.add(wrapCallback(handler));\n\n    this.isDisabled = () => isDisabled;\n\n    this.destroy = () => {\n      if (!destroyPromise) {\n        destroyPromise = (async () => {\n          debug: logger?.debug8(\"Destroying\");\n          isDestroyed = true;\n          await this.disable();\n\n          for (const callback of destroyCallbacks) {\n            await callback.invoke(this);\n          }\n\n          enableCallbacks.clear();\n          disableCallbacks.clear();\n          destroyCallbacks.clear();\n\n          if (id) {\n            const elInstances = instances.get(element);\n            if (elInstances?.get(id) === this) {\n              MH.deleteKey(elInstances, id);\n              instances.prune(element);\n            }\n          }\n        })();\n      }\n\n      return destroyPromise;\n    };\n\n    this.onDestroy = (handler) => destroyCallbacks.add(wrapCallback(handler));\n\n    this.isDestroyed = () => isDestroyed;\n\n    this.getElement = () => element;\n  }\n}\n\nexport type WidgetCallbackArgs = [Widget];\nexport type WidgetCallback = Callback<WidgetCallbackArgs>;\nexport type WidgetHandler =\n  | WidgetCallback\n  | CallbackHandler<WidgetCallbackArgs>;\n\n/**\n * **NOTE:** If the function returns a widget or a list of widgets created for\n * the given element, then each one will be automatically destroyed if the\n * element is removed from the DOM.\n */\nexport type WidgetCreateFn<Config extends Record<string, unknown>> = (\n  element: Element,\n  config?: Config,\n) => Widget | Widget[] | null | Promise<Widget | Widget[] | null>;\n\n/**\n * @see {@link getWidgetConfig}.\n */\nexport type WidgetConfigValidatorObject<\n  Config extends Record<string, unknown>,\n> = {\n  [K in keyof Config]: (key: K, v: unknown) => Config[K];\n};\n\n/**\n * @see {@link getWidgetConfig}.\n */\nexport type WidgetConfigAsyncValidatorObject<\n  Config extends Record<string, unknown>,\n> = {\n  [K in keyof Config]: (key: K, v: unknown) => Config[K] | Promise<Config[K]>;\n};\n\n/**\n * @see {@link getWidgetConfig}.\n */\nexport type WidgetConfigValidatorFunc<Config extends Record<string, unknown>> =\n  (\n    element: Element,\n  ) =>\n    | WidgetConfigValidatorObject<Config>\n    | WidgetConfigAsyncValidatorObject<Config>;\n\n/**\n * @see {@link getWidgetConfig}.\n */\nexport type WidgetConfigValidator<Config extends Record<string, unknown>> =\n  | WidgetConfigValidatorObject<Config>\n  | WidgetConfigValidatorFunc<Config>;\n\n/**\n * Enables automatic setting up of a widget from an elements matching the given\n * selector.\n *\n * If {@link settings.autoWidgets} is true, nothing is done. Otherwise,\n * when an element matching the selector is added to the DOM, `newWidget` will\n * be called and it's expected to setup the widget.\n *\n * **IMPORTANT:** The widget that is returned by `newWidget` will be\n * automatically destroyed when the element that created them is removed from\n * the DOM.\n *\n * **IMPORTANT:** If a widget by that name is already registered, the current\n * call does nothing, even if the remaining arguments differ.\n *\n * @param {} name       The name of the widget. Should be in kebab-case.\n * @param {} newWidget  Called for every element matching the widget selector.\n * @param {} configValidator\n *                      A validator object, or a function that returns such an\n *                      object, for all options supported by the widget. If\n *                      given, then the `newWidget` function will also be\n *                      passed a configuration object constructed from the\n *                      element's data attribute.\n * @param {} [options.selector]\n *                      The selector to match elements for. If not given, then\n *                      uses a default value of `[data-lisn-<name>], .lisn-<name>`\n * @param {} [options.supportsMultiple]\n *                      If true, and if `configValidator` is given, then the\n *                      value of the element's widget specific data attribute\n *                      will be split on \";\" and each one parsed individually\n *                      as a configuration. Then the `newWidget` function will\n *                      be called once for each configuration.\n */\nexport const registerWidget = async <Config extends Record<string, unknown>>(\n  name: string,\n  newWidget: WidgetCreateFn<Config>,\n  configValidator?: null | WidgetConfigValidator<Config>,\n  options?: {\n    selector?: string;\n    supportsMultiple?: boolean;\n  },\n) => {\n  if (registeredWidgets.has(name)) {\n    return;\n  }\n\n  registeredWidgets.add(name);\n\n  // init after DOM loaded so that the settings can be configured by the user\n  // straight after loading LISN.js\n  await waitForInteractive();\n\n  const prefixedName = MH.prefixName(name);\n  const selector = options?.selector ?? getDefaultWidgetSelector(prefixedName);\n\n  if (settings.autoWidgets) {\n    const domWatcher = DOMWatcher.reuse();\n    domWatcher.onMutation(\n      async (operation) => {\n        const element = MH.currentTargetOf(operation);\n        const thisConfigValidator = MH.isFunction(configValidator)\n          ? await configValidator(element)\n          : configValidator;\n\n        const widgets: Widget[] = [];\n        const configSpecs: string[] = [];\n        const dataAttr = getData(element, prefixedName);\n\n        if (options?.supportsMultiple) {\n          if (hasClass(element, prefixedName)) {\n            configSpecs.push(\"\");\n          }\n\n          if (dataAttr !== null) {\n            configSpecs.push(\n              ...(dataAttr ? splitOn(dataAttr, \";\", true) : [\"\"]),\n            );\n          }\n        } else {\n          configSpecs.push(dataAttr ?? \"\");\n        }\n\n        for (const spec of configSpecs) {\n          const config = thisConfigValidator\n            ? await fetchWidgetConfig(spec, thisConfigValidator)\n            : undefined;\n\n          const theseWidgets = await newWidget(element, config);\n          if (theseWidgets) {\n            widgets.push(...toArrayIfSingle(theseWidgets));\n          }\n        }\n\n        // auto-destroy on element remove\n        if (MH.lengthOf(widgets)) {\n          domWatcher.onMutation(\n            () => {\n              for (const w of widgets) {\n                w.destroy();\n              }\n            },\n            {\n              target: element,\n              categories: [MC.S_REMOVED],\n            },\n          );\n        }\n      },\n      {\n        selector,\n        categories: [MC.S_ADDED],\n      },\n    );\n  }\n};\n\n/**\n * Returns a configuration object from the given user input, which can be\n * either an object or a `<separator>` separated string of key=values.\n *\n * If `input` is a string, it must be of the format:\n *\n * ```\n * <UserConfigString> ::= <OptionSpec> { <Separator> <OptionSpec> }\n *\n * <OptionSpec> ::=\n *     <BooleanOptionName> [ \"=\" ( \"false\" | \"true\" ) ] |\n *     <OptionName> \"=\" <OptionValue>\n * ```\n *\n * By default, for widgets `<separator>` is \"|\".\n *\n * **NOTE:** If `input` is a string, option names will be converted from\n * kebab-case to camelCase.\n *\n * The given `validator` defines the shape of the returned object. It is called\n * for each entry _in the `validator` object_, with that key and the\n * corresponding value from the input configuration, as the two parameters.\n *\n * If a key is not found in the input, the value passed to the validating\n * function will be `undefined`.\n *\n * If the input is a string and a key has no value, the value passed to the\n * validating function will be an empty string `\"\"`.\n *\n * The final configuration contains all keys from the `validator` object with\n * the value that the validating function for each key returned.\n *\n * There are several built-in validating functions that you can make use of.\n *\n * @see {@link Utils.validateStrList}\n * @see {@link Utils.validateNumber}\n * @see {@link Utils.validateBoolean}\n * @see {@link Utils.validateString}\n * @see {@link Utils.validateBooleanOrString}\n */\nexport const getWidgetConfig = <Config extends Record<string, unknown>>(\n  input: Record<string, unknown> | string | null | undefined,\n  validator: WidgetConfigValidatorObject<Config>,\n  separator = \"|\",\n): Config => {\n  const config = {} as Config;\n  if (!(input instanceof Object)) {\n    input = toOptionsObject(input, separator);\n  }\n\n  for (const key in validator) {\n    config[key] = validator[key](key, input[key]);\n  }\n  return config;\n};\n\n/**\n * Like {@link getWidgetConfig} but it accepts an object whose validator\n * functions may return a promise.\n */\nexport const fetchWidgetConfig = async <Config extends Record<string, unknown>>(\n  input: Record<string, unknown> | string | null | undefined,\n  validator: WidgetConfigAsyncValidatorObject<Config>,\n  separator = \"|\",\n): Promise<Config> => {\n  const config = {} as Config;\n  const configPromises = getWidgetConfig<{\n    [K in keyof Config]: Config[K] | Promise<Config[K]>;\n  }>(input, validator, separator);\n\n  for (const key in configPromises) {\n    config[key] = await configPromises[key];\n  }\n\n  return config;\n};\n\n/**\n * @ignore\n * @internal\n */\nexport const getDefaultWidgetSelector = (prefix: string) =>\n  `.${prefix},[data-${prefix}]`;\n\n/**\n * @ignore\n * @internal\n */\nexport const fetchUniqueWidget = async <W extends Widget>(\n  name: string,\n  element: Element,\n  Type: { get: (element: Element) => W | null },\n): Promise<W | null> => {\n  let widget = Type.get(element);\n  if (!widget) {\n    await waitForDelay(0); // in case it's being processed now\n    widget = Type.get(element);\n\n    if (!widget) {\n      logWarn(`No ${name} widget for element ${formatAsString(element)}`);\n      return null;\n    }\n  }\n\n  return widget;\n};\n\nconst instances = newXWeakMap<Element, Map<string, Widget>>(() => MH.newMap());\nconst registeredWidgets = MH.newSet<string>();\n\n// --------------------\n\nconst toOptionsObject = (\n  input: string | null | undefined,\n  separator: string,\n) => {\n  const options: Record<string, string> = {};\n  for (const entry of MH.filter(\n    splitOn(input ?? \"\", separator, true),\n    (v) => !MH.isEmpty(v),\n  )) {\n    const [key, value] = splitOn(entry, /\\s*=\\s*/, true, 1);\n    options[kebabToCamelCase(key)] = value ?? \"\";\n  }\n  return options;\n};\n"],"mappings":"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","ignoreList":[]}