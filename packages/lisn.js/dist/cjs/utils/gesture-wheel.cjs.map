{"version":3,"file":"gesture-wheel.cjs","names":["MC","_interopRequireWildcard","require","MH","_directions","_math","_normalizeWheel","_gesture","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","_typeof","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","_createForOfIteratorHelper","Symbol","iterator","Array","isArray","_unsupportedIterableToArray","length","_n","F","s","done","value","f","TypeError","o","next","_arrayLikeToArray","toString","slice","constructor","name","from","test","getWheelGestureFragment","exports","events","options","isIterableObject","direction","S_NONE","intent","deltaX","deltaY","deltaZ","_iterator","_step","event","isWheelEvent","type","S_WHEEL","data","normalizeWheel","thisIntent","S_SCROLL","thisDeltaX","pixelX","thisDeltaY","pixelY","thisDeltaZ","maxDelta","havingMaxAbs","ctrlKey","percentage","abs","S_ZOOM","shiftKey","addDeltaZ","S_UNKNOWN","err","S_AMBIGUOUS","S_IN","S_OUT","getVectorDirection","angleDiffThreshold","device"],"sources":["../../../src/ts/utils/gesture-wheel.ts"],"sourcesContent":["/**\n * @module Utils\n */\n\nimport * as MC from \"@lisn/globals/minification-constants\";\nimport * as MH from \"@lisn/globals/minification-helpers\";\n\nimport { Direction, GestureIntent } from \"@lisn/globals/types\";\n\nimport { getVectorDirection } from \"@lisn/utils/directions\";\n\nimport { havingMaxAbs } from \"@lisn/utils/math\";\nimport { normalizeWheel } from \"@lisn/utils/normalize-wheel\";\n\nimport { GestureFragment, addDeltaZ } from \"@lisn/utils/gesture\";\n\n/**\n * Returns a {@link GestureFragment} for the given events. Only \"wheel\" events\n * will be considered.\n *\n * If there are no \"wheel\" events in the given list of events, returns `false`.\n *\n * The deltas of all events are summed together before determining final delta\n * and direction.\n *\n * If the events are of conflicting types, i.e. some scroll, some zoom, then\n * the intent will be \"unknown\" and the direction will be \"ambiguous\".\n *\n * If the deltas sum up to 0, the direction will be \"none\".\n *\n * **IMPORTANT NOTES ON THE DELTA VALUES**\n *\n * For wheel gestures the deltas are _highly_ unreliable, especially when\n * zooming (Control + wheel or pinching trackpad). You should not assume they\n * correspond to the would-be scroll or zoom amount that the browser would do.\n * But they can be used to determine relative amounts for animating, etc.\n *\n * If the browser reports the delta values of a WheelEvent to be in mode \"line\",\n * then a configurable fixed value is used\n * ({@link Settings.settings.deltaLineHeight | settings.deltaLineHeight}).\n *\n * If the browser reports the delta values of a WheelEvent to be in mode \"page\",\n * then a configurable fixed value is used\n * ({@link Settings.settings.deltaPageWidth | settings.deltaPageWidth} and\n * ({@link Settings.settings.deltaPageHeight | settings.deltaPageHeight}).\n *\n * For zoom intents `deltaZ` is based on what the browser reports as the\n * `deltaY`, which in most browsers roughly corresponds to a percentage zoom\n * factor.\n *\n * @param {} [options.angleDiffThreshold] See {@link getVectorDirection}.\n *                                        Default is 5.\n *\n * @return {} `false` if there are no \"wheel\" events in the list, otherwise a\n * {@link GestureFragment}.\n *\n * @category Gestures\n */\nexport const getWheelGestureFragment = (\n  events: Event | readonly Event[],\n  options?: {\n    angleDiffThreshold?: number;\n  },\n): GestureFragment | null | false => {\n  if (!MH.isIterableObject(events)) {\n    events = [events];\n  }\n\n  let direction: Direction = MC.S_NONE;\n  let intent: GestureIntent | null = null;\n  let deltaX = 0,\n    deltaY = 0,\n    deltaZ = 1;\n\n  for (const event of events) {\n    if (!MH.isWheelEvent(event) || event.type !== MC.S_WHEEL) {\n      continue;\n    }\n\n    const data = normalizeWheel(event);\n    let thisIntent: GestureIntent = MC.S_SCROLL;\n    let thisDeltaX = data.pixelX;\n    let thisDeltaY = data.pixelY;\n    let thisDeltaZ = 1;\n    const maxDelta = havingMaxAbs(thisDeltaX, thisDeltaY);\n\n    if (event.ctrlKey && !thisDeltaX) {\n      // Browsers report negative deltaY for zoom in, so swap sign\n      let percentage = -maxDelta;\n      // If it's more than 50, assume it's a mouse wheel => delta is roughly\n      // multiple of 10%. Otherwise a trackpad => delta is roughly multiple of 1%\n      if (MH.abs(percentage) >= 50) {\n        percentage /= 10;\n      }\n\n      thisDeltaZ = 1 + percentage / 100;\n\n      thisDeltaX = thisDeltaY = 0;\n      thisIntent = MC.S_ZOOM;\n    } else if (event.shiftKey && !thisDeltaX) {\n      // Holding Shift while turning wheel or swiping trackpad in vertically\n      // results in sideways scroll.\n      thisDeltaX = thisDeltaY;\n      thisDeltaY = 0;\n    }\n\n    deltaX += thisDeltaX;\n    deltaY += thisDeltaY;\n    deltaZ = addDeltaZ(deltaZ, thisDeltaZ);\n\n    if (!thisIntent) {\n      // not a relevant key\n    } else if (!intent) {\n      intent = thisIntent;\n    } else if (intent !== thisIntent) {\n      // mixture of zoom and scroll\n      intent = MC.S_UNKNOWN;\n    }\n  }\n\n  if (!intent) {\n    return false; // no relevant events\n  } else if (intent === MC.S_UNKNOWN) {\n    direction = MC.S_AMBIGUOUS;\n  } else if (intent === MC.S_ZOOM) {\n    direction = deltaZ > 1 ? MC.S_IN : deltaZ < 1 ? MC.S_OUT : MC.S_NONE;\n  } else {\n    direction = getVectorDirection(\n      [deltaX, deltaY],\n      options?.angleDiffThreshold,\n    );\n  }\n\n  return direction === MC.S_NONE\n    ? false\n    : {\n        device: MC.S_WHEEL,\n        direction,\n        intent,\n        deltaX,\n        deltaY,\n        deltaZ,\n      };\n};\n"],"mappings":"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","ignoreList":[]}