{"version":3,"file":"log.js","names":["MC","MH","joinAsString","Callback","logInfo","_len","arguments","length","args","Array","_key","isMessageSeen","consoleInfo","apply","LOG_PREFIX","concat","logWarn","_len2","_key2","consoleWarn","logError","_len3","_key3","lengthOf","REMOVE","consoleError","discardMessages","newSet","msg","_toConsumableArray","isSeen","has","add"],"sources":["../../../src/ts/utils/log.ts"],"sourcesContent":["/**\n * @module Utils\n */\n\nimport * as MC from \"@lisn/globals/minification-constants\";\nimport * as MH from \"@lisn/globals/minification-helpers\";\n\nimport { LogFunction } from \"@lisn/globals/types\";\n\nimport { joinAsString } from \"@lisn/utils/text\";\n\nimport { Callback } from \"@lisn/modules/callback\";\n\n/**\n * Like `console.info` except if the string representation of the given\n * arguments has already been logged, it does nothing.\n *\n * @category Logging\n */\nexport const logInfo: LogFunction = (...args) => {\n  if (!isMessageSeen(args)) {\n    MH.consoleInfo(MC.LOG_PREFIX, ...args);\n  }\n};\n\n/**\n * Like `console.warn` except if the string representation of the given\n * arguments has already been logged, it does nothing.\n *\n * @category Logging\n */\nexport const logWarn: LogFunction = (...args) => {\n  if (!isMessageSeen(args)) {\n    MH.consoleWarn(MC.LOG_PREFIX, ...args);\n  }\n};\n\n/**\n * Like `console.error` except if the string representation of the given\n * arguments has already been logged, it does nothing.\n *\n * @category Logging\n */\nexport const logError: LogFunction = (...args) => {\n  if (\n    (MH.lengthOf(args) > 1 || args[0] !== Callback.REMOVE) &&\n    !isMessageSeen(args)\n  ) {\n    MH.consoleError(MC.LOG_PREFIX, ...args);\n  }\n};\n\nconst discardMessages = MH.newSet<string>();\nconst isMessageSeen = (args: unknown[]) => {\n  const msg = joinAsString(\" \", ...args);\n  const isSeen = discardMessages.has(msg);\n  discardMessages.add(msg);\n  return isSeen;\n};\n"],"mappings":";;;;;;AAAA;AACA;AACA;;AAEA,OAAO,KAAKA,EAAE;AACd,OAAO,KAAKC,EAAE;AAId,SAASC,YAAY;AAErB,SAASC,QAAQ;;AAEjB;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAMC,OAAoB,GAAG,SAAvBA,OAAoBA,CAAA,EAAgB;EAAA,SAAAC,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAATC,IAAI,OAAAC,KAAA,CAAAJ,IAAA,GAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;IAAJF,IAAI,CAAAE,IAAA,IAAAJ,SAAA,CAAAI,IAAA;EAAA;EAC1C,IAAI,CAACC,aAAa,CAACH,IAAI,CAAC,EAAE;IACxBP,EAAE,CAACW,WAAW,CAAAC,KAAA,CAAdZ,EAAE,GAAaD,EAAE,CAACc,UAAU,EAAAC,MAAA,CAAKP,IAAI,EAAC;EACxC;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAMQ,OAAoB,GAAG,SAAvBA,OAAoBA,CAAA,EAAgB;EAAA,SAAAC,KAAA,GAAAX,SAAA,CAAAC,MAAA,EAATC,IAAI,OAAAC,KAAA,CAAAQ,KAAA,GAAAC,KAAA,MAAAA,KAAA,GAAAD,KAAA,EAAAC,KAAA;IAAJV,IAAI,CAAAU,KAAA,IAAAZ,SAAA,CAAAY,KAAA;EAAA;EAC1C,IAAI,CAACP,aAAa,CAACH,IAAI,CAAC,EAAE;IACxBP,EAAE,CAACkB,WAAW,CAAAN,KAAA,CAAdZ,EAAE,GAAaD,EAAE,CAACc,UAAU,EAAAC,MAAA,CAAKP,IAAI,EAAC;EACxC;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAMY,QAAqB,GAAG,SAAxBA,QAAqBA,CAAA,EAAgB;EAAA,SAAAC,KAAA,GAAAf,SAAA,CAAAC,MAAA,EAATC,IAAI,OAAAC,KAAA,CAAAY,KAAA,GAAAC,KAAA,MAAAA,KAAA,GAAAD,KAAA,EAAAC,KAAA;IAAJd,IAAI,CAAAc,KAAA,IAAAhB,SAAA,CAAAgB,KAAA;EAAA;EAC3C,IACE,CAACrB,EAAE,CAACsB,QAAQ,CAACf,IAAI,CAAC,GAAG,CAAC,IAAIA,IAAI,CAAC,CAAC,CAAC,KAAKL,QAAQ,CAACqB,MAAM,KACrD,CAACb,aAAa,CAACH,IAAI,CAAC,EACpB;IACAP,EAAE,CAACwB,YAAY,CAAAZ,KAAA,CAAfZ,EAAE,GAAcD,EAAE,CAACc,UAAU,EAAAC,MAAA,CAAKP,IAAI,EAAC;EACzC;AACF,CAAC;AAED,IAAMkB,eAAe,GAAGzB,EAAE,CAAC0B,MAAM,CAAS,CAAC;AAC3C,IAAMhB,aAAa,GAAG,SAAhBA,aAAaA,CAAIH,IAAe,EAAK;EACzC,IAAMoB,GAAG,GAAG1B,YAAY,CAAAW,KAAA,UAAC,GAAG,EAAAE,MAAA,CAAAc,kBAAA,CAAKrB,IAAI,GAAC;EACtC,IAAMsB,MAAM,GAAGJ,eAAe,CAACK,GAAG,CAACH,GAAG,CAAC;EACvCF,eAAe,CAACM,GAAG,CAACJ,GAAG,CAAC;EACxB,OAAOE,MAAM;AACf,CAAC","ignoreList":[]}