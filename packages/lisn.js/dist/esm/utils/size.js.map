{"version":3,"file":"size.js","names":["MC","MH","waitForMeasureTime","createOverlay","getEntryContentBox","entry","size","contentBoxSize","getSizeFromInlineBlock","rect","contentRect","S_WIDTH","S_HEIGHT","getEntryBorderBox","fallbackToContent","borderBoxSize","NaN","isValidBox","box","includes","ALL_BOXES","isValidDimension","dimension","ALL_DIMENSIONS","tryGetViewportOverlay","viewportOverlay","fetchViewportOverlay","init","fetchViewportSize","realtime","_MH$getDocScrollingEl","root","hasDOM","getDocScrollingElement","getBody","clientWidth","clientHeight","S_INLINE_SIZE","S_BLOCK_SIZE","isIterableObject","initPromise","id","prefixName","style","position"],"sources":["../../../src/ts/utils/size.ts"],"sourcesContent":["/**\n * @module Utils\n */\n\nimport * as MC from \"@lisn/globals/minification-constants\";\nimport * as MH from \"@lisn/globals/minification-helpers\";\n\nimport { Box, Dimension, Size } from \"@lisn/globals/types\";\n\nimport { waitForMeasureTime } from \"@lisn/utils/dom-optimize\";\nimport { createOverlay } from \"@lisn/utils/overlays\";\n\n/**\n * Returns the content box size of the given\n * {@link https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserverEntry | ResizeObserverEntry}.\n *\n * @category Size measurements\n */\nexport const getEntryContentBox = (entry: ResizeObserverEntry): Size => {\n  const size = entry.contentBoxSize;\n\n  if (size) {\n    return getSizeFromInlineBlock(size);\n  }\n\n  const rect = entry.contentRect;\n  return { [MC.S_WIDTH]: rect[MC.S_WIDTH], [MC.S_HEIGHT]: rect[MC.S_HEIGHT] };\n};\n\n/**\n * Returns the border box size of the given\n * {@link https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserverEntry | ResizeObserverEntry}.\n *\n * @param fallbackToContent If the entry does not contain border box\n *                          measurements (depending on browser), then fall back\n *                          to using the content box size. Otherwise (by\n *                          default) will return `NaN` values for width and\n *                          height.\n *\n * @category Size measurements\n */\nexport const getEntryBorderBox = (\n  entry: ResizeObserverEntry,\n  fallbackToContent = false,\n): Size => {\n  const size = entry.borderBoxSize;\n\n  if (size) {\n    return getSizeFromInlineBlock(size);\n  } else if (fallbackToContent) {\n    return getEntryContentBox(entry);\n  }\n\n  return { [MC.S_WIDTH]: NaN, [MC.S_HEIGHT]: NaN };\n};\n\n/**\n * Returns true if the given string is a valid box type.\n *\n * @category Validation\n */\nexport const isValidBox = (box: string): box is Box =>\n  MH.includes(ALL_BOXES, box);\n\n/**\n * Returns true if the given string is a valid dimension.\n *\n * @category Validation\n */\nexport const isValidDimension = (dimension: string): dimension is Dimension =>\n  MH.includes(ALL_DIMENSIONS, dimension);\n\n/**\n * @ignore\n * @internal\n */\nexport const tryGetViewportOverlay = (): HTMLElement | null =>\n  viewportOverlay ?? null;\n\n/**\n * @ignore\n * @internal\n *\n * Exposed via SizeWatcher\n */\nexport const fetchViewportOverlay = async (): Promise<HTMLElement> => {\n  await init();\n\n  return viewportOverlay;\n};\n\n/**\n * @ignore\n * @internal\n */\nexport const fetchViewportSize = async (realtime = false) => {\n  if (!realtime) {\n    await waitForMeasureTime();\n  }\n\n  const root = MH.hasDOM()\n    ? (MH.getDocScrollingElement() ?? MH.getBody())\n    : null;\n\n  return {\n    [MC.S_WIDTH]: root?.clientWidth || 0,\n    [MC.S_HEIGHT]: root?.clientHeight || 0,\n  };\n};\n\n// ----------------------------------------\n\nconst S_INLINE_SIZE = \"inlineSize\";\nconst S_BLOCK_SIZE = \"blockSize\";\n\nconst ALL_BOXES: Box[] = [\"content\", \"border\"] as const;\nconst ALL_DIMENSIONS: Dimension[] = [MC.S_WIDTH, MC.S_HEIGHT] as const;\n\nconst getSizeFromInlineBlock = (\n  size: ResizeObserverSize | ReadonlyArray<ResizeObserverSize>,\n): Size => {\n  /* istanbul ignore else */\n  if (MH.isIterableObject(size)) {\n    return {\n      [MC.S_WIDTH]: size[0][S_INLINE_SIZE],\n      [MC.S_HEIGHT]: size[0][S_BLOCK_SIZE],\n    };\n  }\n  return {\n    // in some browsers inlineSize and blockSize are scalars and nor Arrays\n    [MC.S_WIDTH]: (size as { [S_INLINE_SIZE]: number })[S_INLINE_SIZE],\n    [MC.S_HEIGHT]: (size as { [S_BLOCK_SIZE]: number })[S_BLOCK_SIZE],\n  };\n};\n\n// ------------------------------\n\nlet viewportOverlay: HTMLElement;\nlet initPromise: Promise<void> | null = null;\nconst init = (): Promise<void> => {\n  if (!initPromise) {\n    initPromise = (async () => {\n      viewportOverlay = await createOverlay({\n        id: MH.prefixName(\"vp-ovrl\"),\n        style: {\n          position: \"fixed\",\n          [MC.S_WIDTH]: \"100vw\",\n          [MC.S_HEIGHT]: \"100vh\",\n        },\n      });\n    })();\n  }\n\n  return initPromise;\n};\n"],"mappings":"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","ignoreList":[]}