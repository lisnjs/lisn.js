{"version":3,"file":"track-size.js","names":["MH","SizeWatcher","Widget","registerWidget","TrackSize","_Widget","element","_this","_classCallCheck","_callSuper","id","DUMMY_ID","reuse","trackSize","target","threshold","onDestroy","noTrackSize","_inherits","_createClass","key","value","get","instance","_superPropGet","isInstanceOf","register","WIDGET_NAME"],"sources":["../../../src/ts/widgets/track-size.ts"],"sourcesContent":["/**\n * @module Widgets\n */\n\nimport * as MH from \"@lisn/globals/minification-helpers\";\n\nimport { SizeWatcher } from \"@lisn/watchers/size-watcher\";\n\nimport { Widget, registerWidget } from \"@lisn/widgets/widget\";\n\n/**\n * This is a simple wrapper around the {@link SizeWatcher}. If you are using\n * the JavaScript API, you should use the {@link SizeWatcher} directly. The\n * purpose of this widget is to expose the watcher's ability to track size\n * and set relevant CSS properties via the HTML API. See\n * {@link SizeWatcher.trackSize}.\n *\n * -----\n *\n * To use with auto-widgets (HTML API) (see\n * {@link Settings.settings.autoWidgets | settings.autoWidgets}), the following\n * CSS classes or data attributes are recognized:\n * - `lisn-track-size` class or `data-lisn-track-size` attribute set on\n *   the element that constitutes the widget.\n *\n * This widget does not support configuration and uses the default\n * {@link SizeWatcher} configuration except for resize threshold equal to 0.\n *\n * @example\n * This will track the size of this element and set the relevant CSS\n * properties. It will use the default {@link SizeWatcher} options and resize\n * threshold of 0.\n *\n * ```html\n * <div class=\"lisn-track-size\"></div>\n * ```\n */\nexport class TrackSize extends Widget {\n  static get(element: Element): TrackSize | null {\n    const instance = super.get(element, DUMMY_ID);\n    if (MH.isInstanceOf(instance, TrackSize)) {\n      return instance;\n    }\n    return null;\n  }\n\n  static register() {\n    registerWidget(WIDGET_NAME, (element) => {\n      if (!TrackSize.get(element)) {\n        return new TrackSize(element);\n      }\n      return null;\n    });\n  }\n\n  constructor(element: Element) {\n    super(element, { id: DUMMY_ID });\n\n    SizeWatcher.reuse().trackSize(null, {\n      target: element,\n      threshold: 0,\n    });\n\n    this.onDestroy(() => SizeWatcher.reuse().noTrackSize(null, element));\n  }\n}\n\n// --------------------\n\nconst WIDGET_NAME = \"track-size\";\n// Only one TrackSize widget per element is allowed, but Widget requires a\n// non-blank ID.\nconst DUMMY_ID = WIDGET_NAME;\n"],"mappings":";;;;;;;;;;;;;;;;AAAA;AACA;AACA;;AAEA,OAAO,KAAKA,EAAE;AAEd,SAASC,WAAW;AAEpB,SAASC,MAAM,EAAEC,cAAc;;AAE/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAaC,SAAS,0BAAAC,OAAA;EAkBpB,SAAAD,UAAYE,OAAgB,EAAE;IAAA,IAAAC,KAAA;IAAAC,eAAA,OAAAJ,SAAA;IAC5BG,KAAA,GAAAE,UAAA,OAAAL,SAAA,GAAME,OAAO,EAAE;MAAEI,EAAE,EAAEC;IAAS,CAAC;IAE/BV,WAAW,CAACW,KAAK,CAAC,CAAC,CAACC,SAAS,CAAC,IAAI,EAAE;MAClCC,MAAM,EAAER,OAAO;MACfS,SAAS,EAAE;IACb,CAAC,CAAC;IAEFR,KAAA,CAAKS,SAAS,CAAC;MAAA,OAAMf,WAAW,CAACW,KAAK,CAAC,CAAC,CAACK,WAAW,CAAC,IAAI,EAAEX,OAAO,CAAC;IAAA,EAAC;IAAC,OAAAC,KAAA;EACvE;EAACW,SAAA,CAAAd,SAAA,EAAAC,OAAA;EAAA,OAAAc,YAAA,CAAAf,SAAA;IAAAgB,GAAA;IAAAC,KAAA,EA1BD,SAAOC,GAAGA,CAAChB,OAAgB,EAAoB;MAC7C,IAAMiB,QAAQ,GAAAC,aAAA,CAAApB,SAAA,mBAAaE,OAAO,EAAEK,QAAQ,EAAC;MAC7C,IAAIX,EAAE,CAACyB,YAAY,CAACF,QAAQ,EAAEnB,SAAS,CAAC,EAAE;QACxC,OAAOmB,QAAQ;MACjB;MACA,OAAO,IAAI;IACb;EAAC;IAAAH,GAAA;IAAAC,KAAA,EAED,SAAOK,QAAQA,CAAA,EAAG;MAChBvB,cAAc,CAACwB,WAAW,EAAE,UAACrB,OAAO,EAAK;QACvC,IAAI,CAACF,SAAS,CAACkB,GAAG,CAAChB,OAAO,CAAC,EAAE;UAC3B,OAAO,IAAIF,SAAS,CAACE,OAAO,CAAC;QAC/B;QACA,OAAO,IAAI;MACb,CAAC,CAAC;IACJ;EAAC;AAAA,EAhB4BJ,MAAM;;AA8BrC;;AAEA,IAAMyB,WAAW,GAAG,YAAY;AAChC;AACA;AACA,IAAMhB,QAAQ,GAAGgB,WAAW","ignoreList":[]}